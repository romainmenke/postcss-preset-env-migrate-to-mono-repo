From 73ad2b75dda15981326296cc7a75fae330928eb0 Mon Sep 17 00:00:00 2001
From: Maxime Thirouin <m@moox.io>
Date: Sat, 4 Oct 2014 08:18:16 +0200
Subject: [PATCH 01/34] Initial release from postcss-color

Close https://github.com/postcss/postcss-color/issues/4
---
 .editorconfig                            |  16 +++
 .gitignore                               |   2 +
 .jscsrc                                  | 130 +++++++++++++++++++++++
 .jshintrc                                |   9 ++
 .travis.yml                              |   1 +
 CHANGELOG.md                             |   3 +
 LICENSE                                  |  20 ++++
 README.md                                |  61 +++++++++++
 index.js                                 |  68 ++++++++++++
 package.json                             |  39 +++++++
 test/fixtures/rebeccapurple.css          |   4 +
 test/fixtures/rebeccapurple.expected.css |   4 +
 test/index.js                            |  24 +++++
 13 files changed, 381 insertions(+)
 create mode 100644 .editorconfig
 create mode 100644 .gitignore
 create mode 100644 .jscsrc
 create mode 100644 .jshintrc
 create mode 100644 .travis.yml
 create mode 100755 CHANGELOG.md
 create mode 100755 LICENSE
 create mode 100755 README.md
 create mode 100755 index.js
 create mode 100755 package.json
 create mode 100644 test/fixtures/rebeccapurple.css
 create mode 100644 test/fixtures/rebeccapurple.expected.css
 create mode 100755 test/index.js

diff --git a/.editorconfig b/.editorconfig
new file mode 100644
index 0000000..8978b44
--- /dev/null
+++ b/.editorconfig
@@ -0,0 +1,16 @@
+# editorconfig.org
+root = true
+
+[*]
+end_of_line = lf
+charset = utf-8
+trim_trailing_whitespace = true
+insert_final_newline = true
+indent_style = space
+indent_size = 2
+
+[*.md]
+trim_trailing_whitespace = false
+
+[Makefile]
+indent_style = tab
diff --git a/.gitignore b/.gitignore
new file mode 100644
index 0000000..7ab649f
--- /dev/null
+++ b/.gitignore
@@ -0,0 +1,2 @@
+node_modules
+test/fixtures/*.actual.css
diff --git a/.jscsrc b/.jscsrc
new file mode 100644
index 0000000..29720b3
--- /dev/null
+++ b/.jscsrc
@@ -0,0 +1,130 @@
+{
+  "excludeFiles": [
+    "node_modules/**"
+  ],
+  "fileExtensions": [
+    ".js"
+  ],
+  "requireCurlyBraces": [
+    "if",
+    "else",
+    "for",
+    "while",
+    "do",
+    "try",
+    "catch"
+  ],
+  "requireSpaceAfterKeywords": [
+    "if",
+    "else",
+    "for",
+    "while",
+    "do",
+    "switch",
+    "return",
+    "try",
+    "catch"
+  ],
+  "requireSpaceBeforeBlockStatements": true,
+  "requireParenthesesAroundIIFE": true,
+  "requireSpacesInConditionalExpression": {
+    "afterTest": true,
+    "beforeConsequent": true,
+    "afterConsequent": true,
+    "beforeAlternate": true
+  },
+  "requireSpacesInFunctionExpression": {
+    "beforeOpeningCurlyBrace": true
+  },
+  "disallowSpacesInFunctionExpression": {
+    "beforeOpeningRoundBrace": true
+  },
+  "disallowMultipleVarDecl": true,
+  "requireBlocksOnNewline": 1,
+  "disallowPaddingNewlinesInBlocks": true,
+  "disallowEmptyBlocks": true,
+  "disallowSpacesInsideObjectBrackets": true,
+  "disallowSpacesInsideArrayBrackets": true,
+  "disallowSpacesInsideParentheses": true,
+  "disallowQuotedKeysInObjects": "allButReserved",
+  "disallowSpaceAfterObjectKeys": true,
+  "requireCommaBeforeLineBreak": true,
+  "requireOperatorBeforeLineBreak": [
+    "?",
+    "+",
+    "-",
+    "/",
+    "*",
+    "=",
+    "==",
+    "===",
+    "!=",
+    "!==",
+    ">",
+    ">=",
+    "<",
+    "<="
+  ],
+  "disallowSpaceAfterPrefixUnaryOperators": [
+    "++",
+    "--",
+    "+",
+    "-",
+    "~",
+    "!"
+  ],
+  "disallowSpaceBeforePostfixUnaryOperators": [
+    "++",
+    "--"
+  ],
+  "requireSpaceBeforeBinaryOperators": [
+    "+",
+    "-",
+    "/",
+    "*",
+    "=",
+    "==",
+    "===",
+    "!=",
+    "!=="
+  ],
+  "requireSpaceAfterBinaryOperators": [
+    "+",
+    "-",
+    "/",
+    "*",
+    "=",
+    "==",
+    "===",
+    "!=",
+    "!=="
+  ],
+  "disallowImplicitTypeConversion": [
+    "numeric",
+    "boolean",
+    "binary",
+    "string"
+  ],
+  "requireCamelCaseOrUpperCaseIdentifiers": "ignoreProperties",
+  "disallowKeywords": [
+    "with"
+  ],
+  "disallowMultipleLineStrings": true,
+  "validateQuoteMarks": "\"",
+  "validateIndentation": 2,
+  "disallowMixedSpacesAndTabs": true,
+  "disallowTrailingWhitespace": true,
+  "requireKeywordsOnNewLine": [
+    "else"
+  ],
+  "requireLineFeedAtFileEnd": true,
+  "requireCapitalizedConstructors": true,
+  "safeContextKeyword": "that",
+  "requireDotNotation": true,
+  "validateJSDoc": {
+    "checkParamNames": true,
+    "checkRedundantParams": true,
+    "requireParamTypes": true
+  },
+  "requireSpaceAfterLineComment": true
+}
diff --git a/.jshintrc b/.jshintrc
new file mode 100644
index 0000000..9f268f7
--- /dev/null
+++ b/.jshintrc
@@ -0,0 +1,9 @@
+{
+  "newcap": false,
+  "undef": true,
+  "unused": true,
+  "asi": true,
+  "esnext": true,
+  "node": true,
+  "browser": true
+}
diff --git a/.travis.yml b/.travis.yml
new file mode 100644
index 0000000..587bd3e
--- /dev/null
+++ b/.travis.yml
@@ -0,0 +1 @@
+language: node_js
diff --git a/CHANGELOG.md b/CHANGELOG.md
new file mode 100755
index 0000000..3094675
--- /dev/null
+++ b/CHANGELOG.md
@@ -0,0 +1,3 @@
+# 1.0.0 - 2014-10-04
+
+Initial release from [postcss-color](https://github.com/postcss/postcss-color)
diff --git a/LICENSE b/LICENSE
new file mode 100755
index 0000000..8b39b8f
--- /dev/null
+++ b/LICENSE
@@ -0,0 +1,20 @@
+The MIT License (MIT)
+
+Copyright (c) 2014 Maxime Thirouin
+
+Permission is hereby granted, free of charge, to any person obtaining a copy of
+this software and associated documentation files (the "Software"), to deal in
+the Software without restriction, including without limitation the rights to
+use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
+the Software, and to permit persons to whom the Software is furnished to do so,
+subject to the following conditions:
+
+The above copyright notice and this permission notice shall be included in all
+copies or substantial portions of the Software.
+
+THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
diff --git a/README.md b/README.md
new file mode 100755
index 0000000..0f702e9
--- /dev/null
+++ b/README.md
@@ -0,0 +1,61 @@
+# postcss-color-rebeccapurple [![Build Status](https://travis-ci.org/postcss/postcss-color-rebeccapurple.png)](https://travis-ci.org/postcss/postcss-color-rebeccapurple)
+
+> [PostCSS](https://github.com/postcss/postcss) plugin to transform [W3C CSS `rebeccapurple` color](http://dev.w3.org/csswg/css-color/#valuedef-color-rebeccapurple) to more compatible CSS (rgb()).
+
+## Installation
+
+```bash
+$ npm install postcss-color-rebeccapurple
+```
+
+## Usage
+
+```js
+// dependencies
+var fs = require("fs")
+var postcss = require("postcss")
+var colorRebeccapurple = require("postcss-color-rebeccapurple")
+
+// css to be processed
+var css = fs.readFileSync("input.css", "utf8")
+
+// process css
+var output = postcss()
+  .use(colorRebeccapurple())
+  .process(css)
+  .css
+```
+
+Using this `input.css`:
+
+```css
+body {
+  color: rebeccapurple
+}
+
+```
+
+you will get:
+
+```css
+body {
+  color: rgb(102, 51, 153);
+}
+```
+
+Checkout [tests](test) for more examples.
+
+---
+
+## Contributing
+
+Work on a branch, install dev-dependencies, respect coding style & run tests before submitting a bug fix or a feature.
+
+    $ git clone https://github.com/postcss/postcss-color-rebeccapurple.git
+    $ git checkout -b patch-1
+    $ npm install
+    $ npm test
+
+## [Changelog](CHANGELOG.md)
+
+## [License](LICENSE)
diff --git a/index.js b/index.js
new file mode 100755
index 0000000..984bbc6
--- /dev/null
+++ b/index.js
@@ -0,0 +1,68 @@
+/**
+ * Module dependencies.
+ */
+var color = require("color")
+
+/**
+ * PostCSS plugin to convert colors
+ *
+ * @param {Object} options
+ */
+module.exports = function plugin(options) {
+  options = options || {}
+  options.rebeccapurple = options.rebeccapurple !== undefined ? options.rebeccapurple : true
+  options.hwb = options.hwb !== undefined ? options.hwb : true
+  options.hexAlpha = options.hexAlpha !== undefined ? options.hexAlpha : true
+  options.color = options.color !== undefined ? options.color : true
+
+  return function(style) {
+    style.eachDecl(function transformDecl(dec) {
+      if (!dec.value) {
+        return
+      }
+
+      dec.value = transform(dec.value, dec.source, options)
+    })
+  }
+}
+
+/**
+ * Transform colors to rgb() or rgba() on a declaration value
+ *
+ * @param {String} string
+ * @return {String}
+ */
+function transform(string, source, options) {
+  // order of transformation is important
+
+  try {
+    if (options.rebeccapurple && string.indexOf("rebeccapurple") > -1) {
+      string = transformRebeccapurple(string, source)
+    }
+  }
+  catch (e) {
+    throw new Error(gnuMessage(e.message, source))
+  }
+
+  return string
+}
+
+/**
+ * Transform rebeccapurple color to rgb()
+ *
+ * @param  {String} string declaration value
+ * @return {String}        converted declaration value to rgba()
+ */
+function transformRebeccapurple(string) {
+  return string.replace(/(rebeccapurple)\b/gi, color("rebeccapurple").rgbString())
+}
+
+/**
+ * return GNU style message
+ *
+ * @param {String} message
+ * @param {Object} source
+ */
+function gnuMessage(message, source) {
+  return (source ? (source.file ? source.file : "<css input>") + ":" + source.start.line + ":" + source.start.column : "") + " " + message
+}
diff --git a/package.json b/package.json
new file mode 100755
index 0000000..ce356e1
--- /dev/null
+++ b/package.json
@@ -0,0 +1,39 @@
+{
+  "name": "postcss-color-rebeccapurple",
+  "version": "0.0.0",
+  "description": "PostCSS plugin to transform W3C CSS rebeccapurple color to more compatible CSS (rgb())",
+  "keywords": [
+    "css",
+    "postcss",
+    "postcss-plugins",
+    "color",
+    "colour",
+    "rgb",
+    "rebeccapurple"
+  ],
+  "author": "Maxime Thirouin",
+  "license": "MIT",
+  "repository": {
+    "type": "git",
+    "url": "https://github.com/postcss/postcss-color-rebeccapurple.git"
+  },
+  "files": [
+    "CHANGELOG.md",
+    "LICENSE",
+    "README.md",
+    "index.js"
+  ],
+  "dependencies": {
+    "color": "^0.7.1"
+  },
+  "devDependencies": {
+    "jscs": "^1.6.2",
+    "jshint": "^2.5.6",
+    "postcss": "^2.2.5",
+    "tape": "^3.0.0"
+  },
+  "scripts": {
+    "lint": "jscs *.js **/*.js && jshint . --exclude-path .gitignore",
+    "test": "npm run lint && tape test"
+  }
+}
diff --git a/test/fixtures/rebeccapurple.css b/test/fixtures/rebeccapurple.css
new file mode 100644
index 0000000..27b88a4
--- /dev/null
+++ b/test/fixtures/rebeccapurple.css
@@ -0,0 +1,4 @@
+body {
+  color: rebeccapurple;
+  background: linear-gradient(rebeccapurple, blue 50%, rebeccapurple);
+}
diff --git a/test/fixtures/rebeccapurple.expected.css b/test/fixtures/rebeccapurple.expected.css
new file mode 100644
index 0000000..00f9305
--- /dev/null
+++ b/test/fixtures/rebeccapurple.expected.css
@@ -0,0 +1,4 @@
+body {
+  color: rgb(102, 51, 153);
+  background: linear-gradient(rgb(102, 51, 153), blue 50%, rgb(102, 51, 153));
+}
diff --git a/test/index.js b/test/index.js
new file mode 100755
index 0000000..650439b
--- /dev/null
+++ b/test/index.js
@@ -0,0 +1,24 @@
+var fs = require("fs")
+
+var test = require("tape")
+
+var postcss = require("postcss")
+var plugin = require("..")
+
+function filename(name) { return "test/" + name + ".css" }
+function read(name) { return fs.readFileSync(name, "utf8") }
+
+function compareFixtures(t, name, msg, opts, postcssOpts) {
+  postcssOpts = postcssOpts || {}
+  postcssOpts.from = filename("fixtures/" + name)
+  opts = opts || {}
+  var actual = postcss().use(plugin(opts)).process(read(postcssOpts.from), postcssOpts).css
+  var expected = read(filename("fixtures/" + name + ".expected"))
+  fs.writeFile(filename("fixtures/" + name + ".actual"), actual)
+  t.equal(actual, expected, msg)
+}
+
+test("rebeccapurple", function(t) {
+  compareFixtures(t, "rebeccapurple", "should transform rebeccapurple")
+  t.end()
+})
-- 
2.33.1

