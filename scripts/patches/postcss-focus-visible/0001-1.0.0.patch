From ce1e63cefefba334ea314f282275b031b91678ee Mon Sep 17 00:00:00 2001
From: Jonathan Neal <jonathantneal@hotmail.com>
Date: Tue, 23 May 2017 10:16:14 -0400
Subject: [PATCH 01/15] 1.0.0

---
 .appveyor.yml         |  18 ++++
 .gitignore            |   9 ++
 .tape.js              |  41 +++++++++
 .travis.yml           |   9 ++
 CHANGELOG.md          |   5 ++
 CONTRIBUTING.md       |  65 +++++++++++++++
 LICENSE.md            | 106 ++++++++++++++++++++++++
 README.md             | 187 ++++++++++++++++++++++++++++++++++++++++++
 index.js              |  63 ++++++++++++++
 package.json          |  56 +++++++++++++
 test/basic.css        |  20 +++++
 test/basic.expect.css |  20 +++++
 12 files changed, 599 insertions(+)
 create mode 100644 .appveyor.yml
 create mode 100644 .gitignore
 create mode 100644 .tape.js
 create mode 100644 .travis.yml
 create mode 100644 CHANGELOG.md
 create mode 100644 CONTRIBUTING.md
 create mode 100644 LICENSE.md
 create mode 100644 README.md
 create mode 100644 index.js
 create mode 100644 package.json
 create mode 100644 test/basic.css
 create mode 100644 test/basic.expect.css

diff --git a/.appveyor.yml b/.appveyor.yml
new file mode 100644
index 0000000..d6b511f
--- /dev/null
+++ b/.appveyor.yml
@@ -0,0 +1,18 @@
+# https://www.appveyor.com/docs/appveyor-yml
+
+environment:
+  matrix:
+    - nodejs_version: 4.0
+
+version: "{build}"
+build: off
+deploy: off
+
+install:
+  - ps: Install-Product node $env:nodejs_version
+  - npm install --ignore-scripts
+
+test_script:
+  - node --version
+  - npm --version
+  - cmd: "npm test"
diff --git a/.gitignore b/.gitignore
new file mode 100644
index 0000000..540f9a9
--- /dev/null
+++ b/.gitignore
@@ -0,0 +1,9 @@
+node_modules
+.*
+!.appveyor.yml
+!.gitignore
+!.tape.js
+!.travis.yml
+*.log*
+*.result.css
+basic.css.*
diff --git a/.tape.js b/.tape.js
new file mode 100644
index 0000000..e5f4fb1
--- /dev/null
+++ b/.tape.js
@@ -0,0 +1,41 @@
+const cache = [];
+
+module.exports = {
+	'postcss-focus-ring': {
+		'basic': {
+			message: 'supports basic usage'
+		},
+		'basic:cache': {
+			message: 'supports { assignTo: [] } usage',
+			options: {
+				assignTo: cache
+			},
+			after: () => {
+				const expectJSON = '[".focus-ring",".focus-ring test","test .focus-ring","test test.focus-ring","test .focus-ring test","test test.focus-ring test","test .focus-ring .focus-ring test","test :matches(.focus-ring) test","test :matches(.focus-ring test) test","test :matches(test .focus-ring) test","test :matches(test test.focus-ring) test","test :matches(test .focus-ring test) test","test :matches(test test.focus-ring test) test","test :matches(test .focus-ring .focus-ring test) test"]';
+				const resultJSON = JSON.stringify(cache);
+
+				if (expectJSON !== resultJSON) {
+					throw new Error('JSON does not match');
+				}
+			},
+			expect: 'basic.expect.css',
+			result: 'basic.result.css'
+		},
+		'basic:exportas-js': {
+			message: 'supports { exportAs: "js" } usage',
+			options: {
+				exportAs: 'js'
+			},
+			expect: 'basic.expect.css',
+			result: 'basic.result.css'
+		},
+		'basic:exportas-json': {
+			message: 'supports { exportAs: "json" } usage',
+			options: {
+				exportAs: 'json'
+			},
+			expect: 'basic.expect.css',
+			result: 'basic.result.css'
+		}
+	}
+};
diff --git a/.travis.yml b/.travis.yml
new file mode 100644
index 0000000..c564664
--- /dev/null
+++ b/.travis.yml
@@ -0,0 +1,9 @@
+# https://docs.travis-ci.com/user/travis-lint
+
+language: node_js
+
+node_js:
+  - 4
+
+install:
+  - npm install --ignore-scripts
diff --git a/CHANGELOG.md b/CHANGELOG.md
new file mode 100644
index 0000000..062b0a9
--- /dev/null
+++ b/CHANGELOG.md
@@ -0,0 +1,5 @@
+# Changes to PostCSS Focus Ring
+
+### 1.0.0 (May 22, 2017)
+
+- Initial version
diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md
new file mode 100644
index 0000000..41693d5
--- /dev/null
+++ b/CONTRIBUTING.md
@@ -0,0 +1,65 @@
+# Contributing to PostCSS Focus Ring
+
+You want to help? You rock! Now, take a moment to be sure your contributions
+make sense to everyone else.
+
+## Reporting Issues
+
+Found a problem? Want a new feature?
+
+- See if your issue or idea has [already been reported].
+- Provide a [reduced test case] or a [live example].
+
+Remember, a bug is a _demonstrable problem_ caused by _our_ code.
+
+## Submitting Pull Requests
+
+Pull requests are the greatest contributions, so be sure they are focused in
+scope and avoid unrelated commits.
+
+1. To begin; [fork this project], clone your fork, and add our upstream.
+   ```bash
+   # Clone your fork of the repo into the current directory
+   git clone git@github.com:YOUR_USER/postcss-focus-ring.git
+
+   # Navigate to the newly cloned directory
+   cd postcss-focus-ring
+
+   # Assign the original repo to a remote called "upstream"
+   git remote add upstream git@github.com:jonathantneal/postcss-focus-ring.git
+
+   # Install the tools necessary for testing
+   npm install
+   ```
+
+2. Create a branch for your feature or fix:
+   ```bash
+   # Move into a new branch for your feature
+   git checkout -b feature/thing
+   ```
+   ```bash
+   # Move into a new branch for your fix
+   git checkout -b fix/something
+   ```
+
+3. If your code follows our practices, then push your feature branch:
+   ```bash
+   # Test current code
+   npm test
+   ```
+   ```bash
+   # Push the branch for your new feature
+   git push origin feature/thing
+   ```
+   ```bash
+   # Or, push the branch for your update
+   git push origin update/something
+   ```
+
+That’s it! Now [open a pull request] with a clear title and description.
+
+[already been reported]: issues
+[fork this project]:     fork
+[live example]:          https://codepen.io/pen
+[open a pull request]:   https://help.github.com/articles/using-pull-requests/
+[reduced test case]:     https://css-tricks.com/reduced-test-cases/
diff --git a/LICENSE.md b/LICENSE.md
new file mode 100644
index 0000000..b5bc55c
--- /dev/null
+++ b/LICENSE.md
@@ -0,0 +1,106 @@
+# CC0 1.0 Universal
+
+## Statement of Purpose
+
+The laws of most jurisdictions throughout the world automatically confer
+exclusive Copyright and Related Rights (defined below) upon the creator and
+subsequent owner(s) (each and all, an “owner”) of an original work of
+authorship and/or a database (each, a “Work”).
+
+Certain owners wish to permanently relinquish those rights to a Work for the
+purpose of contributing to a commons of creative, cultural and scientific works
+(“Commons”) that the public can reliably and without fear of later claims of
+infringement build upon, modify, incorporate in other works, reuse and
+redistribute as freely as possible in any form whatsoever and for any purposes,
+including without limitation commercial purposes. These owners may contribute
+to the Commons to promote the ideal of a free culture and the further
+production of creative, cultural and scientific works, or to gain reputation or
+greater distribution for their Work in part through the use and efforts of
+others.
+
+For these and/or other purposes and motivations, and without any expectation of
+additional consideration or compensation, the person associating CC0 with a
+Work (the “Affirmer”), to the extent that he or she is an owner of Copyright
+and Related Rights in the Work, voluntarily elects to apply CC0 to the Work and
+publicly distribute the Work under its terms, with knowledge of his or her
+Copyright and Related Rights in the Work and the meaning and intended legal
+effect of CC0 on those rights.
+
+1. Copyright and Related Rights. A Work made available under CC0 may be
+	 protected by copyright and related or neighboring rights (“Copyright and
+	 Related Rights”). Copyright and Related Rights include, but are not limited
+	 to, the following:
+	1. the right to reproduce, adapt, distribute, perform, display,
+		 communicate, and translate a Work;
+	2. moral rights retained by the original author(s) and/or performer(s);
+	3. publicity and privacy rights pertaining to a person’s image or likeness
+		 depicted in a Work;
+	4. rights protecting against unfair competition in regards to a Work,
+		 subject to the limitations in paragraph 4(i), below;
+	5. rights protecting the extraction, dissemination, use and reuse of data
+		 in a Work;
+	6. database rights (such as those arising under Directive 96/9/EC of the
+		 European Parliament and of the Council of 11 March 1996 on the legal
+		 protection of databases, and under any national implementation thereof,
+		 including any amended or successor version of such directive); and
+	7. other similar, equivalent or corresponding rights throughout the world
+		 based on applicable law or treaty, and any national implementations
+		 thereof.
+
+2. Waiver. To the greatest extent permitted by, but not in contravention of,
+applicable law, Affirmer hereby overtly, fully, permanently, irrevocably and
+unconditionally waives, abandons, and surrenders all of Affirmer’s Copyright
+and Related Rights and associated claims and causes of action, whether now
+known or unknown (including existing as well as future claims and causes of
+action), in the Work (i) in all territories worldwide, (ii) for the maximum
+duration provided by applicable law or treaty (including future time
+extensions), (iii) in any current or future medium and for any number of
+copies, and (iv) for any purpose whatsoever, including without limitation
+commercial, advertising or promotional purposes (the “Waiver”). Affirmer makes
+the Waiver for the benefit of each member of the public at large and to the
+detriment of Affirmer’s heirs and successors, fully intending that such Waiver
+shall not be subject to revocation, rescission, cancellation, termination, or
+any other legal or equitable action to disrupt the quiet enjoyment of the Work
+by the public as contemplated by Affirmer’s express Statement of Purpose.
+
+3. Public License Fallback. Should any part of the Waiver for any reason be
+judged legally invalid or ineffective under applicable law, then the Waiver
+shall be preserved to the maximum extent permitted taking into account
+Affirmer’s express Statement of Purpose. In addition, to the extent the Waiver
+is so judged Affirmer hereby grants to each affected person a royalty-free, non
+transferable, non sublicensable, non exclusive, irrevocable and unconditional
+license to exercise Affirmer’s Copyright and Related Rights in the Work (i) in
+all territories worldwide, (ii) for the maximum duration provided by applicable
+law or treaty (including future time extensions), (iii) in any current or
+future medium and for any number of copies, and (iv) for any purpose
+whatsoever, including without limitation commercial, advertising or promotional
+purposes (the “License”). The License shall be deemed effective as of the date
+CC0 was applied by Affirmer to the Work. Should any part of the License for any
+reason be judged legally invalid or ineffective under applicable law, such
+partial invalidity or ineffectiveness shall not invalidate the remainder of the
+License, and in such case Affirmer hereby affirms that he or she will not (i)
+exercise any of his or her remaining Copyright and Related Rights in the Work
+or (ii) assert any associated claims and causes of action with respect to the
+Work, in either case contrary to Affirmer’s express Statement of Purpose.
+
+4. Limitations and Disclaimers.
+		1. No trademark or patent rights held by Affirmer are waived, abandoned,
+			 surrendered, licensed or otherwise affected by this document.
+		2. Affirmer offers the Work as-is and makes no representations or
+			 warranties of any kind concerning the Work, express, implied, statutory
+			 or otherwise, including without limitation warranties of title,
+			 merchantability, fitness for a particular purpose, non infringement, or
+			 the absence of latent or other defects, accuracy, or the present or
+			 absence of errors, whether or not discoverable, all to the greatest
+			 extent permissible under applicable law.
+		3. Affirmer disclaims responsibility for clearing rights of other persons
+			 that may apply to the Work or any use thereof, including without
+			 limitation any person’s Copyright and Related Rights in the Work.
+			 Further, Affirmer disclaims responsibility for obtaining any necessary
+			 consents, permissions or other rights required for any use of the Work.
+		4. Affirmer understands and acknowledges that Creative Commons is not a
+			 party to this document and has no duty or obligation with respect to
+			 this CC0 or use of the Work.
+
+For more information, please see
+https://creativecommons.org/publicdomain/zero/1.0/.
diff --git a/README.md b/README.md
new file mode 100644
index 0000000..9b2d76e
--- /dev/null
+++ b/README.md
@@ -0,0 +1,187 @@
+# PostCSS Focus Ring [<img src="https://postcss.github.io/postcss/logo.svg" alt="PostCSS Logo" width="90" height="90" align="right">][postcss]
+
+[![NPM Version][npm-img]][npm-url]
+[![Linux Build Status][cli-img]][cli-url]
+[![Windows Build Status][win-img]][win-url]
+[![Gitter Chat][git-img]][git-url]
+
+[PostCSS Focus Ring] lets you use the `:focus-ring` pseudo-selector in CSS,
+following the [Selectors Level 4] specification.
+
+```css
+:focus:not(:focus-ring) {
+  outline: none;
+}
+```
+
+Use PostCSS Focus Ring alongside the [focus-ring polyfill] to swap the
+pseudo-selector for a class, which maintains the same selector weight.
+
+```css
+:focus:not(.focus-ring) {
+  outline: none;
+}
+```
+
+---
+
+Additionally, transformed selectors can be exported to a JSON file.
+
+```js
+require('postcss-focus-ring')({
+  exportAs: 'json'
+});
+```
+
+```json
+[
+  ".focus-ring",
+  ".x-component-outside .focus-ring",
+  ".focus-ring .x-component-inside",
+]
+```
+
+Or as a JavaScript export:
+
+```js
+require('postcss-focus-ring')({
+  exportAs: 'js'
+});
+```
+
+```js
+export default [
+  ".focus-ring",
+  ".x-component-outside .focus-ring",
+  ".focus-ring .x-component-inside",
+];
+```
+
+With these variables synchronized to JavaScript, they can be used alongside the
+[focus-ring polyfill].
+
+## Usage
+
+Add [PostCSS Focus Ring] to your build tool:
+
+```bash
+npm install postcss-focus-ring --save-dev
+```
+
+#### Node
+
+Use [PostCSS Focus Ring] to process your CSS:
+
+```js
+require('postcss-focus-ring').process(YOUR_CSS);
+```
+
+#### PostCSS
+
+Add [PostCSS] to your build tool:
+
+```bash
+npm install postcss --save-dev
+```
+
+Use [PostCSS Focus Ring] as a plugin:
+
+```js
+postcss([
+  require('postcss-focus-ring')()
+]).process(YOUR_CSS);
+```
+
+#### Gulp
+
+Add [Gulp PostCSS] to your build tool:
+
+```bash
+npm install gulp-postcss --save-dev
+```
+
+Use [PostCSS Focus Ring] in your Gulpfile:
+
+```js
+var postcss = require('gulp-postcss');
+
+gulp.task('css', function () {
+  return gulp.src('./src/*.css').pipe(
+    postcss([
+      require('postcss-focus-ring')()
+    ])
+  ).pipe(
+    gulp.dest('.')
+  );
+});
+```
+
+#### Grunt
+
+Add [Grunt PostCSS] to your build tool:
+
+```bash
+npm install grunt-postcss --save-dev
+```
+
+Use [PostCSS Focus Ring] in your Gruntfile:
+
+```js
+grunt.loadNpmTasks('grunt-postcss');
+
+grunt.initConfig({
+  postcss: {
+    options: {
+      use: [
+        require('postcss-focus-ring')()
+      ]
+    },
+    dist: {
+      src: '*.css'
+    }
+  }
+});
+```
+
+## Advanced Options
+
+These options may be passed directly into the plugin.
+
+```js
+require('postcss-focus-ring')({ /* options */ });
+```
+
+#### exportAs
+
+`exportAs` is used to export transformed selectors originally containing the
+`:focus-ring` pseudo-selector.
+
+- If a `js` string is passed, the selectors will be exported as JavaScript.
+- If a `json` string is passed, the selectors will be exported as JSON.
+
+#### exportTo
+
+`exportTo` is the path to where your JSON or JavaScript will be saved. By
+default, it is the CSS source file with an additional `focus-ring-selectors`
+and `.js` or `.json` extension.
+
+#### assignTo
+
+`assignTo` is an Array you may push your transformed selectors to. This can
+be useful if running the plugin on the client side.
+
+[npm-url]: https://www.npmjs.com/package/postcss-focus-ring
+[npm-img]: https://img.shields.io/npm/v/postcss-focus-ring.svg
+[cli-url]: https://travis-ci.org/jonathantneal/postcss-focus-ring
+[cli-img]: https://img.shields.io/travis/jonathantneal/postcss-focus-ring.svg
+[win-url]: https://ci.appveyor.com/project/jonathantneal/postcss-focus-ring
+[win-img]: https://img.shields.io/appveyor/ci/jonathantneal/postcss-focus-ring.svg
+[git-url]: https://gitter.im/postcss/postcss
+[git-img]: https://img.shields.io/badge/chat-gitter-blue.svg
+
+[PostCSS Focus Ring]: https://github.com/jonathantneal/postcss-focus-ring
+[PostCSS]: https://github.com/postcss/postcss
+[Gulp PostCSS]: https://github.com/postcss/gulp-postcss
+[Grunt PostCSS]: https://github.com/nDmitry/grunt-postcss
+[Selectors Level 4]: https://drafts.csswg.org/selectors-4/#the-focusring-pseudo
+[focus-ring polyfill]: https://github.com/WICG/focus-ring
diff --git a/index.js b/index.js
new file mode 100644
index 0000000..85715a3
--- /dev/null
+++ b/index.js
@@ -0,0 +1,63 @@
+// tooling
+const fs      = require('fs');
+const postcss = require('postcss');
+const parser  = require('postcss-selector-parser');
+
+// plugin
+module.exports = postcss.plugin('postcss-focus-ring', (opts) => (root) => { // eslint-disable-line consistent-return
+	// transformed cache
+	const transformed = [];
+
+	// walk each matching rule
+	root.walkRules(/:focus-ring\b/, (rule) => {
+		// original selector
+		const originalSelector = rule.selector;
+
+		// transformed selector
+		const transformedSelector = parser((selectors) => {
+			// for each selector part
+			selectors.walk((selector) => {
+				// if the selector part is a :focus-ring pseudo
+				if (selector.type === 'pseudo' && selector.value === ':focus-ring') {
+					// change it to a .focus-ring class
+					selector.value = '.focus-ring';
+					selector.type = 'class';
+				}
+			});
+		}).process(originalSelector).result;
+
+		// if the selector has changed
+		if (originalSelector !== transformedSelector) {
+			// update the rule’s selector
+			rule.selector = transformedSelector;
+
+			// push the transformed selector into the transformed cache
+			transformed.push.apply(transformed, rule.selectors);
+		}
+	});
+
+	// filter the transformed cache of repeats
+	const transformedClean = transformed.filter((selector, index) => transformed.indexOf(selector) === index);
+
+	// if the assignTo option is enabled
+	if (opts && opts.assignTo) {
+		// push the transformed cache into the assignTo option
+		opts.assignTo.push.apply(opts.assignTo, transformedClean);
+	}
+
+	// if the exportAs option is enabled
+	if (opts && opts.exportAs) {
+		// destination path
+		const destination = `${ opts.destination || `${
+			root.source && root.source.input && root.source.input.file && root.source.input.file || 'css'
+		}.focus-ring-selectors.${ opts.exportAs === 'js' ? 'js' : 'json' }` }`;
+
+		// stringified contents
+		const json = JSON.stringify(transformedClean, null, '  ');
+		const contents = opts.exportAs === 'js' ? `export default ${ json };` : json;
+
+		return new Promise((resolve, reject) => {
+			fs.writeFile(destination, contents, (error) => error ? reject(error) : resolve());
+		});
+	}
+});
diff --git a/package.json b/package.json
new file mode 100644
index 0000000..2665514
--- /dev/null
+++ b/package.json
@@ -0,0 +1,56 @@
+{
+  "name": "postcss-focus-ring",
+  "version": "1.0.0",
+  "description": "Use the :focus-ring pseudo-selector in CSS",
+  "author": "Jonathan Neal <jonathantneal@hotmail.com>",
+  "license": "CC0-1.0",
+  "repository": "jonathantneal/postcss-focus-ring",
+  "homepage": "https://github.com/jonathantneal/postcss-focus-ring#readme",
+  "bugs": "https://github.com/jonathantneal/postcss-focus-ring/issues",
+  "main": "index.js",
+  "files": [
+    "index.js"
+  ],
+  "scripts": {
+    "clean": "git clean -X -d -f",
+    "prepublish": "npm test",
+    "test": "echo 'Running tests...'; npm run test:js && npm run test:tape",
+    "test:js": "eslint *.js --cache --ignore-pattern .gitignore",
+    "test:tape": "postcss-tape"
+  },
+  "engines": {
+    "node": ">=4.0.0"
+  },
+  "dependencies": {
+    "postcss": "^6.0.1",
+    "postcss-selector-parser": "^2.2.3"
+  },
+  "devDependencies": {
+    "eslint": "^3.19.0",
+    "eslint-config-dev": "2.0.0",
+    "postcss-tape": "2.0.1",
+    "pre-commit": "^1.2.2"
+  },
+  "eslintConfig": {
+    "extends": "dev"
+  },
+  "keywords": [
+    "postcss",
+    "css",
+    "postcss-plugin",
+    "focus",
+    "ring",
+    "css4",
+    "selectors",
+    "accessibility",
+    "a11y",
+    "input",
+    "keyboard",
+    "mouse",
+    "pen",
+    "pointer",
+    "cursor",
+    "trackpad",
+    "javascript"
+  ]
+}
diff --git a/test/basic.css b/test/basic.css
new file mode 100644
index 0000000..06df6bf
--- /dev/null
+++ b/test/basic.css
@@ -0,0 +1,20 @@
+:focus-ring {
+	order: 1;
+}
+
+:focus-ring,
+:focus-ring test,
+test :focus-ring,
+test test:focus-ring,
+test :focus-ring test,
+test test:focus-ring test,
+test :focus-ring :focus-ring test,
+test :matches(:focus-ring) test,
+test :matches(:focus-ring test) test,
+test :matches(test :focus-ring) test,
+test :matches(test test:focus-ring) test,
+test :matches(test :focus-ring test) test,
+test :matches(test test:focus-ring test) test,
+test :matches(test :focus-ring :focus-ring test) test {
+	order: 2;
+}
diff --git a/test/basic.expect.css b/test/basic.expect.css
new file mode 100644
index 0000000..5f92e4f
--- /dev/null
+++ b/test/basic.expect.css
@@ -0,0 +1,20 @@
+.focus-ring {
+	order: 1;
+}
+
+.focus-ring,
+.focus-ring test,
+test .focus-ring,
+test test.focus-ring,
+test .focus-ring test,
+test test.focus-ring test,
+test .focus-ring .focus-ring test,
+test :matches(.focus-ring) test,
+test :matches(.focus-ring test) test,
+test :matches(test .focus-ring) test,
+test :matches(test test.focus-ring) test,
+test :matches(test .focus-ring test) test,
+test :matches(test test.focus-ring test) test,
+test :matches(test .focus-ring .focus-ring test) test {
+	order: 2;
+}
-- 
2.33.1

