From 0cefff5517c9e92cfe70ae1954c32e1adfba55e4 Mon Sep 17 00:00:00 2001
From: Romain Menke <11521496+romainmenke@users.noreply.github.com>
Date: Mon, 15 Nov 2021 15:06:22 +0100
Subject: [PATCH 97/99] remove postcss 7 (csstools/postcss-nesting#93)

* remove postcss 7 and deno support

* update instructions

* cleanup

* cleanup

* cleanup

* fix deno

* tweak

* fmt

* fmt
---
 .bin/build.js                                 | 139 ------------------
 .bin/test-deno.js                             |  22 +++
 .bin/test-lint.js                             |  11 +-
 .bin/test-tape.js                             |  15 +-
 .bin/test.js                                  |  11 +-
 .github/workflows/test.yml                    |  17 ++-
 .gitignore                                    |   1 +
 .rollup.js                                    |  66 +++++++++
 mod.js                                        |   2 +-
 package.json                                  |  44 +++---
 src/{postcss-8-nesting.js => index.js}        |   0
 src/lib/atrule-within-rule.js                 |   8 +-
 src/lib/list.js                               |  10 +-
 .../mixing-nesting-rules-and-declarations.js  |   5 -
 src/lib/nest-rule-within-rule.js              |   3 +-
 src/lib/walk.js                               |   4 +-
 src/postcss-7-nesting.js                      |  18 ---
 test/at-rule.css                              |  12 ++
 test/at-rule.expect.css                       |   9 ++
 test/document.css                             |   7 +
 test/document.expect.css                      |   8 +
 test/supports.css                             |  11 ++
 test/supports.expect.css                      |  13 ++
 23 files changed, 213 insertions(+), 223 deletions(-)
 delete mode 100644 .bin/build.js
 create mode 100644 .bin/test-deno.js
 create mode 100644 .rollup.js
 rename src/{postcss-8-nesting.js => index.js} (100%)
 delete mode 100644 src/postcss-7-nesting.js
 create mode 100644 test/document.css
 create mode 100644 test/document.expect.css
 create mode 100644 test/supports.css
 create mode 100644 test/supports.expect.css

diff --git a/.bin/build.js b/.bin/build.js
deleted file mode 100644
index 9093bcc..0000000
--- a/.bin/build.js
+++ /dev/null
@@ -1,139 +0,0 @@
-import esbuild from 'esbuild'
-import fs from 'node:fs/promises'
-import zlib from 'node:zlib'
-
-/** @typedef {{ [name: string]: string }} Exports */
-/** @typedef {{ extension: string, transform(code: string, exports: Exports): string }} Variant */
-/** @type {{ [name: string]: Variant }} */
-const variants = {
-	esm: {
-		extension: 'mjs',
-		transform(code, exports) {
-			/** @type {string[]} */
-			const esmExports = []
-			for (const name in exports) esmExports.push(`${exports[name]} as ${name}`)
-			return (
-				esmExports.length
-					? `${code}export{${esmExports.join(',')}}`
-				: code
-			)
-		},
-	},
-	cjs: {
-		extension: 'cjs',
-		transform(code, exports) {
-			/** @type {string[]} */
-			const cjsExports = []
-			for (const name in exports) cjsExports.push(`${name}:${exports[name]}`)
-			return (
-				cjsExports.length
-					? 'default' in exports
-						? `${code}module.exports=Object.assign(${exports.default},{${cjsExports.join(',')}})`
-					: `${code}module.exports={${cjsExports.join(',')}}`
-				: code
-			)
-		},
-	},
-}
-
-/** @type {(pkgUrl: URL, name: string) => Promise<void>} */
-async function buildPackage(pkgUrl, base) {
-	const srcDirUrl = new URL(`src/`, pkgUrl)
-	const outDirUrl = new URL(`${base}/`, pkgUrl)
-
-	/** @type {{ name: string }} */
-	const { name } = JSON.parse(
-		await fs.readFile(
-			new URL('package.json', pkgUrl),
-			'utf8'
-		)
-	)
-
-	console.log(base)
-	console.log()
-
-	const srcPath = new URL(`${base}.js`, srcDirUrl).pathname
-	const outPath = new URL(`${base}.js`, outDirUrl).pathname
-
-	// Build ESM version
-	const {
-		outputFiles: [cmapResult, codeResult],
-	} = await esbuild.build({
-		entryPoints: [srcPath],
-		outfile: outPath,
-		bundle: true,
-		format: 'esm',
-		sourcemap: 'external',
-		external: ['postcss'],
-		write: false,
-	})
-
-	const code = codeResult.text
-	const map = cmapResult.text
-
-	// ensure empty dist directory
-	await fs.mkdir(outDirUrl, { recursive: true })
-
-	// write map
-	await fs.writeFile(new URL(`${name}.map`, outDirUrl), map)
-
-	// prepare variations
-	/** @type {(code: string, index?: number) => [string, string]} */
-	const splitByExport = (code, index = code.indexOf('export')) => [code.slice(0, index), code.slice(index)]
-	const [lead, tail] = splitByExport(code)
-
-	/** @type {{ [name: string]: string }} */
-	const exports = Array.from(tail.matchAll(/([$\w]+) as (\w+)/g)).reduce((exports, each) => Object.assign(exports, { [each[2]]: each[1] }), Object.create(null))
-
-	// write variation builds
-	for (const variant in variants) {
-		/** @type {Variant} */
-		const variantInfo = variants[variant]
-		const variantPath = new URL(`${base}/${name}.${variantInfo.extension}`, pkgUrl).pathname
-		const variantCode = variantInfo.transform(lead, exports)
-		const variantSize = (Buffer.byteLength(variantCode, 'utf8') / 1000).toFixed()
-		const variantGzip = Number((zlib.gzipSync(variantCode, { level: 9 }).length / 1000).toFixed(2))
-
-		console.log(' ', `\x1b[33m${variantSize} kB\x1b[0m \x1b[2m/\x1b[0m \x1b[33m${variantGzip} kB\x1b[0m`, `\x1b[2m(${variant})\x1b[0m`)
-
-		await fs.writeFile(variantPath, variantCode + `\n//# sourceMappingUrl=index.map`)
-
-		const packageJSON = JSON.stringify({
-			private: true,
-			type: 'module',
-			main: `${name}.cjs`,
-			module: `${name}.mjs`,
-			jsdelivr: `${name}.mjs`,
-			unpkg: `${name}.mjs`,
-			files: [
-				`${name}.cjs`,
-				`${name}.mjs`
-			],
-			exports: {
-				'.': {
-					import: `./${name}.mjs`,
-					require: `./${name}.cjs`,
-					default: `./${name}.mjs`
-				}
-			}
-		}, null, '  ')
-
-		await fs.writeFile(new URL('package.json', outDirUrl), packageJSON)
-	}
-}
-
-export default buildPackage
-
-const metaUrl = new URL(import.meta.url)
-const argvUrl = new URL(process.argv[1], 'file:')
-
-if (metaUrl.href === argvUrl.href) {
-	/** Root directory. */
-	const pkgUrl = new URL('../', metaUrl)
-
-	console.log()
-	await buildPackage(pkgUrl, 'postcss-8-nesting')
-
-	console.log()
-	await buildPackage(pkgUrl, 'postcss-7-nesting')
-}
diff --git a/.bin/test-deno.js b/.bin/test-deno.js
new file mode 100644
index 0000000..e4c078d
--- /dev/null
+++ b/.bin/test-deno.js
@@ -0,0 +1,22 @@
+import plugin from '../mod.js';
+import postcss from 'https://deno.land/x/postcss@8.3.11/mod.js'
+import { assertStrictEquals } from 'https://deno.land/std@0.110.0/testing/asserts.ts';
+
+postcss([plugin]).process(`
+a [foo="&"] {
+	color : red;
+
+	&.baz {
+		color : blue;
+	}
+}
+`, { from: 'raw', to: 'raw' }).then(result => {
+	assertStrictEquals(result.css, `
+a [foo="&"] {
+	color : red
+}
+a [foo="&"].baz {
+		color : blue;
+	}
+`);
+});
diff --git a/.bin/test-lint.js b/.bin/test-lint.js
index 2e42956..df4cdcf 100644
--- a/.bin/test-lint.js
+++ b/.bin/test-lint.js
@@ -28,8 +28,11 @@ export default async function lint() {
 }
 
 if (new URL(process.argv[1], 'file:').href === import.meta.url) {
-	lint().then(
-		process.exit.bind(process, 0),
-		process.exit.bind(process, 1)
-	)
+	lint().then((pass) => {
+		if (pass) {
+			process.exit(0)
+		}
+
+		process.exit(1)
+	})
 }
diff --git a/.bin/test-tape.js b/.bin/test-tape.js
index dc62d25..43d99fa 100644
--- a/.bin/test-tape.js
+++ b/.bin/test-tape.js
@@ -3,7 +3,7 @@ import { promises as fs } from 'node:fs'
 import postcss from 'postcss'
 import process from 'node:process'
 
-import plugin from '../src/postcss-8-nesting.js'
+import plugin from '../dist/index.mjs'
 
 let workingUrl = new URL(`${process.cwd()}/`, `file:`)
 
@@ -15,7 +15,9 @@ export default async function tape() {
 	failures += await test('supports direct usage', { basename: 'direct' })
 	failures += await test('removes empty rules', { basename: 'empty' })
 	failures += await test('supports nested @container', { basename: 'container' })
+	failures += await test('supports nested @document', { basename: 'document' })
 	failures += await test('supports nested @media', { basename: 'media' })
+	failures += await test('supports nested @supports', { basename: 'supports' })
 	failures += await test('ignores invalid entries', { basename: 'ignore' })
 	failures += await test('supports complex entries', { basename: 'complex' })
 	failures += await test('supports all spec examples', { basename: 'spec-examples' })
@@ -66,8 +68,11 @@ async function test(name, init, ...plugins) {
 }
 
 if (new URL(process.argv[1], 'file:').href === import.meta.url) {
-	tape().then(
-		() => process.exit(0),
-		() => process.exit(1),
-	)
+	tape().then((pass) => {
+		if (pass) {
+			process.exit(0)
+		}
+
+		process.exit(1)
+	})
 }
diff --git a/.bin/test.js b/.bin/test.js
index 00e8da6..906b01c 100644
--- a/.bin/test.js
+++ b/.bin/test.js
@@ -19,8 +19,11 @@ export default async function test() {
 }
 
 if (new URL(process.argv[1], 'file:').href === import.meta.url) {
-	test().then(
-		process.exit.bind(process, 0),
-		process.exit.bind(process, 1)
-	)
+	test().then((pass) => {
+		if (pass) {
+			process.exit(0)
+		}
+
+		process.exit(1)
+	})
 }
diff --git a/.github/workflows/test.yml b/.github/workflows/test.yml
index ded8311..201523f 100644
--- a/.github/workflows/test.yml
+++ b/.github/workflows/test.yml
@@ -12,13 +12,22 @@ jobs:
       - uses: actions/checkout@v2
       - uses: actions/setup-node@v2
         with:
-          node-version: 16
-
+          node-version: ${{ matrix.node }}
       - run: npm install --ignore-scripts
       - run: npm run build
+      - run: npm run test
 
+  deno_test:
+    runs-on: ubuntu-latest
+    steps:
+      - uses: actions/checkout@v2
       - uses: actions/setup-node@v2
         with:
-          node-version: ${{ matrix.node }}
+          node-version: 16
       - run: npm install --ignore-scripts
-      - run: npm run test
+      - run: npm run build
+
+      - uses: denoland/setup-deno@v1
+        with:
+          deno-version: v1.x.x
+      - run: npm run test:deno
diff --git a/.gitignore b/.gitignore
index 8049f8e..cce815e 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1,6 +1,7 @@
 node_modules
 postcss-7-nesting
 postcss-8-nesting
+dist
 package-lock.json
 yarn.lock
 *.log*
diff --git a/.rollup.js b/.rollup.js
new file mode 100644
index 0000000..e357af8
--- /dev/null
+++ b/.rollup.js
@@ -0,0 +1,66 @@
+import babel from '@rollup/plugin-babel';
+import commonjs from '@rollup/plugin-commonjs';
+import { nodeResolve } from '@rollup/plugin-node-resolve';
+
+export default [
+	{
+		input: 'src/index.js',
+		output: [
+			{ file: 'dist/index.js', format: 'cjs', sourcemap: true, exports: 'default' },
+			{ file: 'dist/index.mjs', format: 'esm', sourcemap: true, exports: 'default' }
+		],
+		plugins: [
+			commonjs(),
+			nodeResolve({
+				resolveOnly: [
+					'cssesc',
+					'postcss-selector-parser',
+					'util-deprecate',
+				]
+			}),
+			babel({
+				babelHelpers: 'bundled',
+				exclude: 'node_modules/**',
+				presets: [
+					['@babel/preset-env', {
+						corejs: 3,
+						loose: true,
+						modules: false,
+						targets: { node: 12 },
+						useBuiltIns: 'usage'
+					}]
+				]
+			}),
+		]
+	},
+	{
+		input: 'src/index.js',
+		output: [
+			{ file: 'dist/index.deno.mjs', format: 'esm', sourcemap: true, exports: 'default' }
+		],
+		plugins: [
+			commonjs(),
+			nodeResolve({
+				browser: true,
+				resolveOnly: [
+					'cssesc',
+					'postcss-selector-parser',
+					'util-deprecate',
+				]
+			}),
+			babel({
+				babelHelpers: 'bundled',
+				exclude: 'node_modules/**',
+				presets: [
+					['@babel/preset-env', {
+						corejs: 3,
+						loose: true,
+						modules: false,
+						targets: { node: 12 },
+						useBuiltIns: 'usage'
+					}]
+				]
+			}),
+		]
+	}
+]
diff --git a/mod.js b/mod.js
index f069ed1..490ee5e 100644
--- a/mod.js
+++ b/mod.js
@@ -1,3 +1,3 @@
 /* Deno entry point */
 
-export { default } from './src/postcss-8-nesting.js'
+export { default } from './dist/index.deno.mjs'
diff --git a/package.json b/package.json
index 4cbe011..321da06 100644
--- a/package.json
+++ b/package.json
@@ -4,10 +4,10 @@
   "license": "CC0-1.0",
   "version": "9.0.1",
   "type": "module",
-  "main": "postcss-8-nesting/postcss-nesting.cjs",
-  "module": "postcss-8-nesting/postcss-nesting.mjs",
-  "jsdelivr": "postcss-8-nesting/postcss-nesting.mjs",
-  "unpkg": "postcss-8-nesting/postcss-nesting.mjs",
+  "main": "dist/index.cjs",
+  "module": "dist/index.mjs",
+  "jsdelivr": "dist/index.mjs",
+  "unpkg": "dist/index.mjs",
   "publishConfig": {
     "access": "public"
   },
@@ -17,37 +17,31 @@
   "repository": "csstools/postcss-nesting",
   "exports": {
     ".": {
-      "import": "./postcss-8-nesting/postcss-nesting.mjs",
-      "require": "./postcss-8-nesting/postcss-nesting.cjs",
-      "default": "./postcss-8-nesting/postcss-nesting.mjs"
-    },
-    "./postcss-7-nesting": {
-      "import": "./postcss-7-nesting/postcss-nesting.mjs",
-      "require": "./postcss-7-nesting/postcss-nesting.cjs",
-      "default": "./postcss-7-nesting/postcss-nesting.mjs"
-    },
-    "./postcss-8-nesting": {
-      "import": "./postcss-8-nesting/postcss-nesting.mjs",
-      "require": "./postcss-8-nesting/postcss-nesting.cjs",
-      "default": "./postcss-8-nesting/postcss-nesting.mjs"
+      "import": "./dist/index.mjs",
+      "require": "./dist/index.cjs",
+      "default": "./dist/index.mjs"
     }
   },
   "files": [
-    "postcss-7-nesting",
-    "postcss-8-nesting"
+    "dist"
   ],
   "scripts": {
     "prepublishOnly": "npm test",
-    "build": "node .bin/build.js",
+    "build": "rollup -c .rollup.js",
     "test": "node .bin/test.js",
     "test:lint": "node .bin/test-lint.js",
-    "test:tape": "node .bin/test-tape.js"
+    "test:tape": "node .bin/test-tape.js",
+    "test:deno": "deno run --unstable --allow-env --allow-read .bin/test-deno.js"
   },
   "devDependencies": {
-    "esbuild": "0.13.12",
-    "eslint": "8.1.0",
-    "eslint-config-dev": "2.0.0",
-    "nodemon": "2.0.14",
+    "@babel/core": "^7.15.8",
+    "@babel/preset-env": "^7.15.8",
+    "@rollup/plugin-babel": "^5.3.0",
+    "@rollup/plugin-commonjs": "^21.0.1",
+    "@rollup/plugin-node-resolve": "^13.0.6",
+    "eslint": "^8.1.0",
+    "rollup": "^2.58.3",
+    "rollup-plugin-terser": "^7.0.2",
     "postcss": "8.3.11",
     "pre-commit": "1.2.2"
   },
diff --git a/src/postcss-8-nesting.js b/src/index.js
similarity index 100%
rename from src/postcss-8-nesting.js
rename to src/index.js
diff --git a/src/lib/atrule-within-rule.js b/src/lib/atrule-within-rule.js
index c23a941..dc06ded 100644
--- a/src/lib/atrule-within-rule.js
+++ b/src/lib/atrule-within-rule.js
@@ -1,14 +1,8 @@
 import cleanupParent from './cleanup-parent.js'
 import shiftNodesBeforeParent from './shift-nodes-before-parent.js'
 import validAtrules from './valid-atrules.js'
-import walk from './walk.js'
 
-/*
- * DEPRECATED: In v7.0.0 these features will be removed as they are not part of
- * the nesting proposal.
- */
-
-export default function atruleWithinRule(node) {
+export default function atruleWithinRule(node, walk) {
 	// move previous siblings and the node to before the parent
 	const parent = shiftNodesBeforeParent(node)
 
diff --git a/src/lib/list.js b/src/lib/list.js
index 76d5984..71db2e5 100644
--- a/src/lib/list.js
+++ b/src/lib/list.js
@@ -1,4 +1,4 @@
-export const split = (string, separators, last) => {
+export const comma = (string) => {
 	let array = []
 	let current = ''
 	let split = false
@@ -23,7 +23,7 @@ export const split = (string, separators, last) => {
 		} else if (letter === ')') {
 			if (func > 0) func -= 1
 		} else if (func === 0) {
-			if (separators.includes(letter)) split = true
+			if (letter === ',') split = true
 		}
 
 		if (split) {
@@ -35,10 +35,6 @@ export const split = (string, separators, last) => {
 		}
 	}
 
-	if (last || current !== '') array.push(current.trim())
+	array.push(current.trim())
 	return array
 }
-
-export const comma = (string) => split(string, [','], true)
-
-export const space = (string) => split(string, [' ', '\n', '\t'])
diff --git a/src/lib/mixing-nesting-rules-and-declarations.js b/src/lib/mixing-nesting-rules-and-declarations.js
index 2975f2d..ba8c7f9 100644
--- a/src/lib/mixing-nesting-rules-and-declarations.js
+++ b/src/lib/mixing-nesting-rules-and-declarations.js
@@ -31,7 +31,6 @@ export default function ensureCorrectMixingOfNestingRulesAndDeclarations(node) {
 	}
 
 	// Remove all declarations and preserve nesting rules
-	encounteredNestedRule = false
 	node.each((child) => {
 		if (child.type === 'atrule' || child.type === 'rule') {
 			return
@@ -39,8 +38,4 @@ export default function ensureCorrectMixingOfNestingRulesAndDeclarations(node) {
 
 		child.remove()
 	})
-
-	if (node.nodes.length === 0) {
-		node.remove()
-	}
 }
diff --git a/src/lib/nest-rule-within-rule.js b/src/lib/nest-rule-within-rule.js
index bd995cc..0a2e088 100644
--- a/src/lib/nest-rule-within-rule.js
+++ b/src/lib/nest-rule-within-rule.js
@@ -2,9 +2,8 @@ import { comma } from './list.js'
 import shiftNodesBeforeParent from './shift-nodes-before-parent.js'
 import cleanupParent from './cleanup-parent.js'
 import mergeSelectors from './merge-selectors.js'
-import walk from './walk.js'
 
-export default function transformNestRuleWithinRule(node) {
+export default function transformNestRuleWithinRule(node, walk) {
 	// move previous siblings and the node to before the parent
 	const parent = shiftNodesBeforeParent(node)
 
diff --git a/src/lib/walk.js b/src/lib/walk.js
index d34964a..c5d08a9 100644
--- a/src/lib/walk.js
+++ b/src/lib/walk.js
@@ -8,9 +8,9 @@ export default function walk(node) {
 		if (isRuleWithinRule(child)) {
 			transformRuleWithinRule(child)
 		} else if (isNestRuleWithinRule(child)) {
-			transformNestRuleWithinRule(child)
+			transformNestRuleWithinRule(child, walk)
 		} else if (isAtruleWithinRule(child)) {
-			transformAtruleWithinRule(child)
+			transformAtruleWithinRule(child, walk)
 		} else if (isAtruleWithinAtrule(child)) {
 			transformAtruleWithinAtrule(child)
 		}
diff --git a/src/postcss-7-nesting.js b/src/postcss-7-nesting.js
deleted file mode 100644
index 30e1479..0000000
--- a/src/postcss-7-nesting.js
+++ /dev/null
@@ -1,18 +0,0 @@
-import postcssNesting from './postcss-8-nesting.js'
-
-export default Object.defineProperties(postcssNesting, Object.getOwnPropertyDescriptors({
-	get postcss() {
-		function postcssPlugin(cssRoot) {
-			const visitors = postcssNesting()
-
-			if (typeof visitors.Once === 'function') {
-				visitors.Once(cssRoot)
-			}
-		}
-
-		postcssPlugin.postcssPlugin = 'postcss-nesting'
-		postcssPlugin.postcssVersion = '8.2.13'
-
-		return postcssPlugin
-	}
-}))
diff --git a/test/at-rule.css b/test/at-rule.css
index bcb8d5b..4e1fd19 100644
--- a/test/at-rule.css
+++ b/test/at-rule.css
@@ -27,6 +27,18 @@ a {
 	@nest & e {
 		order: 5;
 	}
+
+	@nest &[foo="& ,\'"] {
+		order: 6;
+	}
+
+	@nest &[a="& ,\'"][b='& . \\a &'] {
+		order: 7;
+	}
+
+	@nest &\\foo {
+		order: 8;
+	}
 }
 
 .foo {
diff --git a/test/at-rule.expect.css b/test/at-rule.expect.css
index 6a0ad26..4a77837 100644
--- a/test/at-rule.expect.css
+++ b/test/at-rule.expect.css
@@ -28,6 +28,15 @@ a d {
 a e {
 		order: 5
 }
+a[foo="& ,\'"] {
+		order: 6
+}
+a[a="& ,\'"][b='& . \\a &'] {
+		order: 7
+}
+a:is(\\foo) {
+		order: 8
+}
 
 .foo:is(h1) {
 		color: red
diff --git a/test/document.css b/test/document.css
new file mode 100644
index 0000000..612c248
--- /dev/null
+++ b/test/document.css
@@ -0,0 +1,7 @@
+a {
+	order: 1;
+
+	@document url("https://www.example.com/") {
+		order: 2;
+	}
+}
diff --git a/test/document.expect.css b/test/document.expect.css
new file mode 100644
index 0000000..eca98ac
--- /dev/null
+++ b/test/document.expect.css
@@ -0,0 +1,8 @@
+a {
+	order: 1
+}
+@document url("https://www.example.com/") {
+	a {
+		order: 2
+}
+	}
diff --git a/test/supports.css b/test/supports.css
new file mode 100644
index 0000000..2600818
--- /dev/null
+++ b/test/supports.css
@@ -0,0 +1,11 @@
+a {
+	order: 1;
+
+	@supports (order: 2) {
+		order: 2;
+	}
+
+	@supports (background-image: url('fo and o.png')) {
+		order: 3;
+	}
+}
diff --git a/test/supports.expect.css b/test/supports.expect.css
new file mode 100644
index 0000000..d905de0
--- /dev/null
+++ b/test/supports.expect.css
@@ -0,0 +1,13 @@
+a {
+	order: 1
+}
+@supports (order: 2) {
+	a {
+		order: 2
+}
+	}
+@supports (background-image: url('fo and o.png')) {
+	a {
+		order: 3
+}
+	}
-- 
2.33.1

