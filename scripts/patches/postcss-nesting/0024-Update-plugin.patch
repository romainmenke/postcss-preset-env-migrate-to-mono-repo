From e5333a29c3037120d945888f5cc06547f88a49ac Mon Sep 17 00:00:00 2001
From: Jonathan Neal <jonathantneal@hotmail.com>
Date: Tue, 22 Sep 2015 08:59:11 -0400
Subject: [PATCH 24/96] Update plugin

Updated: Refactored plugin
---
 CHANGELOG.md |   4 ++
 index.js     | 117 ++++++++++++++-------------------------------------
 2 files changed, 36 insertions(+), 85 deletions(-)

diff --git a/CHANGELOG.md b/CHANGELOG.md
index ae2b3c3..8960fd6 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,3 +1,7 @@
+## 2.0.3 (2015-09-22)
+
+- Updated: Refactored plugin
+
 ## 2.0.2 (2015-09-16)
 
 - Fixed: Issue where the new ruleâ€™s children were not mapped to the parent internally
diff --git a/index.js b/index.js
index 7520e38..5c5c02f 100644
--- a/index.js
+++ b/index.js
@@ -1,115 +1,62 @@
-var bubble  = ['document', 'media', 'supports'];
 var postcss = require('postcss');
-var prefix  = '';
-
-function normalizeNodes(node) {
-	var index = -1;
-	var child;
-
-	while (child = node.nodes[++index]) {
-		child.parent = node;
-	}
-}
 
 function transpileSelectors(fromRule, toRule) {
 	var selectors = [];
 
 	fromRule.selectors.forEach(function (fromSelector) {
 		toRule.selectors.forEach(function (toSelector) {
-			if (toSelector.indexOf('&') === -1) {
-				selectors.push(fromSelector + ' ' + toSelector);
-			} else {
-				selectors.push(toSelector.replace(/&/g, fromSelector));
-			}
+			selectors.push(toSelector.replace(/&/g, fromSelector));
 		});
 	});
 
-	return selectors;
-}
-
-function transpileNestRule(fromRule, toRule, atRule) {
-	var parent = fromRule.parent;
-
-	if (!('nestedIndex' in parent)) {
-		parent.nestedIndex = parent.nodes.indexOf(fromRule);
-	}
-
-	fromRule.nodes.splice(fromRule.nodes.indexOf(atRule), 1);
-
-	toRule.nodes     = atRule.nodes.splice(0);
-	toRule.parent    = parent;
-	toRule.selector  = atRule.params;
-	toRule.selectors = transpileSelectors(fromRule, toRule);
-
-	normalizeNodes(toRule);
-
-	parent.nodes.splice(++parent.nestedIndex, 0, toRule);
+	toRule.selectors = selectors;
 }
 
-function transpileAtRule(fromRule, toRule, atRule) {
-	var parent = fromRule.parent;
+module.exports = postcss.plugin('postcss-nested', function (opts) {
+	var bubble = ['document', 'media', 'supports'];
+	var name   = 'nest';
 
-	if (!('nestedIndex' in parent)) {
-		parent.nestedIndex = parent.nodes.indexOf(fromRule);
-	}
+	if (opts && opts.bubble) bubble = bubble.concat(opts.bubble);
+	if (opts && opts.prefix) name   = '-' + opts.prefix + '-' + name;
 
-	fromRule.nodes.splice(fromRule.nodes.indexOf(atRule), 1);
+	return function (css) {
+		css.walkAtRules(function (atrule) {
+			var rule = atrule.parent;
+			var root = rule && rule.parent;
 
-	toRule.nodes     = atRule.nodes.splice(0);
-	toRule.parent    = atRule;
-	toRule.selector  = fromRule.selector;
+			if (root && rule.type === 'rule') {
+				var newrule = postcss.rule({
+					raws: atrule.raws
+				});
 
-	normalizeNodes(toRule);
+				if (atrule.name === name && atrule.params.indexOf('&') !== -1) {
+					atrule.remove();
 
-	atRule.nodes  = [toRule];
-	atRule.parent = parent;
+					newrule.selector = atrule.params;
 
-	parent.nodes.splice(++parent.nestedIndex, 0, atRule);
-}
+					newrule.append(atrule.nodes);
 
-function transpileRule(rule) {
-	var nodes = rule.nodes;
-	var index = -1;
-	var name  = prefix ? '-' + prefix + '-nest' : 'nest';
-	var child;
+					transpileSelectors(rule, newrule);
 
-	// for each node
-	while (child = nodes[++index]) {
-		// if node is atrule
-		if (child.type === 'atrule') {
-			var newRule = postcss.rule();
+					root.insertAfter(rule.insertAfterNode || rule, newrule);
 
-			// if atrule is nest
-			if (child.name === name && child.params.indexOf('&') !== -1) {
-				transpileNestRule(rule, newRule, child);
+					rule.insertAfterNode = newrule;
+				} else if (bubble.indexOf(atrule.name) !== -1) {
+					atrule.remove();
 
-				transpileRule(newRule);
+					newrule.selector = rule.selector;
 
-				--index;
-			} else if (bubble.indexOf(child.name) !== -1) {
-				transpileAtRule(rule, newRule, child);
+					newrule.append(atrule.nodes);
 
-				transpileRule(newRule);
+					atrule.removeAll();
 
-				--index;
-			}
-		}
-	}
-}
+					atrule.append(newrule);
 
-module.exports = postcss.plugin('postcss-nested', function (opts) {
-	if (opts && opts.bubble) bubble = bubble.concat(opts.bubble);
-	if (opts && opts.prefix) prefix = opts.prefix;
+					root.insertAfter(rule.insertAfterNode || rule, atrule);
 
-	return function (css) {
-		var nodes = css.nodes;
-		var index = -1;
-		var child;
-
-		while (child = nodes[++index]) {
-			if (child.type === 'rule') {
-				transpileRule(child);
+					rule.insertAfterNode = atrule;
+				}
 			}
-		}
+		});
 	};
 });
-- 
2.33.1

