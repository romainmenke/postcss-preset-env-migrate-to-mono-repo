From 7eacf48b27dd0ccaec9591bc5a9026705c3e7a0c Mon Sep 17 00:00:00 2001
From: Junliang Huang <JLHwung@users.noreply.github.com>
Date: Sun, 20 Aug 2017 00:53:33 +0800
Subject: [PATCH 58/96] Use mutation-safe walk method (csstools/postcss-nesting#45)

* test: add at-rule test case

* refactor: use root.walk method

root.walk is safe for mutation arrays, thus we use root.walk instead of handwritten conditional walk

* fix: clone atrule semicolon raws to generated rule
---
 .tape.js                        |  3 +++
 index.js                        | 14 ++------------
 lib/transform-nesting-atrule.js |  3 +++
 test/at-rule.css                | 30 ++++++++++++++++++++++++++++++
 test/at-rule.expect.css         | 30 ++++++++++++++++++++++++++++++
 5 files changed, 68 insertions(+), 12 deletions(-)
 create mode 100644 test/at-rule.css
 create mode 100644 test/at-rule.expect.css

diff --git a/.tape.js b/.tape.js
index 442ed52..695808f 100644
--- a/.tape.js
+++ b/.tape.js
@@ -3,6 +3,9 @@ module.exports = {
 		'basic': {
 			message: 'supports basic usage'
 		},
+		'at-rule': {
+			message: 'supports at-rule usage'
+		},
 		'direct': {
 			message: 'supports direct usage'
 		},
diff --git a/index.js b/index.js
index a4627d3..7504e3b 100644
--- a/index.js
+++ b/index.js
@@ -8,10 +8,10 @@ const transformNestingRule    = require('./lib/transform-nesting-rule');
 
 // plugin
 module.exports = postcss.plugin('postcss-nesting', () => {
-	return walk;
+	return (root) => root.walk(transform);
 });
 
-function walk(node) {
+function transform(node) {
 	// console.log('walk', [node.type], [node.name || node.selector || node.prop || 'root'], node.nodes ? `length: ${node.nodes.length}` : `value: "${node.value}"`);
 
 	if (transformBubblingAtrule.test(node)) {
@@ -25,14 +25,4 @@ function walk(node) {
 		transformNestingRule(node);
 	}
 
-	if (node.nodes) {
-		// conditionally walk the children of the node
-		let childNode = node.nodes[0];
-
-		while (childNode) {
-			walk(childNode);
-
-			childNode = childNode.parent && childNode.parent.nodes[childNode.parent.nodes.indexOf(childNode) + 1];
-		}
-	}
 }
diff --git a/lib/transform-nesting-atrule.js b/lib/transform-nesting-atrule.js
index 878de25..dca39cf 100644
--- a/lib/transform-nesting-atrule.js
+++ b/lib/transform-nesting-atrule.js
@@ -20,6 +20,9 @@ module.exports = (node) => {
 		source: node.source
 	});
 
+	// clone atrule semicolon raws
+	rule.raws = node.raws.semicolon ? { semicolon: true } : {};
+
 	// move the clone after the parent
 	const parent = node.parent.after(rule);
 
diff --git a/test/at-rule.css b/test/at-rule.css
new file mode 100644
index 0000000..a9406c4
--- /dev/null
+++ b/test/at-rule.css
@@ -0,0 +1,30 @@
+a {
+	order: 1;
+	@nest b & {
+		order: 2;
+	}
+	@nest c & {
+		order: 3;
+	}
+	@nest d & {
+		order: 4;
+	}
+	@nest e & {
+		order: 5;
+	}
+}
+a {
+	order: 1;
+	@nest & b {
+		order: 2;
+	}
+	@nest & c {
+		order: 3;
+	}
+	@nest & d {
+		order: 4;
+	}
+	@nest & e {
+		order: 5;
+	}
+}
diff --git a/test/at-rule.expect.css b/test/at-rule.expect.css
new file mode 100644
index 0000000..df7cfad
--- /dev/null
+++ b/test/at-rule.expect.css
@@ -0,0 +1,30 @@
+a {
+	order: 1
+}
+b a {
+	order: 2;
+}
+c a {
+	order: 3;
+}
+d a {
+	order: 4;
+}
+e a {
+	order: 5;
+}
+a {
+	order: 1
+}
+a b {
+	order: 2;
+}
+a c {
+	order: 3;
+}
+a d {
+	order: 4;
+}
+a e {
+	order: 5;
+}
-- 
2.33.1

