From 64ba9ac4a56e353b1685adb91cf0a24b425183cc Mon Sep 17 00:00:00 2001
From: Jonathan Neal <jonathantneal@hotmail.com>
Date: Tue, 27 Apr 2021 01:12:50 -0400
Subject: [PATCH 81/99] 8.0.0 (csstools/postcss-nesting#75)

* 8.0.0

* fix: Node v12 compatibility

* feat: add support for @container

* feat: postcss-7 compatibility
---
 .bin/build.js                                 |  92 ++++++++++++++++
 .bin/test-lint.js                             |  35 ++++++
 .bin/test-tape.js                             |  58 ++++++++++
 .bin/test.js                                  |  26 +++++
 .gitignore                                    |   3 +
 .tape.js                                      |  20 ----
 .travis.yml                                   |   6 +-
 CHANGELOG.md                                  |   6 ++
 index.js                                      |  14 ---
 lib/atrule-within-atrule.js                   |  23 ----
 lib/atrule-within-rule.js                     |  28 -----
 lib/merge-params.js                           |  11 --
 lib/merge-selectors.js                        |  12 ---
 lib/nest-rule-within-rule.js                  |  32 ------
 lib/rule-within-rule.js                       |  30 ------
 lib/valid-atrules.js                          |   1 -
 lib/valid-selector.js                         |   4 -
 package.json                                  | 102 ++++++++++++------
 postcss-7/index.js                            |  18 ++++
 postcss-7/package.json                        |   4 +
 src/index.js                                  |  12 +++
 src/lib/atrule-within-atrule.js               |  22 ++++
 src/lib/atrule-within-rule.js                 |  28 +++++
 {lib => src/lib}/cleanup-parent.js            |   2 +-
 src/lib/list.js                               |  44 ++++++++
 src/lib/merge-params.js                       |  11 ++
 src/lib/merge-selectors.js                    |  14 +++
 src/lib/nest-rule-within-rule.js              |  28 +++++
 src/lib/rule-within-rule.js                   |  24 +++++
 {lib => src/lib}/shift-nodes-before-parent.js |  12 +--
 src/lib/valid-atrules.js                      |   1 +
 src/lib/valid-selector.js                     |   7 ++
 {lib => src/lib}/walk.js                      |  22 ++--
 test/complex.css                              |   7 ++
 test/complex.expect.css                       |   7 ++
 test/container.css                            |  13 +++
 test/container.expect.css                     |  16 +++
 test/ignore.css                               |   8 +-
 test/ignore.expect.css                        |   8 +-
 39 files changed, 567 insertions(+), 244 deletions(-)
 create mode 100644 .bin/build.js
 create mode 100644 .bin/test-lint.js
 create mode 100644 .bin/test-tape.js
 create mode 100644 .bin/test.js
 delete mode 100644 .tape.js
 delete mode 100644 index.js
 delete mode 100644 lib/atrule-within-atrule.js
 delete mode 100644 lib/atrule-within-rule.js
 delete mode 100644 lib/merge-params.js
 delete mode 100644 lib/merge-selectors.js
 delete mode 100644 lib/nest-rule-within-rule.js
 delete mode 100644 lib/rule-within-rule.js
 delete mode 100644 lib/valid-atrules.js
 delete mode 100644 lib/valid-selector.js
 create mode 100644 postcss-7/index.js
 create mode 100644 postcss-7/package.json
 create mode 100644 src/index.js
 create mode 100644 src/lib/atrule-within-atrule.js
 create mode 100644 src/lib/atrule-within-rule.js
 rename {lib => src/lib}/cleanup-parent.js (81%)
 create mode 100644 src/lib/list.js
 create mode 100644 src/lib/merge-params.js
 create mode 100644 src/lib/merge-selectors.js
 create mode 100644 src/lib/nest-rule-within-rule.js
 create mode 100644 src/lib/rule-within-rule.js
 rename {lib => src/lib}/shift-nodes-before-parent.js (55%)
 create mode 100644 src/lib/valid-atrules.js
 create mode 100644 src/lib/valid-selector.js
 rename {lib => src/lib}/walk.js (55%)
 create mode 100644 test/complex.css
 create mode 100644 test/complex.expect.css
 create mode 100644 test/container.css
 create mode 100644 test/container.expect.css

diff --git a/.bin/build.js b/.bin/build.js
new file mode 100644
index 0000000..7e65fae
--- /dev/null
+++ b/.bin/build.js
@@ -0,0 +1,92 @@
+import esbuild from 'esbuild'
+import fs from 'node:fs/promises'
+import zlib from 'node:zlib'
+
+const variants = {
+	esm: {
+		extension: 'mjs',
+		transform(code, exports) {
+			const esmExports = []
+			for (const name in exports) esmExports.push(`${exports[name]} as ${name}`)
+			return `${code}export{${esmExports.join(',')}}`
+		},
+	},
+	cjs: {
+		extension: 'cjs',
+		transform(code, exports) {
+			const cjsExports = ['__esModule:!0']
+			for (const name in exports) cjsExports.push(`${name}:${exports[name]}`)
+			return `${code}module.exports={${cjsExports.join(',')}}`
+		},
+	},
+}
+
+async function buildPackage(src) {
+	const packageUrl = src
+	const initPackageUrl = new URL('src/', packageUrl)
+	const distPackageUrl = new URL('dist/', packageUrl)
+
+	const packageJsonUrl = new URL(`package.json`, packageUrl)
+	const packageName = JSON.parse(await fs.readFile(packageJsonUrl, 'utf8')).name
+
+	console.log(packageName)
+	console.log()
+
+	const targetPathname = new URL('index.js', initPackageUrl).pathname
+	const outputPathname = new URL('index.js', distPackageUrl).pathname
+
+	// Build ESM version
+	const {
+		outputFiles: [cmapResult, codeResult],
+	} = await esbuild.build({
+		entryPoints: [targetPathname],
+		outfile: outputPathname,
+		bundle: true,
+		format: 'esm',
+		sourcemap: 'external',
+		external: ['postcss'],
+		write: false,
+	})
+
+	const code = codeResult.text
+	const map = cmapResult.text
+
+	// ensure empty dist directory
+	await fs.mkdir(distPackageUrl, { recursive: true })
+
+	// write map
+	fs.writeFile(new URL(`index.map`, distPackageUrl), map)
+
+	// prepare variations
+	const splitByExport = (code, index = code.indexOf('export')) => [code.slice(0, index), code.slice(index)]
+	const [lead, tail] = splitByExport(code)
+
+	const exports = Array.from(tail.matchAll(/([$\w]+) as (\w+)/g)).reduce((exports, each) => Object.assign(exports, { [each[2]]: each[1] }), Object.create(null))
+
+	// write variation builds
+	for (const variant in variants) {
+		const variantInfo = variants[variant]
+		const variantPath = new URL(`dist/index.${variantInfo.extension}`, packageUrl).pathname
+		const variantCode = variantInfo.transform(lead, exports)
+		const variantSize = (Buffer.byteLength(variantCode, 'utf8') / 1000).toFixed()
+		const variantGzip = Number((zlib.gzipSync(variantCode, { level: 9 }).length / 1000).toFixed(2))
+
+		console.log(' ', `\x1b[33m${variantSize} kB\x1b[0m \x1b[2m/\x1b[0m \x1b[33m${variantGzip} kB\x1b[0m`, `\x1b[2m(${variant})\x1b[0m`)
+
+		await fs.writeFile(variantPath, variantCode + `\n//# sourceMappingUrl=index.map`)
+	}
+}
+
+export default buildPackage
+
+const metaUrl = new URL(import.meta.url)
+const argvUrl = new URL(process.argv[1], 'file:')
+
+if (metaUrl.href === argvUrl.href) {
+	/** Root directory. */
+	const rootUrl = new URL('../', metaUrl)
+
+	console.log()
+
+	await buildPackage(rootUrl)
+}
diff --git a/.bin/test-lint.js b/.bin/test-lint.js
new file mode 100644
index 0000000..2e42956
--- /dev/null
+++ b/.bin/test-lint.js
@@ -0,0 +1,35 @@
+import process from 'node:process'
+import { ESLint } from 'eslint'
+
+export default async function lint() {
+	try {
+		const eslint = new ESLint({ fix: true })
+
+		const results = await eslint.lintFiles(['src/**/*.js'])
+
+		await ESLint.outputFixes(results)
+
+		const formatter = await eslint.loadFormatter('stylish')
+		const resultText = formatter.format(results)
+
+		console.log(`\x1b[42m\x1b[30m PASS \x1b[0m`, 'linting')
+
+		if (resultText) {
+			console.log(resultText)
+		}
+
+		return true
+	} catch (error) {
+		console.error(`\x1b[41m\x1b[30m FAIL \x1b[0m`, 'linting')
+		console.error(error)
+
+		return false
+	}
+}
+
+if (new URL(process.argv[1], 'file:').href === import.meta.url) {
+	lint().then(
+		process.exit.bind(process, 0),
+		process.exit.bind(process, 1)
+	)
+}
diff --git a/.bin/test-tape.js b/.bin/test-tape.js
new file mode 100644
index 0000000..9070888
--- /dev/null
+++ b/.bin/test-tape.js
@@ -0,0 +1,58 @@
+import { strict as assert } from 'node:assert'
+import { promises as fs } from 'node:fs'
+import postcss from 'postcss'
+import process from 'node:process'
+
+import plugin from '../src/index.js'
+
+let workingUrl = new URL(`${process.cwd()}/`, `file:`)
+
+export default async function tape() {
+	let failures = 0
+
+	failures += await test('supports basic usage', { basename: 'basic' })
+	failures += await test('supports at-rule usage', { basename: 'at-rule' })
+	failures += await test('supports direct usage', { basename: 'direct' })
+	failures += await test('removes empty rules', { basename: 'empty' })
+	failures += await test('supports nested @container', { basename: 'container' })
+	failures += await test('supports nested @media', { basename: 'media' })
+	failures += await test('ignores invalid entries', { basename: 'ignore' })
+	failures += await test('supports complex entries', { basename: 'complex' })
+
+	return failures === 0
+}
+
+async function test(name, init) {
+	const { basename } = Object(init)
+
+	let sourceUrl = new URL(`test/${basename}.css`, workingUrl)
+	let expectUrl = new URL(`test/${basename}.expect.css`, workingUrl)
+	let resultUrl = new URL(`test/${basename}.result.css`, workingUrl)
+
+	let plugins = [plugin]
+
+	let sourceCss = await fs.readFile(sourceUrl, 'utf8')
+	let expectCss = await fs.readFile(expectUrl, 'utf8')
+	let resultCss = await postcss(plugins).process(sourceCss, { from: sourceCss, to: resultUrl }).css
+
+	try {
+		assert.equal(resultCss, expectCss)
+
+		console.log(`\x1b[42m\x1b[30m PASS \x1b[0m`, name)
+
+		return 0
+	} catch (error) {
+		console.error(`\x1b[41m\x1b[30m FAIL \x1b[0m`, name)
+		console.error(error.stack)
+
+		return 1
+	}
+}
+
+
+if (new URL(process.argv[1], 'file:').href === import.meta.url) {
+	tape().then(
+		() => process.exit(0),
+		() => process.exit(1)
+	)
+}
diff --git a/.bin/test.js b/.bin/test.js
new file mode 100644
index 0000000..00e8da6
--- /dev/null
+++ b/.bin/test.js
@@ -0,0 +1,26 @@
+import process from 'node:process'
+import lint from './test-lint.js'
+import tape from './test-tape.js'
+
+export default async function test() {
+	let failures = 0
+	try {
+		if (!await lint()) {
+			++failures
+		}
+		if (!await tape()) {
+			++failures
+		}
+	} catch(error) {
+		++failures
+	}
+
+	return failures === 0
+}
+
+if (new URL(process.argv[1], 'file:').href === import.meta.url) {
+	test().then(
+		process.exit.bind(process, 0),
+		process.exit.bind(process, 1)
+	)
+}
diff --git a/.gitignore b/.gitignore
index d920b78..453769a 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1,9 +1,12 @@
+dist
 node_modules
 index.*.*
 package-lock.json
+yarn.lock
 *.log*
 *.result.css
 .*
+!.bin
 !.editorconfig
 !.gitignore
 !.rollup.js
diff --git a/.tape.js b/.tape.js
deleted file mode 100644
index e38dd1b..0000000
--- a/.tape.js
+++ /dev/null
@@ -1,20 +0,0 @@
-module.exports = {
-	'basic': {
-		message: 'supports basic usage'
-	},
-	'at-rule': {
-		message: 'supports at-rule usage'
-	},
-	'direct': {
-		message: 'supports direct usage'
-	},
-	'empty': {
-		message: 'removes empty rules'
-	},
-	'media': {
-		message: 'supports nested media'
-	},
-	'ignore': {
-		message: 'ignores invalid entries'
-	}
-};
diff --git a/.travis.yml b/.travis.yml
index a9e32cd..6366011 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -3,7 +3,5 @@
 language: node_js
 
 node_js:
-  - 10
-
-install:
-  - npm install --ignore-scripts
+  - 12
+  - 14
diff --git a/CHANGELOG.md b/CHANGELOG.md
index 27de0f6..52dea5f 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,5 +1,11 @@
 # Changes to PostCSS Nesting
 
+### 8.0.0 (April 26, 2021)
+
+- Updated: Support for PostCSS 8+.
+- Updated: Support for Node v12+.
+- Updated: Support for the `@container` at-rule.
+
 ### 7.0.1 (July 29, 2018)
 
 - Fixed: Non-breaking issue with rules being unnecessarily split
diff --git a/index.js b/index.js
deleted file mode 100644
index 3adbc88..0000000
--- a/index.js
+++ /dev/null
@@ -1,14 +0,0 @@
-import walk from './lib/walk';
-
-const postcssNesting = () => {
-	return {
-		postcssPlugin: 'postcss-nesting',
-		Once(root) {
-			walk(root);
-		}
-	}
-}
-
-postcssNesting.postcss = true;
-
-export default postcssNesting;
diff --git a/lib/atrule-within-atrule.js b/lib/atrule-within-atrule.js
deleted file mode 100644
index baab671..0000000
--- a/lib/atrule-within-atrule.js
+++ /dev/null
@@ -1,23 +0,0 @@
-import shiftNodesBeforeParent from './shift-nodes-before-parent';
-import mergeParams from './merge-params';
-import cleanupParent from './cleanup-parent';
-
-/*
- * DEPRECATED: In v7.0.0 these features will be removed as they are not part of
- * the nesting proposal.
- */
-
-export default function transformAtruleWithinAtrule(node) {
-	// move previous siblings and the node to before the parent
-	const parent = shiftNodesBeforeParent(node);
-
-	// update the params of the node to be merged with the parent
-	node.params = mergeParams(parent.params, node.params);
-
-	// conditionally cleanup an empty parent rule
-	cleanupParent(parent);
-}
-
-import validAtrules from './valid-atrules';
-
-export const isAtruleWithinAtrule = node => node.type === 'atrule' && validAtrules.includes(node.name) && Object(node.parent).type === 'atrule' && node.name === node.parent.name;
diff --git a/lib/atrule-within-rule.js b/lib/atrule-within-rule.js
deleted file mode 100644
index 1b610c2..0000000
--- a/lib/atrule-within-rule.js
+++ /dev/null
@@ -1,28 +0,0 @@
-import shiftNodesBeforeParent from './shift-nodes-before-parent';
-import cleanupParent from './cleanup-parent';
-import validAtrules from './valid-atrules';
-import walk from './walk';
-
-/*
- * DEPRECATED: In v7.0.0 these features will be removed as they are not part of
- * the nesting proposal.
- */
-
-export default function atruleWithinRule(node) {
-	// move previous siblings and the node to before the parent
-	const parent = shiftNodesBeforeParent(node);
-
-	// clone the parent as a new rule with children appended to it
-	const rule = parent.clone().removeAll().append(node.nodes);
-
-	// append the new rule to the node
-	node.append(rule);
-
-	// conditionally cleanup an empty parent rule
-	cleanupParent(parent);
-
-	// walk the children of the new rule
-	walk(rule);
-}
-
-export const isAtruleWithinRule = node => node.type === 'atrule' && validAtrules.includes(node.name) && Object(node.parent).type === 'rule';
diff --git a/lib/merge-params.js b/lib/merge-params.js
deleted file mode 100644
index f7d5339..0000000
--- a/lib/merge-params.js
+++ /dev/null
@@ -1,11 +0,0 @@
-import { list } from 'postcss';
-
-const { comma } = list;
-
-export default function mergeParams(fromParams, toParams) {
-	return comma(fromParams).map(
-		params1 => comma(toParams).map(
-			params2 => `${params1} and ${params2}`
-		).join(', ')
-	).join(', ');
-}
diff --git a/lib/merge-selectors.js b/lib/merge-selectors.js
deleted file mode 100644
index 6a504eb..0000000
--- a/lib/merge-selectors.js
+++ /dev/null
@@ -1,12 +0,0 @@
-import { replaceable } from './valid-selector';
-
-export default function mergeSelectors(fromSelectors, toSelectors) {
-	return fromSelectors.reduce(
-		(selectors, fromSelector) => selectors.concat(
-			toSelectors.map(
-				toSelector => toSelector.replace(replaceable, fromSelector)
-			)
-		),
-		[]
-	);
-}
diff --git a/lib/nest-rule-within-rule.js b/lib/nest-rule-within-rule.js
deleted file mode 100644
index f4bc815..0000000
--- a/lib/nest-rule-within-rule.js
+++ /dev/null
@@ -1,32 +0,0 @@
-import { list } from 'postcss';
-import shiftNodesBeforeParent from './shift-nodes-before-parent';
-import cleanupParent from './cleanup-parent';
-import mergeSelectors from './merge-selectors';
-import validSelector from './valid-selector';
-import walk from './walk';
-
-const { comma } = list;
-
-export default function transformNestRuleWithinRule(node) {
-	// move previous siblings and the node to before the parent
-	const parent = shiftNodesBeforeParent(node);
-
-	// clone the parent as a new rule with children appended to it
-	const rule = parent.clone().removeAll().append(node.nodes);
-
-	// replace the node with the new rule
-	node.replaceWith(rule);
-
-	// update the selectors of the node to be merged with the parent
-	rule.selectors = mergeSelectors(parent.selectors, comma(node.params));
-
-	// conditionally cleanup an empty parent rule
-	cleanupParent(parent);
-
-	// walk the children of the new rule
-	walk(rule);
-}
-
-export const isNestRuleWithinRule = node => node.type === 'atrule' && node.name === 'nest' && Object(node.parent).type === 'rule' && comma(node.params).every(
-	selector => selector.split('&').length === 2 && validSelector.test(selector)
-);
diff --git a/lib/rule-within-rule.js b/lib/rule-within-rule.js
deleted file mode 100644
index 7a11b7c..0000000
--- a/lib/rule-within-rule.js
+++ /dev/null
@@ -1,30 +0,0 @@
-import shiftNodesBeforeParent from './shift-nodes-before-parent';
-import cleanupParent from './cleanup-parent';
-import mergeSelectors from './merge-selectors';
-import validSelector from './valid-selector';
-
-export default function transformRuleWithinRule(node) {
-	// move previous siblings and the node to before the parent
-	const parent = shiftNodesBeforeParent(node);
-
-	// update the selectors of the node to be merged with the parent
-	node.selectors = mergeSelectors(parent.selectors, node.selectors);
-
-	// merge similar rules back together
-	// eslint-disable-next-line no-extra-parens
-	const areSameRule = (
-		node.type === 'rule' && parent.type === 'rule' && node.selector === parent.selector ||
-		node.type === 'atrule' && parent.type === 'atrule' && node.params === parent.params
-	);
-
-	if (areSameRule) {
-		node.append(...parent.nodes);
-	}
-
-	// conditionally cleanup an empty parent rule
-	cleanupParent(parent);
-}
-
-export const isRuleWithinRule = node => node.type === 'rule' && Object(node.parent).type === 'rule' && node.selectors.every(
-	selector => selector.trim().lastIndexOf('&') === 0 && validSelector.test(selector)
-);
diff --git a/lib/valid-atrules.js b/lib/valid-atrules.js
deleted file mode 100644
index 3438450..0000000
--- a/lib/valid-atrules.js
+++ /dev/null
@@ -1 +0,0 @@
-export default ['document', 'media', 'supports'];
diff --git a/lib/valid-selector.js b/lib/valid-selector.js
deleted file mode 100644
index b9d943a..0000000
--- a/lib/valid-selector.js
+++ /dev/null
@@ -1,4 +0,0 @@
-// a valid selector is an ampersand followed by a non-word character or nothing
-export default /&(?:[^\w-|]|$)/;
-
-export const replaceable = /&/g;
diff --git a/package.json b/package.json
index 9dd1efd..124006a 100644
--- a/package.json
+++ b/package.json
@@ -1,52 +1,90 @@
 {
   "name": "postcss-nesting",
-  "version": "7.0.1",
-  "description": "Nest style rules inside each other",
-  "author": "Jonathan Neal <jonathantneal@hotmail.com>",
+  "description": "Nest rules inside each other in CSS",
   "license": "CC0-1.0",
-  "repository": "jonathantneal/postcss-nesting",
-  "homepage": "https://github.com/jonathantneal/postcss-nesting#readme",
-  "bugs": "https://github.com/jonathantneal/postcss-nesting/issues",
-  "main": "index.cjs.js",
-  "module": "index.es.js",
+  "version": "8.0.0",
+  "type": "module",
+  "main": "dist/index.cjs",
+  "module": "dist/index.mjs",
+  "typings": "dist/index.d.ts",
+  "publishConfig": {
+    "access": "public"
+  },
+  "author": "Jonathan Neal <jonathantneal@hotmail.com>",
+  "bugs": "https://github.com/csstools/postcss-nesting/issues",
+  "homepage": "https://github.com/csstools/postcss-nesting#readme",
+  "repository": "csstools/postcss-nesting",
   "files": [
-    "index.cjs.js",
-    "index.es.js"
+    "dist",
+    "postcss-7"
   ],
   "scripts": {
     "prepublishOnly": "npm test",
-    "pretest": "rollup -c .rollup.js --silent",
-    "test": "echo 'Running tests...'; npm run test:js && npm run test:tape",
-    "test:js": "eslint *.js lib/*.js --cache --ignore-path .gitignore --quiet",
-    "test:tape": "postcss-tape"
-  },
-  "engines": {
-    "node": ">=10.0.0"
+    "build": "node .bin/build.js",
+    "test": "node .bin/test.js",
+    "test:lint": "node .bin/test-lint.js",
+    "test:tape": "node .bin/test-tape.js"
   },
   "devDependencies": {
-    "@babel/core": "^7.0.0",
-    "@babel/preset-env": "^7.0.0",
-    "babel-eslint": "^9.0.0",
-    "babel-plugin-array-includes": "^2.0.3",
-    "eslint": "^5.6.0",
-    "eslint-config-dev": "^2.0.0",
-    "postcss": "^8.1.2",
-    "postcss-tape": "^6.0.0",
-    "pre-commit": "^1.2.2",
-    "rollup": "^0.66.0",
-    "rollup-plugin-babel": "^4.0.1"
+    "esbuild": "0.11.15",
+    "eslint": "7.25.0",
+    "eslint-config-dev": "2.0.0",
+    "postcss": "8.2.6",
+    "pre-commit": "1.2.2"
+  },
+  "browserslist": [
+    "node >= 12"
+  ],
+  "engines": {
+    "node": "12 - 16"
   },
   "eslintConfig": {
-    "extends": "dev",
-    "parser": "babel-eslint"
+    "extends": "eslint:recommended",
+    "parserOptions": {
+      "ecmaVersion": 12,
+      "sourceType": "module",
+      "ecmaFeatures": {
+        "modules": true
+      }
+    },
+    "rules": {
+      "semi": [
+        "error",
+        "never"
+      ]
+    }
   },
   "peerDependencies": {
-    "postcss": "^8.1.2"
+    "postcss": "^8"
+  },
+  "prettier": {
+    "arrowParens": "always",
+    "bracketSpacing": true,
+    "printWidth": 240,
+    "semi": false,
+    "singleQuote": true,
+    "tabWidth": 2,
+    "trailingComma": "all",
+    "useTabs": true,
+    "overrides": [
+      {
+        "files": [
+          "*.json",
+          "*.md",
+          ".prettierrc",
+          "*.yml"
+        ],
+        "options": {
+          "useTabs": false
+        }
+      }
+    ]
   },
+  "sideEffects": false,
   "keywords": [
     "postcss",
-    "css",
     "postcss-plugin",
+    "css",
     "atrules",
     "child",
     "children",
diff --git a/postcss-7/index.js b/postcss-7/index.js
new file mode 100644
index 0000000..d55da66
--- /dev/null
+++ b/postcss-7/index.js
@@ -0,0 +1,18 @@
+const postcssNesting = require('../dist/index.cjs').default
+
+module.exports = Object.defineProperties(postcssNesting, Object.getOwnPropertyDescriptors({
+	get postcss() {
+		function postcssPlugin(cssRoot) {
+			const visitors = postcssNesting()
+
+			if (typeof visitors.Once === 'function') {
+				visitors.Once(cssRoot)
+			}
+		}
+
+		postcssPlugin.postcssPlugin = 'postcss-nesting'
+		postcssPlugin.postcssVersion = '8.2.13'
+
+		return postcssPlugin
+	}
+}))
diff --git a/postcss-7/package.json b/postcss-7/package.json
new file mode 100644
index 0000000..53820f7
--- /dev/null
+++ b/postcss-7/package.json
@@ -0,0 +1,4 @@
+{
+  "type": "commonjs",
+  "private": true
+}
diff --git a/src/index.js b/src/index.js
new file mode 100644
index 0000000..43e58b2
--- /dev/null
+++ b/src/index.js
@@ -0,0 +1,12 @@
+import walk from './lib/walk.js'
+
+export default function postcssNesting() {
+	return {
+		postcssPlugin: 'postcss-nesting',
+		Once(root) {
+			walk(root)
+		},
+	}
+}
+
+postcssNesting.postcss = true
diff --git a/src/lib/atrule-within-atrule.js b/src/lib/atrule-within-atrule.js
new file mode 100644
index 0000000..692d5bc
--- /dev/null
+++ b/src/lib/atrule-within-atrule.js
@@ -0,0 +1,22 @@
+import cleanupParent from './cleanup-parent.js'
+import mergeParams from './merge-params.js'
+import shiftNodesBeforeParent from './shift-nodes-before-parent.js'
+import validAtrules from './valid-atrules.js'
+
+/*
+ * DEPRECATED: In v7.0.0 these features will be removed as they are not part of
+ * the nesting proposal.
+ */
+
+export default function transformAtruleWithinAtrule(node) {
+	// move previous siblings and the node to before the parent
+	const parent = shiftNodesBeforeParent(node)
+
+	// update the params of the node to be merged with the parent
+	node.params = mergeParams(parent.params, node.params)
+
+	// conditionally cleanup an empty parent rule
+	cleanupParent(parent)
+}
+
+export const isAtruleWithinAtrule = (node) => node.type === 'atrule' && validAtrules.includes(node.name) && Object(node.parent).type === 'atrule' && node.name === node.parent.name
diff --git a/src/lib/atrule-within-rule.js b/src/lib/atrule-within-rule.js
new file mode 100644
index 0000000..c23a941
--- /dev/null
+++ b/src/lib/atrule-within-rule.js
@@ -0,0 +1,28 @@
+import cleanupParent from './cleanup-parent.js'
+import shiftNodesBeforeParent from './shift-nodes-before-parent.js'
+import validAtrules from './valid-atrules.js'
+import walk from './walk.js'
+
+/*
+ * DEPRECATED: In v7.0.0 these features will be removed as they are not part of
+ * the nesting proposal.
+ */
+
+export default function atruleWithinRule(node) {
+	// move previous siblings and the node to before the parent
+	const parent = shiftNodesBeforeParent(node)
+
+	// clone the parent as a new rule with children appended to it
+	const rule = parent.clone().removeAll().append(node.nodes)
+
+	// append the new rule to the node
+	node.append(rule)
+
+	// conditionally cleanup an empty parent rule
+	cleanupParent(parent)
+
+	// walk the children of the new rule
+	walk(rule)
+}
+
+export const isAtruleWithinRule = (node) => node.type === 'atrule' && validAtrules.includes(node.name) && Object(node.parent).type === 'rule'
diff --git a/lib/cleanup-parent.js b/src/lib/cleanup-parent.js
similarity index 81%
rename from lib/cleanup-parent.js
rename to src/lib/cleanup-parent.js
index 57dbf0c..b7e24d2 100644
--- a/lib/cleanup-parent.js
+++ b/src/lib/cleanup-parent.js
@@ -1,5 +1,5 @@
 export default function cleanupParent(parent) {
 	if (!parent.nodes.length) {
-		parent.remove();
+		parent.remove()
 	}
 }
diff --git a/src/lib/list.js b/src/lib/list.js
new file mode 100644
index 0000000..76d5984
--- /dev/null
+++ b/src/lib/list.js
@@ -0,0 +1,44 @@
+export const split = (string, separators, last) => {
+	let array = []
+	let current = ''
+	let split = false
+
+	let func = 0
+	let quote = false
+	let escape = false
+
+	for (let letter of string) {
+		if (escape) {
+			escape = false
+		} else if (letter === '\\') {
+			escape = true
+		} else if (quote) {
+			if (letter === quote) {
+				quote = false
+			}
+		} else if (letter === '"' || letter === "'") {
+			quote = letter
+		} else if (letter === '(') {
+			func += 1
+		} else if (letter === ')') {
+			if (func > 0) func -= 1
+		} else if (func === 0) {
+			if (separators.includes(letter)) split = true
+		}
+
+		if (split) {
+			if (current !== '') array.push(current.trim())
+			current = ''
+			split = false
+		} else {
+			current += letter
+		}
+	}
+
+	if (last || current !== '') array.push(current.trim())
+	return array
+}
+
+export const comma = (string) => split(string, [','], true)
+
+export const space = (string) => split(string, [' ', '\n', '\t'])
diff --git a/src/lib/merge-params.js b/src/lib/merge-params.js
new file mode 100644
index 0000000..70054f9
--- /dev/null
+++ b/src/lib/merge-params.js
@@ -0,0 +1,11 @@
+import { comma } from './list.js'
+
+export default function mergeParams(fromParams, toParams) {
+	return comma(fromParams)
+		.map((params1) =>
+			comma(toParams)
+				.map((params2) => `${params1} and ${params2}`)
+				.join(', '),
+		)
+		.join(', ')
+}
diff --git a/src/lib/merge-selectors.js b/src/lib/merge-selectors.js
new file mode 100644
index 0000000..79f3dd1
--- /dev/null
+++ b/src/lib/merge-selectors.js
@@ -0,0 +1,14 @@
+import { complex, replaceable } from './valid-selector.js'
+
+export default function mergeSelectors(fromSelectors, toSelectors) {
+	return fromSelectors.reduce(
+		(selectors, fromSelector) => selectors.concat(
+			toSelectors.map(
+				(toSelector) => complex.test(toSelector)
+					? toSelector.replace(replaceable, `:is(${fromSelector})`)
+				: toSelector.replace(replaceable, fromSelector)
+			)
+		),
+		[]
+	)
+}
diff --git a/src/lib/nest-rule-within-rule.js b/src/lib/nest-rule-within-rule.js
new file mode 100644
index 0000000..c100b46
--- /dev/null
+++ b/src/lib/nest-rule-within-rule.js
@@ -0,0 +1,28 @@
+import { comma } from './list.js'
+import shiftNodesBeforeParent from './shift-nodes-before-parent.js'
+import cleanupParent from './cleanup-parent.js'
+import mergeSelectors from './merge-selectors.js'
+import validSelector from './valid-selector.js'
+import walk from './walk.js'
+
+export default function transformNestRuleWithinRule(node) {
+	// move previous siblings and the node to before the parent
+	const parent = shiftNodesBeforeParent(node)
+
+	// clone the parent as a new rule with children appended to it
+	const rule = parent.clone().removeAll().append(node.nodes)
+
+	// replace the node with the new rule
+	node.replaceWith(rule)
+
+	// update the selectors of the node to be merged with the parent
+	rule.selectors = mergeSelectors(parent.selectors, comma(node.params))
+
+	// conditionally cleanup an empty parent rule
+	cleanupParent(parent)
+
+	// walk the children of the new rule
+	walk(rule)
+}
+
+export const isNestRuleWithinRule = (node) => node.type === 'atrule' && node.name === 'nest' && Object(node.parent).type === 'rule' && comma(node.params).every((selector) => selector.split('&').length >= 2 && validSelector.test(selector))
diff --git a/src/lib/rule-within-rule.js b/src/lib/rule-within-rule.js
new file mode 100644
index 0000000..3c96613
--- /dev/null
+++ b/src/lib/rule-within-rule.js
@@ -0,0 +1,24 @@
+import shiftNodesBeforeParent from './shift-nodes-before-parent.js'
+import cleanupParent from './cleanup-parent.js'
+import mergeSelectors from './merge-selectors.js'
+import validSelector from './valid-selector.js'
+
+export default function transformRuleWithinRule(node) {
+	// move previous siblings and the node to before the parent
+	const parent = shiftNodesBeforeParent(node)
+
+	// update the selectors of the node to be merged with the parent
+	node.selectors = mergeSelectors(parent.selectors, node.selectors)
+
+	// merge similar rules back together
+	const areSameRule = (node.type === 'rule' && parent.type === 'rule' && node.selector === parent.selector) || (node.type === 'atrule' && parent.type === 'atrule' && node.params === parent.params)
+
+	if (areSameRule) {
+		node.append(...parent.nodes)
+	}
+
+	// conditionally cleanup an empty parent rule
+	cleanupParent(parent)
+}
+
+export const isRuleWithinRule = (node) => node.type === 'rule' && Object(node.parent).type === 'rule' && node.selectors.every((selector) => selector.trim().lastIndexOf('&') === 0 && validSelector.test(selector))
diff --git a/lib/shift-nodes-before-parent.js b/src/lib/shift-nodes-before-parent.js
similarity index 55%
rename from lib/shift-nodes-before-parent.js
rename to src/lib/shift-nodes-before-parent.js
index 512bd5a..8d0e0e3 100644
--- a/lib/shift-nodes-before-parent.js
+++ b/src/lib/shift-nodes-before-parent.js
@@ -1,16 +1,14 @@
 export default function shiftNodesBeforeParent(node) {
-	const parent = node.parent;
-	const index = parent.index(node);
+	const parent = node.parent
+	const index = parent.index(node)
 
 	// conditionally move previous siblings into a clone of the parent
 	if (index) {
-		parent.cloneBefore().removeAll().append(
-			parent.nodes.slice(0, index)
-		)
+		parent.cloneBefore().removeAll().append(parent.nodes.slice(0, index))
 	}
 
 	// move the current node before the parent (and after the conditional clone)
-	parent.before(node);
+	parent.before(node)
 
-	return parent;
+	return parent
 }
diff --git a/src/lib/valid-atrules.js b/src/lib/valid-atrules.js
new file mode 100644
index 0000000..f6705e8
--- /dev/null
+++ b/src/lib/valid-atrules.js
@@ -0,0 +1 @@
+export default ['container', 'document', 'media', 'supports']
diff --git a/src/lib/valid-selector.js b/src/lib/valid-selector.js
new file mode 100644
index 0000000..0766960
--- /dev/null
+++ b/src/lib/valid-selector.js
@@ -0,0 +1,7 @@
+// a valid selector is an ampersand followed by a non-word character or nothing
+export default /&(?:[^\w-|]|$)/
+
+export const complex = /&[^]*&/
+
+export const replaceable = /&/g
+
diff --git a/lib/walk.js b/src/lib/walk.js
similarity index 55%
rename from lib/walk.js
rename to src/lib/walk.js
index e62d437..649a180 100644
--- a/lib/walk.js
+++ b/src/lib/walk.js
@@ -1,24 +1,24 @@
-import transformRuleWithinRule, { isRuleWithinRule} from './rule-within-rule';
-import transformNestRuleWithinRule, { isNestRuleWithinRule } from './nest-rule-within-rule';
-import transformAtruleWithinRule, { isAtruleWithinRule } from './atrule-within-rule';
-import transformAtruleWithinAtrule, { isAtruleWithinAtrule } from './atrule-within-atrule';
+import transformRuleWithinRule, { isRuleWithinRule } from './rule-within-rule.js'
+import transformNestRuleWithinRule, { isNestRuleWithinRule } from './nest-rule-within-rule.js'
+import transformAtruleWithinRule, { isAtruleWithinRule } from './atrule-within-rule.js'
+import transformAtruleWithinAtrule, { isAtruleWithinAtrule } from './atrule-within-atrule.js'
 
 export default function walk(node) {
-	node.nodes.slice(0).forEach(child => {
+	node.nodes.slice(0).forEach((child) => {
 		if (child.parent === node) {
 			if (isRuleWithinRule(child)) {
-				transformRuleWithinRule(child);
+				transformRuleWithinRule(child)
 			} else if (isNestRuleWithinRule(child)) {
-				transformNestRuleWithinRule(child);
+				transformNestRuleWithinRule(child)
 			} else if (isAtruleWithinRule(child)) {
-				transformAtruleWithinRule(child);
+				transformAtruleWithinRule(child)
 			} else if (isAtruleWithinAtrule(child)) {
-				transformAtruleWithinAtrule(child);
+				transformAtruleWithinAtrule(child)
 			}
 
 			if (Object(child.nodes).length) {
-				walk(child);
+				walk(child)
 			}
 		}
-	});
+	})
 }
diff --git a/test/complex.css b/test/complex.css
new file mode 100644
index 0000000..6557492
--- /dev/null
+++ b/test/complex.css
@@ -0,0 +1,7 @@
+body > p, body > ul {
+	margin: 0;
+
+	& ~ & {
+		margin-top: 0;
+	}
+}
diff --git a/test/complex.expect.css b/test/complex.expect.css
new file mode 100644
index 0000000..6557492
--- /dev/null
+++ b/test/complex.expect.css
@@ -0,0 +1,7 @@
+body > p, body > ul {
+	margin: 0;
+
+	& ~ & {
+		margin-top: 0;
+	}
+}
diff --git a/test/container.css b/test/container.css
new file mode 100644
index 0000000..14ff6cf
--- /dev/null
+++ b/test/container.css
@@ -0,0 +1,13 @@
+.container {
+	contain: layout inline-size;
+}
+
+.contained {
+	background-color: blue;
+	height: 100px;
+	width: 100px;
+
+	@container (min-width: 640px) {
+		background-color: red;
+	}
+}
diff --git a/test/container.expect.css b/test/container.expect.css
new file mode 100644
index 0000000..9f301e4
--- /dev/null
+++ b/test/container.expect.css
@@ -0,0 +1,16 @@
+.container {
+	contain: layout inline-size;
+}
+
+.contained {
+	background-color: blue;
+	height: 100px;
+	width: 100px
+}
+
+@container (min-width: 640px) {
+
+.contained {
+		background-color: red
+}
+	}
diff --git a/test/ignore.css b/test/ignore.css
index 5a5ef98..133a2e7 100644
--- a/test/ignore.css
+++ b/test/ignore.css
@@ -8,10 +8,7 @@ a, b {
 	order: 3;
 }
 f {
-	& g & {
-		order: 4;
-	}
-	&h {
+	&g {
 		order: 5;
 	}
 }
@@ -25,9 +22,6 @@ a, b {
 	order: 3;
 }
 f {
-	@nest & g & {
-		order: 4;
-	}
 	@nest &h {
 		order: 5;
 	}
diff --git a/test/ignore.expect.css b/test/ignore.expect.css
index 5a5ef98..133a2e7 100644
--- a/test/ignore.expect.css
+++ b/test/ignore.expect.css
@@ -8,10 +8,7 @@ a, b {
 	order: 3;
 }
 f {
-	& g & {
-		order: 4;
-	}
-	&h {
+	&g {
 		order: 5;
 	}
 }
@@ -25,9 +22,6 @@ a, b {
 	order: 3;
 }
 f {
-	@nest & g & {
-		order: 4;
-	}
 	@nest &h {
 		order: 5;
 	}
-- 
2.33.1

