From a19c002696b914bf958ab1d35a3bd0f108d63e4f Mon Sep 17 00:00:00 2001
From: schelmo <g.schlmm@gmail.com>
Date: Wed, 27 Oct 2021 16:14:41 +0200
Subject: [PATCH 86/89] fix #82: use the RuleExit listener (#86)

---
 .bin/test-tape.js        | 20 ++++++++++++++++----
 src/lib/walk.js          | 26 ++++++++++++--------------
 src/postcss-8-nesting.js |  4 ++--
 test/mixin.css           |  6 ++++++
 test/mixin.expect.css    |  5 +++++
 5 files changed, 41 insertions(+), 20 deletions(-)
 create mode 100644 test/mixin.css
 create mode 100644 test/mixin.expect.css

diff --git a/.bin/test-tape.js b/.bin/test-tape.js
index db0f25d..23f1659 100644
--- a/.bin/test-tape.js
+++ b/.bin/test-tape.js
@@ -19,17 +19,30 @@ export default async function tape() {
 	failures += await test('ignores invalid entries', { basename: 'ignore' })
 	failures += await test('supports complex entries', { basename: 'complex' })
 
+	let mixinPlugin = () => {
+		return {
+			postcssPlugin: 'mixin',
+			AtRule: {
+				mixin(node) {
+					node.replaceWith('& .in{ &.deep { color: blue; }}')
+				},
+			},
+		}
+	}
+	mixinPlugin.postcss = true
+	failures += await test('supports other visitors', { basename: 'mixin' }, mixinPlugin)
+
 	return failures === 0
 }
 
-async function test(name, init) {
+async function test(name, init, ...plugins) {
 	const { basename } = Object(init)
 
 	let sourceUrl = new URL(`test/${basename}.css`, workingUrl)
 	let expectUrl = new URL(`test/${basename}.expect.css`, workingUrl)
 	let resultUrl = new URL(`test/${basename}.result.css`, workingUrl)
 
-	let plugins = [plugin]
+	plugins.unshift(plugin)
 
 	let sourceCss = await fs.readFile(sourceUrl, 'utf8')
 	let expectCss = await fs.readFile(expectUrl, 'utf8')
@@ -49,10 +62,9 @@ async function test(name, init) {
 	}
 }
 
-
 if (new URL(process.argv[1], 'file:').href === import.meta.url) {
 	tape().then(
 		() => process.exit(0),
-		() => process.exit(1)
+		() => process.exit(1),
 	)
 }
diff --git a/src/lib/walk.js b/src/lib/walk.js
index 649a180..d34964a 100644
--- a/src/lib/walk.js
+++ b/src/lib/walk.js
@@ -4,21 +4,19 @@ import transformAtruleWithinRule, { isAtruleWithinRule } from './atrule-within-r
 import transformAtruleWithinAtrule, { isAtruleWithinAtrule } from './atrule-within-atrule.js'
 
 export default function walk(node) {
-	node.nodes.slice(0).forEach((child) => {
-		if (child.parent === node) {
-			if (isRuleWithinRule(child)) {
-				transformRuleWithinRule(child)
-			} else if (isNestRuleWithinRule(child)) {
-				transformNestRuleWithinRule(child)
-			} else if (isAtruleWithinRule(child)) {
-				transformAtruleWithinRule(child)
-			} else if (isAtruleWithinAtrule(child)) {
-				transformAtruleWithinAtrule(child)
-			}
+	node.each((child) => {
+		if (isRuleWithinRule(child)) {
+			transformRuleWithinRule(child)
+		} else if (isNestRuleWithinRule(child)) {
+			transformNestRuleWithinRule(child)
+		} else if (isAtruleWithinRule(child)) {
+			transformAtruleWithinRule(child)
+		} else if (isAtruleWithinAtrule(child)) {
+			transformAtruleWithinAtrule(child)
+		}
 
-			if (Object(child.nodes).length) {
-				walk(child)
-			}
+		if (Object(child.nodes).length) {
+			walk(child)
 		}
 	})
 }
diff --git a/src/postcss-8-nesting.js b/src/postcss-8-nesting.js
index 43e58b2..3454c01 100644
--- a/src/postcss-8-nesting.js
+++ b/src/postcss-8-nesting.js
@@ -3,8 +3,8 @@ import walk from './lib/walk.js'
 export default function postcssNesting() {
 	return {
 		postcssPlugin: 'postcss-nesting',
-		Once(root) {
-			walk(root)
+		RuleExit(rule) {
+			walk(rule)
 		},
 	}
 }
diff --git a/test/mixin.css b/test/mixin.css
new file mode 100644
index 0000000..176251e
--- /dev/null
+++ b/test/mixin.css
@@ -0,0 +1,6 @@
+a {
+	& b {
+		color: red;
+	}
+	@mixin;
+}
diff --git a/test/mixin.expect.css b/test/mixin.expect.css
new file mode 100644
index 0000000..e318ba4
--- /dev/null
+++ b/test/mixin.expect.css
@@ -0,0 +1,5 @@
+
+	a b {
+		color: red;
+	}
+a .in.deep { color: blue; }
-- 
2.33.1

