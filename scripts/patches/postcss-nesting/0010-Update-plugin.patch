From c1436d9a3e83cb12fb5130dabbd46dcfc4b745f1 Mon Sep 17 00:00:00 2001
From: Jonathan Neal <jonathantneal@hotmail.com>
Date: Tue, 15 Sep 2015 09:14:53 -0400
Subject: [PATCH 10/95] Update plugin

Refactor based on Tab Atkins new syntax
---
 index.js | 180 +++++++++++++++++++++++++------------------------------
 1 file changed, 80 insertions(+), 100 deletions(-)

diff --git a/index.js b/index.js
index 636afc2..490226a 100644
--- a/index.js
+++ b/index.js
@@ -1,117 +1,97 @@
+var bubble  = ['media'];
 var postcss = require('postcss');
-var parser = require('postcss-selector-parser');
 
-function parse(selector) {
-	return parser().process(selector).res;
+function transpileSelectors(fromRule, toRule) {
+	var selectors = [];
+
+	fromRule.selectors.forEach(function (fromSelector) {
+		toRule.selectors.forEach(function (toSelector) {
+			if (toSelector.indexOf('&') === -1) {
+				selectors.push(fromSelector + ' ' + toSelector);
+			} else {
+				selectors.push(toSelector.replace(/&/g, fromSelector));
+			}
+		});
+	});
+
+	return selectors;
 }
 
-function isNestingRule(rule) {
-	return rule && !rule.selector && rule.parent && rule.parent.type === 'rule';
+function transpileNestRule(fromRule, toRule, atRule) {
+	var parent = fromRule.parent;
+
+	if (!('nestedIndex' in parent)) {
+		parent.nestedIndex = parent.nodes.indexOf(fromRule);
+	}
+
+	fromRule.nodes.splice(fromRule.nodes.indexOf(atRule), 1);
+
+	toRule.nodes     = atRule.nodes.splice(0);
+	toRule.parent    = parent;
+	toRule.selector  = atRule.params;
+	toRule.selectors = transpileSelectors(fromRule, toRule);
+
+	parent.nodes.splice(++parent.nestedIndex, 0, toRule);
 }
 
-function hasParentReference(node) {
-	if (node.type === 'tag') {
-		return node.value === '&';
+function transpileAtRule(fromRule, toRule, atRule) {
+	var parent = fromRule.parent;
+
+	if (!('nestedIndex' in parent)) {
+		parent.nestedIndex = parent.nodes.indexOf(fromRule);
 	}
 
-	for (var index in node.nodes) {
-		if (hasParentReference(node.nodes[index])) {
-			return true;
+	fromRule.nodes.splice(fromRule.nodes.indexOf(atRule), 1);
+
+	toRule.nodes     = atRule.nodes.splice(0);
+	toRule.parent    = atRule;
+	toRule.selector  = fromRule.selector;
+
+	atRule.nodes  = [toRule];
+	atRule.parent = parent;
+
+	parent.nodes.splice(++parent.nestedIndex, 0, atRule);
+}
+
+function transpileRule(rule) {
+	var nodes = rule.nodes;
+	var index = -1;
+	var child;
+
+	// for each node
+	while (child = nodes[++index]) {
+		// if node is atrule
+		if (child.type === 'atrule') {
+			var newRule = postcss.rule();
+
+			// if atrule is nest
+			if (child.name === 'nest') {
+				transpileNestRule(rule, newRule, child);
+
+				transpileRule(newRule);
+			} else if (bubble.indexOf(child.name) !== -1) {
+				transpileAtRule(rule, newRule, child);
+
+				transpileRule(newRule);
+
+				--index;
+			}
 		}
 	}
-
-	return false;
 }
 
-module.exports = postcss.plugin('postcss-nesting', function (opts) {
-	opts = opts || {};
+module.exports = postcss.plugin('postcss-nested', function (opts) {
+	if (opts && opts.bubble) bubble = bubble.concat(opts.bubble);
 
 	return function (css) {
-		// for each rule in css
-		css.eachRule(function (nestingRule) {
-			// if the rule is a nesting rule
-			if (isNestingRule(nestingRule)) {
-				// cache parent selectors
-				var parentSelectors = nestingRule.parent.selector;
-				var parentSelectorsObject = parse(parentSelectors);
-
-				// for each rule in the nesting rule
-				nestingRule.eachRule(function (rule, ruleIndex) {
-					var newSelectors = parser.root();
-
-					// for each selector in the rule
-					parse(rule.selector).each(function (selector) {
-						// if the selector has a parent reference
-						if (hasParentReference(selector)) {
-							// HINT: selectors = parent selectors Ã— parent references
-
-							var cloneSelectorList = parser.root();
-
-							cloneSelectorList.append(selector.clone());
-
-							while (hasParentReference(cloneSelectorList)) {
-								var cloneSelector;
-								var cloneSelectorIndex = -1;
-								var cloneNode;
-								var cloneNodeIndex;
-								var parentSelector2;
-								var parentSelectorIndex;
-
-								while ((cloneSelector = cloneSelectorList.nodes[++cloneSelectorIndex])) {
-									cloneNodeIndex = -1;
-
-									while ((cloneNode = cloneSelector.nodes[++cloneNodeIndex])) {
-										if (hasParentReference(cloneNode)) {
-											parentSelectorIndex = -1;
-
-											while ((parentSelector2 = parentSelectorsObject.nodes[++parentSelectorIndex])) {
-												cloneSelector.nodes.splice(cloneNodeIndex, 1, parentSelector2);
-
-												cloneSelectorList.nodes.splice(cloneSelectorIndex + parentSelectorIndex + 1, 0, cloneSelector.clone());
-											}
-
-											cloneSelectorList.nodes.splice(cloneSelectorIndex, 1);
-
-											break;
-										}
-									}
-								}
-							}
-
-							newSelectors.append(cloneSelectorList);
-						}
-						// if the selector does not have a parent reference
-						else {
-							// for each parent selector
-							parse(parentSelectors).each(function (parentSelector) {
-								// create a new selector
-								var newSelector = parser.selector();
-
-								// append the parent selector to the new selector
-								newSelector.append(parentSelector);
-
-								// append a combinator to the new selector
-								newSelector.append(parser.combinator({ value: ' ' }));
-
-								// append the selector to the new selector
-								newSelector.append(selector);
-
-								// append the new selector to the new selectors
-								newSelectors.append(newSelector);
-							});
-						}
-					});
-
-					// replace the rule selector with the new selectors
-					rule.selector = newSelectors.toString();
-
-					// append the rule after the nesting rule
-					nestingRule.parent.parent.nodes.splice(nestingRule.parent.parent.nodes.indexOf(nestingRule.parent) + ruleIndex + 1, 0, rule);
-				});
-
-				// remove original nesting rule
-				nestingRule.removeSelf();
+		var nodes = css.nodes;
+		var index = -1;
+		var child;
+
+		while (child = nodes[++index]) {
+			if (child.type === 'rule') {
+				transpileRule(child);
 			}
-		});
+		}
 	};
 });
-- 
2.33.1

