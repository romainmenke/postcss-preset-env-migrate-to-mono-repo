From 8b7757f2af78801e981c0340d0b7be3c018b95e2 Mon Sep 17 00:00:00 2001
From: Jonathan Neal <jonathantneal@hotmail.com>
Date: Sat, 25 Apr 2020 00:54:41 -0400
Subject: [PATCH 10/15] 3.0.0

---
 .gitattributes                      |   1 +
 .gitignore                          |   3 +-
 .rollup.js                          |  21 ++--
 .tape.js                            |  18 ++--
 .travis.yml                         |   2 +-
 CHANGELOG.md                        |   6 ++
 CONTRIBUTING.md                     |   2 +-
 INSTALL.md                          |   2 +-
 README.md                           |  16 ++-
 index.js                            | 103 --------------------
 package.json                        |  83 ++++++++++------
 src/index.js                        |  18 ++++
 src/onCSSDeclaration.js             |  31 ++++++
 src/onCSSFunction.js                | 145 ++++++++++++++++++++++++++++
 src/options.js                      |   4 +
 test/basic.expect.css               |  16 +--
 test/basic.preserve-true.expect.css |  16 +--
 17 files changed, 302 insertions(+), 185 deletions(-)
 create mode 100644 .gitattributes
 delete mode 100644 index.js
 create mode 100644 src/index.js
 create mode 100644 src/onCSSDeclaration.js
 create mode 100644 src/onCSSFunction.js
 create mode 100644 src/options.js

diff --git a/.gitattributes b/.gitattributes
new file mode 100644
index 0000000..6313b56
--- /dev/null
+++ b/.gitattributes
@@ -0,0 +1 @@
+* text=auto eol=lf
diff --git a/.gitignore b/.gitignore
index d920b78..5bd3ef6 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1,10 +1,11 @@
+dist
 node_modules
-index.*.*
 package-lock.json
 *.log*
 *.result.css
 .*
 !.editorconfig
+!.gitattributes
 !.gitignore
 !.rollup.js
 !.tape.js
diff --git a/.rollup.js b/.rollup.js
index ebe39f9..1fb0d87 100644
--- a/.rollup.js
+++ b/.rollup.js
@@ -1,16 +1,9 @@
-import babel from 'rollup-plugin-babel';
+import pkg from './package.json'
 
 export default {
-	input: 'index.js',
-	output: [
-		{ file: 'index.cjs.js', format: 'cjs', sourcemap: true },
-		{ file: 'index.es.mjs', format: 'es', sourcemap: true }
-	],
-	plugins: [
-		babel({
-			presets: [
-				['@babel/env', { modules: false, targets: { node: 6 } }]
-			]
-		})
-	]
-};
+	...pkg.rollup,
+	plugins: pkg.rollup.plugins.map(plugin => require(plugin)()),
+	onwarn(warning, warn) {
+		if (warning.code !== 'UNRESOLVED_IMPORT') warn(warning)
+	}
+}
diff --git a/.tape.js b/.tape.js
index 4c8f446..e496428 100644
--- a/.tape.js
+++ b/.tape.js
@@ -1,13 +1,11 @@
 module.exports = {
-	'postcss-color-functional-notation': {
-		'basic': {
-			message: 'supports basic usage'
-		},
-		'basic:preserve-true': {
-			message: 'supports { preserve: true } usage',
-			options: {
-				preserve: true
-			}
+	'basic': {
+		message: 'supports basic usage'
+	},
+	'basic:preserve-true': {
+		message: 'supports { preserve: true } usage',
+		options: {
+			preserve: true
 		}
 	}
-};
+}
diff --git a/.travis.yml b/.travis.yml
index e1f11a5..a9e32cd 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -3,7 +3,7 @@
 language: node_js
 
 node_js:
-  - 6
+  - 10
 
 install:
   - npm install --ignore-scripts
diff --git a/CHANGELOG.md b/CHANGELOG.md
index 90dfa10..d1a6938 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,5 +1,11 @@
 # Changes to PostCSS Color Functional Notation
 
+### 3.0.0 (April 25, 2020)
+
+- Updated: Support for Node 10+
+- Updated: `postcss` to 7.0.27 (patch)
+- Updated: `postcss-values-parser` to 3.2.0 (minor)
+
 ### 2.0.1 (September 18, 2018)
 
 - Updated: PostCSS Values Parser 2 (patch for this project)
diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md
index b336ebf..1d0bf80 100644
--- a/CONTRIBUTING.md
+++ b/CONTRIBUTING.md
@@ -26,7 +26,7 @@ scope and avoid unrelated commits.
    cd postcss-color-functional-notation
 
    # Assign the original repo to a remote called "upstream"
-   git remote add upstream git@github.com:jonathantneal/postcss-color-functional-notation.git
+   git remote add upstream git@github.com:csstools/postcss-color-functional-notation.git
 
    # Install the tools necessary for testing
    npm install
diff --git a/INSTALL.md b/INSTALL.md
index c7d211e..629a70a 100644
--- a/INSTALL.md
+++ b/INSTALL.md
@@ -165,6 +165,6 @@ grunt.initConfig({
 [PostCSS]: https://github.com/postcss/postcss
 [PostCSS CLI]: https://github.com/postcss/postcss-cli
 [PostCSS Loader]: https://github.com/postcss/postcss-loader
-[PostCSS Color Functional Notation]: https://github.com/jonathantneal/postcss-color-functional-notation
+[PostCSS Color Functional Notation]: https://github.com/csstools/postcss-color-functional-notation
 [React App Rewire PostCSS]: https://github.com/csstools/react-app-rewire-postcss
 [React App Rewired]: https://github.com/timarney/react-app-rewired
diff --git a/README.md b/README.md
index 597bf45..8929958 100644
--- a/README.md
+++ b/README.md
@@ -1,9 +1,9 @@
 # PostCSS Color Functional Notation [<img src="https://postcss.github.io/postcss/logo.svg" alt="PostCSS Logo" width="90" height="90" align="right">][postcss]
 
-[![NPM Version][npm-img]][npm-url]
-[![CSS Standard Status][css-img]][css-url]
-[![Build Status][cli-img]][cli-url]
-[![Support Chat][git-img]][git-url]
+[<img alt="NPM Version" src="https://img.shields.io/npm/v/postcss-color-functional-notation.svg" height="20">][npm-url]
+[<img alt="CSS Standard Status" src="https://cssdb.org/badge/lab-function.svg" height="20">][css-url]
+[<img alt="Build Status" src="https://img.shields.io/travis/csstools/postcss-color-functional-notation/master.svg" height="20">][cli-url]
+[<img alt="Support Chat" src="https://img.shields.io/badge/support-chat-blue.svg" height="20">][git-url]
 
 [PostCSS Color Functional Notation] lets you use space and slash separated
 color notation in CSS, following the [CSS Color] specification.
@@ -91,13 +91,9 @@ postcssImageSetFunction({ preserve: true })
 }
 ```
 
-[cli-img]: https://img.shields.io/travis/jonathantneal/postcss-color-functional-notation.svg
-[cli-url]: https://travis-ci.org/jonathantneal/postcss-color-functional-notation
-[css-img]: https://cssdb.org/badge/color-functional-notation.svg
+[cli-url]: https://travis-ci.org/csstools/postcss-color-functional-notation
 [css-url]: https://cssdb.org/#color-functional-notation
-[git-img]: https://img.shields.io/badge/support-chat-blue.svg
 [git-url]: https://gitter.im/postcss/postcss
-[npm-img]: https://img.shields.io/npm/v/postcss-color-functional-notation.svg
 [npm-url]: https://www.npmjs.com/package/postcss-color-functional-notation
 
 [CSS Color]: https://drafts.csswg.org/css-color/#ref-for-funcdef-rgb%E2%91%A1%E2%91%A0
@@ -105,4 +101,4 @@ postcssImageSetFunction({ preserve: true })
 [Grunt PostCSS]: https://github.com/nDmitry/grunt-postcss
 [PostCSS]: https://github.com/postcss/postcss
 [PostCSS Loader]: https://github.com/postcss/postcss-loader
-[PostCSS Color Functional Notation]: https://github.com/jonathantneal/postcss-color-functional-notation
+[PostCSS Color Functional Notation]: https://github.com/csstools/postcss-color-functional-notation
diff --git a/index.js b/index.js
deleted file mode 100644
index 66f0bc4..0000000
--- a/index.js
+++ /dev/null
@@ -1,103 +0,0 @@
-import postcss from 'postcss';
-import valuesParser from 'postcss-values-parser';
-
-export default postcss.plugin('postcss-color-functional-notation', opts => {
-	const preserve = 'preserve' in Object(opts) ? Boolean(opts.preserve) : false;
-
-	return root => {
-		root.walkDecls(decl => {
-			const { value: originalValue } = decl;
-
-			if (colorAnyRegExp.test(originalValue)) {
-				const valueAST = valuesParser(originalValue).parse();
-
-				valueAST.walkType('func', node => {
-					if (colorRegExp.test(node.value)) {
-						const children = node.nodes.slice(1, -1);
-						const isFunctionalHSL = matchFunctionalHSL(node, children);
-						const isFunctionalRGB1 = matchFunctionalRGB1(node, children);
-						const isFunctionalRGB2 = matchFunctionalRGB2(node, children);
-
-						if (isFunctionalHSL || isFunctionalRGB1 || isFunctionalRGB2) {
-							const slashNode = children[3];
-							const alphaNode = children[4];
-
-							if (alphaNode) {
-								if (isPercentage(alphaNode) && !isCalc(alphaNode)) {
-									alphaNode.unit = '';
-									alphaNode.value = String(alphaNode.value / 100);
-								}
-
-								if (isHslRgb(node)) {
-									node.value += 'a';
-								}
-							} else if (isHslaRgba(node)) {
-								node.value = node.value.slice(0, -1);
-							}
-
-							if (slashNode && isSlash(slashNode)) {
-								slashNode.replaceWith( newComma() );
-							}
-
-							if (isFunctionalRGB2) {
-								children[0].unit = children[1].unit = children[2].unit = '';
-
-								children[0].value = String(Math.floor(children[0].value * 255 / 100));
-								children[1].value = String(Math.floor(children[1].value * 255 / 100));
-								children[2].value = String(Math.floor(children[2].value * 255 / 100));
-							}
-
-							node.nodes.splice(3, 0, [ newComma() ]);
-							node.nodes.splice(2, 0, [ newComma() ]);
-						}
-					}
-				});
-
-				const modifiedValue = String(valueAST);
-
-				if (modifiedValue !== originalValue) {
-					if (preserve) {
-						decl.cloneBefore({ value: modifiedValue });
-					} else {
-						decl.value = modifiedValue;
-					}
-				}
-			}
-		});
-	};
-});
-
-const alphaUnitMatch = /^%?$/i;
-const calcFuncMatch = /^calc$/i;
-const colorAnyRegExp = /(^|[^\w-])(hsla?|rgba?)\(/i;
-const colorRegExp = /^(hsla?|rgba?)$/i;
-const hslishRegExp = /^hsla?$/i;
-const hslRgbFuncMatch = /^(hsl|rgb)$/i;
-const hslaRgbaFuncMatch = /^(hsla|rgba)$/i;
-const hueUnitMatch = /^(deg|grad|rad|turn)?$/i;
-const rgbishRegExp = /^rgba?$/i;
-const isAlphaValue = node => isCalc(node) || node.type === 'number' && alphaUnitMatch.test(node.unit);
-const isCalc = node => node.type === 'func' && calcFuncMatch.test(node.value);
-const isHue = node => isCalc(node) || node.type === 'number' && hueUnitMatch.test(node.unit);
-const isNumber = node => isCalc(node) || node.type === 'number' && node.unit === '';
-const isPercentage = node => isCalc(node) || node.type === 'number' && (node.unit === '%' || node.unit === '' && node.value === '0');
-const isHslish = node => node.type === 'func' && hslishRegExp.test(node.value);
-const isHslRgb = node => node.type === 'func' && hslRgbFuncMatch.test(node.value);
-const isHslaRgba = node => node.type === 'func' && hslaRgbaFuncMatch.test(node.value);
-const isRgbish = node => node.type === 'func' && rgbishRegExp.test(node.value);
-const isSlash = node => node.type === 'operator' && node.value === '/';
-const functionalHSLMatch = [isHue, isPercentage, isPercentage, isSlash, isAlphaValue];
-const functionalRGB1Match = [isNumber, isNumber, isNumber, isSlash, isAlphaValue];
-const functionalRGB2Match = [isPercentage, isPercentage, isPercentage, isSlash, isAlphaValue];
-
-const matchFunctionalHSL = (node, children) => isHslish(node) && children.every(
-	(child, index) => typeof functionalHSLMatch[index] === 'function' && functionalHSLMatch[index](child)
-);
-const matchFunctionalRGB1 = (node, children) => isRgbish(node) && children.every(
-	(child, index) => typeof functionalRGB1Match[index] === 'function' && functionalRGB1Match[index](child)
-);
-const matchFunctionalRGB2 = (node, children) => isRgbish(node) && children.every(
-	(child, index) => typeof functionalRGB2Match[index] === 'function' && functionalRGB2Match[index](child)
-);
-
-const newComma = () => valuesParser.comma({ value: ',' })
diff --git a/package.json b/package.json
index 96fda45..b12014b 100644
--- a/package.json
+++ b/package.json
@@ -1,50 +1,77 @@
 {
   "name": "postcss-color-functional-notation",
-  "version": "2.0.1",
+  "version": "3.0.0",
   "description": "Use space and slash separated color notation in CSS",
   "author": "Jonathan Neal <jonathantneal@hotmail.com>",
   "license": "CC0-1.0",
-  "repository": "jonathantneal/postcss-color-functional-notation",
-  "homepage": "https://github.com/jonathantneal/postcss-color-functional-notation#readme",
-  "bugs": "https://github.com/jonathantneal/postcss-color-functional-notation/issues",
-  "main": "index.cjs.js",
-  "module": "index.es.mjs",
+  "repository": "csstools/postcss-color-functional-notation",
+  "homepage": "https://github.com/csstools/postcss-color-functional-notation#readme",
+  "bugs": "https://github.com/csstools/postcss-color-functional-notation/issues",
+  "main": "dist/index.cjs.js",
+  "module": "dist/index.esm.mjs",
   "files": [
-    "index.cjs.js",
-    "index.cjs.js.map",
-    "index.es.mjs",
-    "index.es.mjs.map"
+    "dist"
   ],
   "scripts": {
-    "prepublishOnly": "npm test",
-    "pretest": "rollup -c .rollup.js --silent",
-    "test": "echo 'Running tests...'; npm run test:js && npm run test:tape",
-    "test:ec": "echint --ignore index.*.js test",
-    "test:js": "eslint *.js --cache --ignore-path .gitignore --quiet",
-    "test:tape": "postcss-tape"
+    "build": "npx rollup -c .rollup.js",
+    "build:watch": "npx rollup -c .rollup.js --watch",
+    "lint": "npx eslint --cache src",
+    "lint:fix": "npx eslint --cache --fix",
+    "pretest": "npm install && npm run build",
+    "test": "npm run lint && npm run tape",
+    "tape": "npx postcss-tape"
   },
   "engines": {
-    "node": ">=6.0.0"
+    "node": ">=10.0.0"
   },
   "dependencies": {
-    "postcss": "^7.0.2",
-    "postcss-values-parser": "^2.0.0"
+    "postcss": "^7.0.27",
+    "postcss-values-parser": "^3.2.0"
   },
   "devDependencies": {
-    "@babel/core": "^7.1.0",
-    "@babel/preset-env": "^7.1.0",
-    "babel-eslint": "^9.0.0",
-    "eslint": "^5.6.0",
-    "eslint-config-dev": "^2.0.0",
-    "postcss-tape": "^2.2.0",
+    "@babel/core": "^7.9.0",
+    "@babel/preset-env": "^7.9.5",
+    "babel-eslint": "^10.1.0",
+    "eslint": "^6.8.0",
+    "postcss-tape": "^5.0.2",
     "pre-commit": "^1.2.2",
-    "rollup": "^0.66.0",
-    "rollup-plugin-babel": "^4.0.3"
+    "rollup": "^2.7.2",
+    "rollup-plugin-babel": "^4.4.0"
+  },
+  "babel": {
+    "presets": [
+      [
+        "@babel/env",
+        {
+          "targets": "maintained node versions"
+        }
+      ]
+    ]
   },
   "eslintConfig": {
-    "extends": "dev",
+    "env": {
+      "es6": true,
+      "node": true
+    },
+    "extends": "eslint:recommended",
     "parser": "babel-eslint"
   },
+  "rollup": {
+    "input": "src/index.js",
+    "plugins": [
+      "rollup-plugin-babel"
+    ],
+    "output": [
+      {
+        "file": "dist/index.cjs.js",
+        "format": "cjs"
+      },
+      {
+        "file": "dist/index.esm.js",
+        "format": "esm"
+      }
+    ]
+  },
   "keywords": [
     "postcss",
     "css",
diff --git a/src/index.js b/src/index.js
new file mode 100644
index 0000000..4e2200c
--- /dev/null
+++ b/src/index.js
@@ -0,0 +1,18 @@
+import postcss from 'postcss'
+import onCSSDeclaration from './onCSSDeclaration'
+import options from './options'
+
+/** Transform space and slash separated color functions in CSS. */
+const postcssPlugin = postcss.plugin('postcss-color-functional-notation', opts => {
+	options.preserve = 'preserve' in Object(opts) ? Boolean(opts.preserve) : false
+
+	return root => {
+		root.walkDecls(onCSSDeclaration)
+	}
+})
+
+export default postcssPlugin
+
+/** @typedef {import('postcss').Root} CSSRoot */ 
+/** @typedef {(root: CSSRoot) => void} PostCSSTransformCallback */ 
+/** @typedef {(opts: options) => PostCSSTransformCallback} PostCSSPluginInitializer */ 
diff --git a/src/onCSSDeclaration.js b/src/onCSSDeclaration.js
new file mode 100644
index 0000000..a51c97f
--- /dev/null
+++ b/src/onCSSDeclaration.js
@@ -0,0 +1,31 @@
+import { parse } from 'postcss-values-parser'
+import onCSSFunction from './onCSSFunction'
+import options from './options'
+
+/** @type {(decl: CSSDeclaration) => void} Transform space and slash separated color functions in CSS Declarations. */
+const onCSSDeclaration = decl => {
+	const { value: originalValue } = decl
+
+	if (hasAnyColorFunction(originalValue)) {
+		const valueAST = parse(originalValue)
+
+		valueAST.walkFuncs(onCSSFunction)
+
+		const modifiedValue = String(valueAST)
+
+		if (modifiedValue !== originalValue) {
+			if (options.preserve) decl.cloneBefore({ value: modifiedValue })
+			else decl.value = modifiedValue
+		}
+	}
+}
+
+export default onCSSDeclaration
+
+/** @type {(value: RegExp) => (value: string) => boolean} Return a function that checks whether the expression exists in a value. */
+const createRegExpTest = Function.bind.bind(RegExp.prototype.test)
+
+/** Return whether the value has an `hsl()`, `hsla()`, `rgb()`, or `rgba()` function. */
+const hasAnyColorFunction = createRegExpTest(/(^|[^\w-])(hsla?|rgba?)\(/i)
+
+/** @typedef {import('postcss').Declaration} CSSDeclaration */
diff --git a/src/onCSSFunction.js b/src/onCSSFunction.js
new file mode 100644
index 0000000..e4781fb
--- /dev/null
+++ b/src/onCSSFunction.js
@@ -0,0 +1,145 @@
+import { parse } from 'postcss-values-parser'
+
+/** @type {(decl: CSSFunction) => void} Transform a space and slash separated color function. */
+const onCSSFunction = node => {
+	/** @type {{ name: string, nodes: CSSNode[] }} */
+	const { name, nodes } = node
+
+	if (isColorFunctionName(name)) {
+		const isHsl = isHslColorFunctionName(name) && isHslFunctionContents(nodes)
+		const isRgbWithNumbers = isRgbColorFunctionName(name) && isRgbNumberFunctionContents(nodes)
+		const isRgbWithPercents = isRgbColorFunctionName(name) && isRgbPercentFunctionContents(nodes)
+
+		if (name === 'hsl' && !isHsl) {
+			console.log([name, isHue(nodes[0])], nodes[0])
+		}
+
+		if (isHsl || isRgbWithNumbers || isRgbWithPercents) {
+			// rename the Color function to `hsl` or `rgb`
+			Object.assign(node, { name: isHsl ? 'hsl' : 'rgb' })
+
+			/** @type {CSSPunctuation} Slash punctuation before the Alpha channel. */
+			const slashNode = nodes[3]
+
+			/** @type {CSSNumber} Alpha channel. */
+			const alphaNode = nodes[4]
+
+			if (alphaNode) {
+				if (isPercentage(alphaNode) && !isCalc(alphaNode)) {
+					// transform the Alpha channel from a Percentage to (0-1) Number
+					Object.assign(alphaNode, { value: String(alphaNode.value / 100), unit: '' })
+				}
+
+				// if the color is fully opaque (i.e. the Alpha channel is `1`)
+				if (alphaNode.value === '1') {
+					// remove the Slash and Alpha channel
+					slashNode.remove()
+					alphaNode.remove()
+				} else {
+					// otherwise, rename the Color function to `hsla` or `rgba`
+					Object.assign(node, { name: isHsl ? 'hsla' : 'rgba' })
+				}
+			}
+
+			// replace a remaining Slash with a Comma
+			if (slashNode && isSlash(slashNode)) {
+				slashNode.replaceWith(commaNode.clone())
+			}
+
+			/** Extracted Color channels. */
+			let [channelNode1, channelNode2, channelNode3] = nodes
+
+			if (isRgbWithPercents) {
+				Object.assign(channelNode1, { value: to255ColorValue(channelNode1.value), unit: '' })
+				Object.assign(channelNode2, { value: to255ColorValue(channelNode2.value), unit: '' })
+				Object.assign(channelNode3, { value: to255ColorValue(channelNode3.value), unit: '' })
+			}
+
+			channelNode2.after(
+				commaNode.clone()
+			)
+
+			channelNode1.after(
+				commaNode.clone()
+			)
+		}
+	}
+}
+
+export default onCSSFunction
+
+const commaNode = parse(',').first
+
+/** Return a value transformed from a scale of 0-100 to a scale of 0-255 */
+function to255ColorValue(value) {
+	return String(Math.floor(value * 255 / 100))
+}
+
+/** @type {(value: RegExp) => (value: string) => boolean} Return a function that checks whether the expression exists in a value. */
+const createRegExpTest = Function.bind.bind(RegExp.prototype.test)
+
+/** Return whether the function name is `hsl()`, `hsla()`, `rgb()`, or `rgba()`. */
+const isColorFunctionName = createRegExpTest(/^(hsl|rgb)a?$/i)
+
+/** Return whether the function name is `hsl()` or `hsla()`. */
+const isHslColorFunctionName = createRegExpTest(/^hsla?$/i)
+
+/** Return whether the function name is `rgb()` or `rgba()`. */
+const isRgbColorFunctionName = createRegExpTest(/^rgba?$/i)
+
+/** Return whether the function name is `calc`. */
+const isCalcFunctionName = createRegExpTest(/^calc$/i)
+
+/** Return whether the unit is alpha-like. */
+const isAlphaLikeUnit = createRegExpTest(/^%?$/i)
+
+/** Return whether the unit is hue-like. */
+const isHueLikeUnit = createRegExpTest(/^(deg|grad|rad|turn)?$/i)
+
+/** @type {(node: CSSNumber) => boolean} Return whether the node is an Alpha-like unit. */
+const isAlphaValue = node => isCalc(node) || node.type === 'numeric' && isAlphaLikeUnit(node.unit)
+
+/** @type {(node: CSSFunction) => boolean} Return whether the node is a calc() function. */
+const isCalc = node => node.type === 'func' && isCalcFunctionName(node.name)
+
+/** @type {(node: CSSNumber) => boolean} Return whether the node is a Hue-like unit. */
+const isHue = node => isCalc(node) || node.type === 'numeric' && isHueLikeUnit(node.unit)
+
+/** @type {(node: CSSNumber) => boolean} Return whether the node is a Number unit. */
+const isNumber = node => isCalc(node) || node.type === 'numeric' && node.unit === ''
+
+/** @type {(node: CSSNumber) => boolean} Return whether the node is a Percentage unit. */
+const isPercentage = node => isCalc(node) || node.type === 'numeric' && (node.unit === '%' || node.unit === '' && node.value === '0')
+
+/** @type {(node: CSSOperator) => boolean} Return whether the node is a Slash delimiter. */
+const isSlash = node => node.type === 'operator' && node.value === '/'
+
+/** @type {(nodes: Node[]) => boolean} Return whether a set of nodes is an hsl() function. */
+const isHslFunctionContents = nodes => nodes.every(
+	(node, index) => typeof hslFunctionContents[index] === 'function' && hslFunctionContents[index](node)
+)
+
+/** Set of nodes in a lab() function. */
+const hslFunctionContents = [isHue, isPercentage, isPercentage, isSlash, isAlphaValue]
+
+/** @type {(nodes: Node[]) => boolean} Return whether a set of nodes is an rgb() function with numbers. */
+const isRgbNumberFunctionContents = nodes => nodes.every(
+	(node, index) => typeof rgbNumberFunctionContents[index] === 'function' && rgbNumberFunctionContents[index](node)
+)
+
+/** Set of nodes in a rgb() function with numbers. */
+const rgbNumberFunctionContents = [isNumber, isNumber, isNumber, isSlash, isAlphaValue]
+
+/** @type {(nodes: Node[]) => boolean} Return whether a set of nodes is an rgb() function with percentages. */
+const isRgbPercentFunctionContents = nodes => nodes.every(
+	(node, index) => typeof rgbPercentFunctionContents[index] === 'function' && rgbPercentFunctionContents[index](node)
+)
+
+/** Set of nodes in a rgb() function with percentages. */
+const rgbPercentFunctionContents = [isPercentage, isPercentage, isPercentage, isSlash, isAlphaValue]
+
+/** @typedef {import('postcss-values-parser').Func} CSSFunction */
+/** @typedef {import('postcss-values-parser').Node} CSSNode */
+/** @typedef {import('postcss-values-parser').Numeric} CSSNumber */
+/** @typedef {import('postcss-values-parser').Operator} CSSOperator */
+/** @typedef {import('postcss-values-parser').Punctuation} CSSPunctuation */
diff --git a/src/options.js b/src/options.js
new file mode 100644
index 0000000..0227109
--- /dev/null
+++ b/src/options.js
@@ -0,0 +1,4 @@
+export default {
+	/** Whether to preserve the original functional color declaration. */
+	preserve: false
+}
diff --git a/test/basic.expect.css b/test/basic.expect.css
index 1da2148..1ae39c6 100644
--- a/test/basic.expect.css
+++ b/test/basic.expect.css
@@ -1,20 +1,20 @@
 .test-rgb {
 	color: rgb(178, 34, 34);
-	color: rgba(178, 34, 34, 1);
+	color: rgb(178, 34, 34);
 	color: rgba(178, 34, 34, .5);
-	color: rgba(178, 34, 34, 1);
+	color: rgb(178, 34, 34);
 	color: rgba(178, 34, 34, 0.5);
 }
 
 .test-rgba {
 	color: rgb(178, 34, 34);
-	color: rgba(178, 34, 34, 1);
+	color: rgb(178, 34, 34);
 	color: rgba(178, 34, 34, .5);
 }
 
 .test-rgb-percentages {
 	color: rgb(178, 34, 34);
-	color: rgba(178, 34, 34, 1);
+	color: rgb(178, 34, 34);
 	color: rgba(178, 34, 34, 0.5);
 }
 
@@ -22,18 +22,18 @@
 	color: hsl(0, 0%, 100%);
 	color: hsl(120deg, 100%, 50%);
 	color: hsl(120, 100%, 50%);
-	color: hsla(120, 100%, 50%, 1);
+	color: hsl(120, 100%, 50%);
 	color: hsla(120, 100%, 50%, .5);
-	color: hsla(120, 100%, 50%, 1);
+	color: hsl(120, 100%, 50%);
 	color: hsla(120, 100%, 50%, 0.5);
 	color: hsl(120deg, 100%, 50%);
 }
 
 .test-hsla {
 	color: hsl(120, 100%, 50%);
-	color: hsla(120, 100%, 50%, 1);
+	color: hsl(120, 100%, 50%);
 	color: hsla(120, 100%, 50%, .5);
-	color: hsla(120, 100%, 50%, 1);
+	color: hsl(120, 100%, 50%);
 	color: hsla(120, 100%, 50%, 0.5);
 }
 
diff --git a/test/basic.preserve-true.expect.css b/test/basic.preserve-true.expect.css
index 90a63f4..7e26fe0 100644
--- a/test/basic.preserve-true.expect.css
+++ b/test/basic.preserve-true.expect.css
@@ -1,11 +1,11 @@
 .test-rgb {
 	color: rgb(178, 34, 34);
 	color: rgb(178 34 34);
-	color: rgba(178, 34, 34, 1);
+	color: rgb(178, 34, 34);
 	color: rgb(178 34 34 / 1);
 	color: rgba(178, 34, 34, .5);
 	color: rgb(178 34 34 / .5);
-	color: rgba(178, 34, 34, 1);
+	color: rgb(178, 34, 34);
 	color: rgb(178 34 34 / 100%);
 	color: rgba(178, 34, 34, 0.5);
 	color: rgb(178 34 34 / 50%);
@@ -14,7 +14,7 @@
 .test-rgba {
 	color: rgb(178, 34, 34);
 	color: rgba(178 34 34);
-	color: rgba(178, 34, 34, 1);
+	color: rgb(178, 34, 34);
 	color: rgba(178 34 34 / 1);
 	color: rgba(178, 34, 34, .5);
 	color: rgba(178 34 34 / .5);
@@ -23,7 +23,7 @@
 .test-rgb-percentages {
 	color: rgb(178, 34, 34);
 	color: rgba(70% 13.5% 13.5%);
-	color: rgba(178, 34, 34, 1);
+	color: rgb(178, 34, 34);
 	color: rgba(70% 13.5% 13.5% / 100%);
 	color: rgba(178, 34, 34, 0.5);
 	color: rgba(70% 13.5% 13.5% / 50%);
@@ -36,11 +36,11 @@
 	color: hsl(120deg 100% 50%);
 	color: hsl(120, 100%, 50%);
 	color: hsl(120 100% 50%);
-	color: hsla(120, 100%, 50%, 1);
+	color: hsl(120, 100%, 50%);
 	color: hsl(120 100% 50% / 1);
 	color: hsla(120, 100%, 50%, .5);
 	color: hsl(120 100% 50% / .5);
-	color: hsla(120, 100%, 50%, 1);
+	color: hsl(120, 100%, 50%);
 	color: hsl(120 100% 50% / 100%);
 	color: hsla(120, 100%, 50%, 0.5);
 	color: hsl(120 100% 50% / 50%);
@@ -51,11 +51,11 @@
 .test-hsla {
 	color: hsl(120, 100%, 50%);
 	color: hsla(120 100% 50%);
-	color: hsla(120, 100%, 50%, 1);
+	color: hsl(120, 100%, 50%);
 	color: hsla(120 100% 50% / 1);
 	color: hsla(120, 100%, 50%, .5);
 	color: hsla(120 100% 50% / .5);
-	color: hsla(120, 100%, 50%, 1);
+	color: hsl(120, 100%, 50%);
 	color: hsla(120 100% 50% / 100%);
 	color: hsla(120, 100%, 50%, 0.5);
 	color: hsla(120 100% 50% / 50%);
-- 
2.33.1

