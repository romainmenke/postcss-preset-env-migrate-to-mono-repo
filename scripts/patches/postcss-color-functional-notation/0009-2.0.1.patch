From 849b9606b1461c8b07972d2222020913b1872b0e Mon Sep 17 00:00:00 2001
From: Jonathan Neal <jonathantneal@hotmail.com>
Date: Tue, 18 Sep 2018 10:44:43 -0400
Subject: [PATCH 09/22] 2.0.1

---
 CHANGELOG.md |  4 ++++
 index.js     | 46 ++++++++++++++++++++++++----------------------
 package.json | 10 +++++-----
 3 files changed, 33 insertions(+), 27 deletions(-)

diff --git a/CHANGELOG.md b/CHANGELOG.md
index e94f937..90dfa10 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,5 +1,9 @@
 # Changes to PostCSS Color Functional Notation
 
+### 2.0.1 (September 18, 2018)
+
+- Updated: PostCSS Values Parser 2 (patch for this project)
+
 ### 2.0.0 (September 17, 2018)
 
 - Updated: Support for PostCSS v7+
diff --git a/index.js b/index.js
index 3769674..66f0bc4 100644
--- a/index.js
+++ b/index.js
@@ -1,17 +1,17 @@
 import postcss from 'postcss';
-import parser from 'postcss-values-parser';
+import valuesParser from 'postcss-values-parser';
 
 export default postcss.plugin('postcss-color-functional-notation', opts => {
 	const preserve = 'preserve' in Object(opts) ? Boolean(opts.preserve) : false;
 
 	return root => {
 		root.walkDecls(decl => {
-			const { value } = decl;
+			const { value: originalValue } = decl;
 
-			if (colorAnyRegExp.test(value)) {
-				const ast = parser(value).parse();
+			if (colorAnyRegExp.test(originalValue)) {
+				const valueAST = valuesParser(originalValue).parse();
 
-				ast.walkType('func', node => {
+				valueAST.walkType('func', node => {
 					if (colorRegExp.test(node.value)) {
 						const children = node.nodes.slice(1, -1);
 						const isFunctionalHSL = matchFunctionalHSL(node, children);
@@ -35,7 +35,7 @@ export default postcss.plugin('postcss-color-functional-notation', opts => {
 								node.value = node.value.slice(0, -1);
 							}
 
-							if (isSlash(slashNode)) {
+							if (slashNode && isSlash(slashNode)) {
 								slashNode.replaceWith( newComma() );
 							}
 
@@ -53,12 +53,14 @@ export default postcss.plugin('postcss-color-functional-notation', opts => {
 					}
 				});
 
-				const newValue = String(ast);
+				const modifiedValue = String(valueAST);
 
-				if (preserve) {
-					decl.cloneBefore({ value: newValue });
-				} else {
-					decl.value = newValue;
+				if (modifiedValue !== originalValue) {
+					if (preserve) {
+						decl.cloneBefore({ value: modifiedValue });
+					} else {
+						decl.value = modifiedValue;
+					}
 				}
 			}
 		});
@@ -74,16 +76,16 @@ const hslRgbFuncMatch = /^(hsl|rgb)$/i;
 const hslaRgbaFuncMatch = /^(hsla|rgba)$/i;
 const hueUnitMatch = /^(deg|grad|rad|turn)?$/i;
 const rgbishRegExp = /^rgba?$/i;
-const isAlphaValue = node => isCalc(node) || Object(node).type === 'number' && alphaUnitMatch.test(node.unit);
-const isCalc = node => Object(node).type === 'func' && calcFuncMatch.test(node.value);
-const isHue = node => isCalc(node) || Object(node).type === 'number' && hueUnitMatch.test(node.unit);
-const isNumber = node => isCalc(node) || Object(node).type === 'number' && node.unit === '';
-const isPercentage = node => isCalc(node) || Object(node).type === 'number' && (node.unit === '%' || node.unit === '' && node.value === '0');
-const isHslish = node => Object(node).type === 'func' && hslishRegExp.test(node.value);
-const isHslRgb = node => Object(node).type === 'func' && hslRgbFuncMatch.test(node.value);
-const isHslaRgba = node => Object(node).type === 'func' && hslaRgbaFuncMatch.test(node.value);
-const isRgbish = node => Object(node).type === 'func' && rgbishRegExp.test(node.value);
-const isSlash = node => Object(node).type === 'operator' && node.value === '/';
+const isAlphaValue = node => isCalc(node) || node.type === 'number' && alphaUnitMatch.test(node.unit);
+const isCalc = node => node.type === 'func' && calcFuncMatch.test(node.value);
+const isHue = node => isCalc(node) || node.type === 'number' && hueUnitMatch.test(node.unit);
+const isNumber = node => isCalc(node) || node.type === 'number' && node.unit === '';
+const isPercentage = node => isCalc(node) || node.type === 'number' && (node.unit === '%' || node.unit === '' && node.value === '0');
+const isHslish = node => node.type === 'func' && hslishRegExp.test(node.value);
+const isHslRgb = node => node.type === 'func' && hslRgbFuncMatch.test(node.value);
+const isHslaRgba = node => node.type === 'func' && hslaRgbaFuncMatch.test(node.value);
+const isRgbish = node => node.type === 'func' && rgbishRegExp.test(node.value);
+const isSlash = node => node.type === 'operator' && node.value === '/';
 const functionalHSLMatch = [isHue, isPercentage, isPercentage, isSlash, isAlphaValue];
 const functionalRGB1Match = [isNumber, isNumber, isNumber, isSlash, isAlphaValue];
 const functionalRGB2Match = [isPercentage, isPercentage, isPercentage, isSlash, isAlphaValue];
@@ -98,4 +100,4 @@ const matchFunctionalRGB2 = (node, children) => isRgbish(node) && children.every
 	(child, index) => typeof functionalRGB2Match[index] === 'function' && functionalRGB2Match[index](child)
 );
 
-const newComma = () => parser.comma({ value: ',' })
+const newComma = () => valuesParser.comma({ value: ',' })
diff --git a/package.json b/package.json
index d2ed563..96fda45 100644
--- a/package.json
+++ b/package.json
@@ -1,6 +1,6 @@
 {
   "name": "postcss-color-functional-notation",
-  "version": "2.0.0",
+  "version": "2.0.1",
   "description": "Use space and slash separated color notation in CSS",
   "author": "Jonathan Neal <jonathantneal@hotmail.com>",
   "license": "CC0-1.0",
@@ -28,18 +28,18 @@
   },
   "dependencies": {
     "postcss": "^7.0.2",
-    "postcss-values-parser": "^1.5.0"
+    "postcss-values-parser": "^2.0.0"
   },
   "devDependencies": {
-    "@babel/core": "^7.0.0",
-    "@babel/preset-env": "^7.0.0",
+    "@babel/core": "^7.1.0",
+    "@babel/preset-env": "^7.1.0",
     "babel-eslint": "^9.0.0",
     "eslint": "^5.6.0",
     "eslint-config-dev": "^2.0.0",
     "postcss-tape": "^2.2.0",
     "pre-commit": "^1.2.2",
     "rollup": "^0.66.0",
-    "rollup-plugin-babel": "^4.0.1"
+    "rollup-plugin-babel": "^4.0.3"
   },
   "eslintConfig": {
     "extends": "dev",
-- 
2.33.1

