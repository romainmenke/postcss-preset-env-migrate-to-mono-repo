From 3cbe4737f1bb502bb8ad309417913baf52113c90 Mon Sep 17 00:00:00 2001
From: Jonathan Neal <jonathantneal@hotmail.com>
Date: Sun, 25 Nov 2018 15:32:46 -0500
Subject: [PATCH 05/17] 0.6.0

---
 CHANGELOG.md   |  4 ++++
 README.md      |  2 +-
 package.json   |  2 +-
 src/browser.js | 42 +++++++++++++++++++++++-------------------
 4 files changed, 29 insertions(+), 21 deletions(-)

diff --git a/CHANGELOG.md b/CHANGELOG.md
index dc64a9b..ef350d1 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,5 +1,9 @@
 # Changes to CSS Has Pseudo
 
+### 0.6.0 (November 25, 2018)
+
+- Fixed an issue where nested rules were not supported
+
 ### 0.5.0 (November 21, 2018)
 
 - Further optimize script; from 775 bytes to 757 bytes
diff --git a/README.md b/README.md
index b68ebc8..5e6676e 100644
--- a/README.md
+++ b/README.md
@@ -41,7 +41,7 @@ Next, use your transformed CSS with this script:
 <script>cssHasPseudo(document)</script>
 ```
 
-That’s it. The script is 757 bytes and works in all browsers, including
+That’s it. The script is 765 bytes and works in all browsers, including
 Internet Explorer 11. With a [Mutation Observer polyfill], the script will work
 down to Internet Explorer 9.
 
diff --git a/package.json b/package.json
index 8ff4f13..414bd53 100644
--- a/package.json
+++ b/package.json
@@ -1,6 +1,6 @@
 {
   "name": "css-has-pseudo",
-  "version": "0.5.0",
+  "version": "0.6.0",
   "description": "Style elements relative to other elements in CSS",
   "author": "Jonathan Neal <jonathantneal@hotmail.com>",
   "license": "CC0-1.0",
diff --git a/src/browser.js b/src/browser.js
index 1976a14..a9233cd 100644
--- a/src/browser.js
+++ b/src/browser.js
@@ -97,25 +97,29 @@ export default function cssHasPseudo(document) {
 	// walk a stylesheet to collect observed css rules
 	function walkStyleSheet(styleSheet) {
 		// walk a css rule to collect observed css rules
-		Array.prototype.forEach.call(styleSheet.cssRules, rule => {
-			// decode the selector text in all browsers to:
-			// [1] = :scope, [2] = :not(:has), [3] = :has relative, [4] = :scope relative
-			const selectors = decodeURIComponent(rule.selectorText.replace(/\\(.)/g, '$1')).match(/^(.*?)\[:(not-)?has\((.+?)\)\](.*?)$/);
-
-			if (selectors) {
-				const attributeName = ':' + (selectors[2] ? 'not-' : '') + 'has(' +
-					// encode a :has() pseudo selector as an attribute name
-					selectors[3].replace(/%3A/g, ':').replace(/%5B/g, '[').replace(/%5D/g, ']').replace(/%2C/g, ',') +
-				')';
-
-				observedItems.push({
-					rule,
-					scopeSelector: selectors[1],
-					isNot: selectors[2],
-					relativeSelectors: selectors[3].split(/\s*,\s*/),
-					attributeName,
-					nodes: []
-				});
+		Array.prototype.forEach.call(styleSheet.cssRules || [], rule => {
+			if (rule.selectorText) {
+				// decode the selector text in all browsers to:
+				// [1] = :scope, [2] = :not(:has), [3] = :has relative, [4] = :scope relative
+				const selectors = decodeURIComponent(rule.selectorText.replace(/\\(.)/g, '$1')).match(/^(.*?)\[:(not-)?has\((.+?)\)\](.*?)$/);
+
+				if (selectors) {
+					const attributeName = ':' + (selectors[2] ? 'not-' : '') + 'has(' +
+						// encode a :has() pseudo selector as an attribute name
+						selectors[3].replace(/%3A/g, ':').replace(/%5B/g, '[').replace(/%5D/g, ']').replace(/%2C/g, ',') +
+					')';
+
+					observedItems.push({
+						rule,
+						scopeSelector: selectors[1],
+						isNot: selectors[2],
+						relativeSelectors: selectors[3].split(/\s*,\s*/),
+						attributeName,
+						nodes: []
+					});
+				}
+			} else {
+				walkStyleSheet(rule);
 			}
 		});
 	}
-- 
2.33.1

