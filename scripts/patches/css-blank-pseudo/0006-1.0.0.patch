From 2cfe8acfbb1f449b54ceb0d23211456f95aba400 Mon Sep 17 00:00:00 2001
From: Jonathan Neal <jonathantneal@hotmail.com>
Date: Mon, 10 Jun 2019 08:10:23 -0400
Subject: [PATCH 06/13] 1.0.0

---
 .gitignore            | 16 +++++--------
 .rollup.js            | 16 ++++++-------
 .tape.js              | 28 ++++++++++------------
 .travis.yml           |  2 +-
 CHANGELOG.md          |  5 ++++
 package.json          | 56 +++++++++++++++++++++++++++----------------
 src/browser-legacy.js | 12 +++++-----
 src/browser.js        |  8 +++----
 src/cli.js            | 10 ++++----
 9 files changed, 83 insertions(+), 70 deletions(-)

diff --git a/.gitignore b/.gitignore
index b639672..7d11b33 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1,18 +1,14 @@
 node_modules
-/browser.js*
-/browser-legacy.js*
-/cli.js*
-/index.js*
-/index.mjs*
-/legacy.js*
-/legacy.mjs*
-/postcss.js*
-/postcss.mjs*
+/browser.*
+/browser-legacy.*
+/cli.*
+/index.*
+/legacy.*
+/postcss.*
 package-lock.json
 *.log*
 *.result.css
 .*
-!.appveyor.yml
 !.editorconfig
 !.gitignore
 !.rollup.js
diff --git a/.rollup.js b/.rollup.js
index c6a9df9..2d66c0f 100644
--- a/.rollup.js
+++ b/.rollup.js
@@ -5,15 +5,15 @@ const isBrowser = String(process.env.NODE_ENV).includes('browser');
 const isLegacy = String(process.env.NODE_ENV).includes('legacy');
 const isCLI = String(process.env.NODE_ENV).includes('cli');
 const isPostCSS = String(process.env.NODE_ENV).includes('postcss');
-const targets = isCLI || isPostCSS || !isBrowser ? { node: 6 } : 'last 2 versions, not dead';
+const targets = isCLI || isPostCSS || !isBrowser ? { node: 8 } : 'last 2 versions, not dead';
 
 const input = `src/${isCLI ? 'cli' : isPostCSS ? 'postcss' : isLegacy ? 'browser-legacy' : 'browser'}.js`;
 const output = isCLI
-	? { file: 'cli.js', format: 'cjs' }
+	? { file: 'cli.js', format: 'cjs', sourcemap: true, strict: false }
 : isBrowser && isLegacy
-	? { file: 'browser-legacy.js', format: 'cjs' }
+	? { file: 'browser-legacy.js', format: 'cjs', sourcemap: true, strict: false }
 : isBrowser
-	? { file: 'browser.js', format: 'cjs' }
+	? { file: 'browser.js', format: 'cjs', sourcemap: true, strict: false }
 : isPostCSS
 	? [
 	{ file: 'postcss.js', format: 'cjs', sourcemap: true },
@@ -46,10 +46,10 @@ const plugins = [
 
 export default { input, output, plugins };
 
-function addHashBang() {
+function addHashBang () {
 	return {
 		name: 'add-hash-bang',
-		renderChunk(code) {
+		renderChunk (code) {
 			const updatedCode = `#!/usr/bin/env node\n\n${code}`;
 
 			return updatedCode;
@@ -57,10 +57,10 @@ function addHashBang() {
 	};
 }
 
-function trimContentForBrowser() {
+function trimContentForBrowser () {
 	return {
 		name: 'trim-content-for-browser',
-		renderChunk(code) {
+		renderChunk (code) {
 			const updatedCode = code
 				.replace(/'use strict';\n*/, '')
 				.replace(/\n*module\.exports = cssBlankPseudo;/, '');
diff --git a/.tape.js b/.tape.js
index 66730ed..c5d27e1 100644
--- a/.tape.js
+++ b/.tape.js
@@ -1,19 +1,17 @@
 module.exports = {
-	'css-blank-pseudo': {
-		'basic': {
-			message: 'supports basic usage'
-		},
-		'basic:replacewith': {
-			message: 'supports { replaceWith: ".css-blank" } usage',
-			options: {
-				replaceWith: '.css-blank'
-			}
-		},
-		'basic:preserve': {
-			message: 'supports { preserve: false } usage',
-			options: {
-				preserve: false
-			}
+	'basic': {
+		message: 'supports basic usage'
+	},
+	'basic:replacewith': {
+		message: 'supports { replaceWith: ".css-blank" } usage',
+		options: {
+			replaceWith: '.css-blank'
+		}
+	},
+	'basic:preserve': {
+		message: 'supports { preserve: false } usage',
+		options: {
+			preserve: false
 		}
 	}
 };
diff --git a/.travis.yml b/.travis.yml
index e1f11a5..6ebed1d 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -3,7 +3,7 @@
 language: node_js
 
 node_js:
-  - 6
+  - 8
 
 install:
   - npm install --ignore-scripts
diff --git a/CHANGELOG.md b/CHANGELOG.md
index 6f846bb..ec2b2c0 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,5 +1,10 @@
 # Changes to CSS Blank Pseudo
 
+### 1.0.0 (June 10, 2019)
+
+- Updated: `postcss` to 7.0.16 (patch)
+- Updated: Node 8+ compatibility (major)
+
 ### 0.1.4 (November 17, 2018)
 
 - Update documentation
diff --git a/package.json b/package.json
index 2e05ff9..166f6ed 100644
--- a/package.json
+++ b/package.json
@@ -1,6 +1,6 @@
 {
   "name": "css-blank-pseudo",
-  "version": "0.1.4",
+  "version": "1.0.0",
   "description": "Style form elements when they are empty",
   "author": "Jonathan Neal <jonathantneal@hotmail.com>",
   "license": "CC0-1.0",
@@ -31,39 +31,53 @@
   ],
   "scripts": {
     "build": "npm run build:browser && npm run build:cli && npm run build:node && npm run build:postcss",
-    "build:browser": "cross-env NODE_ENV=browser rollup -c .rollup.js --silent && cross-env NODE_ENV=browser:legacy rollup -c .rollup.js --silent",
-    "build:cli": "cross-env NODE_ENV=cli rollup -c .rollup.js --silent",
-    "build:postcss": "cross-env NODE_ENV=postcss rollup -c .rollup.js --silent",
-    "build:node": "rollup -c .rollup.js --silent && cross-env NODE_ENV=legacy rollup -c .rollup.js --silent",
-    "prepublishOnly": "npm run build && npm test",
-    "pretest": "npm run build:postcss",
+    "build:browser": "cross-env NODE_ENV=browser rollup --config .rollup.js --silent && cross-env NODE_ENV=browser:legacy rollup --config .rollup.js --silent",
+    "build:cli": "cross-env NODE_ENV=cli rollup --config .rollup.js --silent",
+    "build:postcss": "cross-env NODE_ENV=postcss rollup --config .rollup.js --silent",
+    "build:node": "rollup --config .rollup.js --silent && cross-env NODE_ENV=legacy rollup --config .rollup.js --silent",
+    "prepublishOnly": "npm test && npm run build",
     "pretest:postcss": "npm run build:postcss",
     "test": "npm run test:js && npm run test:postcss",
-    "test:js": "eslint src/*.js --cache --ignore-path .gitignore --quiet",
-    "test:postcss": "postcss-tape --plugin=postcss.js"
+    "test:js": "eslint src/{*,**/*}.js --cache --ignore-path .gitignore --quiet",
+    "test:postcss": "postcss-tape --plugin postcss.js"
   },
   "engines": {
-    "node": ">=6.0.0"
+    "node": ">=8.0.0"
   },
   "dependencies": {
-    "postcss": "^7.0.5"
+    "postcss": "^7.0.17"
   },
   "devDependencies": {
-    "@babel/core": "^7.1.6",
-    "@babel/preset-env": "^7.1.6",
+    "@babel/core": "^7.4.5",
+    "@babel/preset-env": "^7.4.5",
     "babel-eslint": "^10.0.1",
     "cross-env": "^5.2.0",
-    "eslint": "^5.9.0",
-    "eslint-config-dev": "2.0.0",
-    "postcss-tape": "^2.2.0",
+    "eslint": "^5.16.0",
+    "postcss-tape": "^5.0.0",
     "pre-commit": "^1.2.2",
-    "rollup": "^0.67.3",
-    "rollup-plugin-babel": "^4.0.3",
-    "rollup-plugin-terser": "^3.0.0"
+    "rollup": "^1.14.6",
+    "rollup-plugin-babel": "^4.3.2",
+    "rollup-plugin-terser": "^5.0.0"
   },
   "eslintConfig": {
-    "extends": "dev",
-    "parser": "babel-eslint"
+    "env": {
+      "browser": true,
+      "es6": true,
+      "node": true
+    },
+    "extends": "eslint:recommended",
+    "parser": "babel-eslint",
+    "parserOptions": {
+      "ecmaVersion": 2018,
+      "impliedStrict": true,
+      "sourceType": "module"
+    },
+    "root": true,
+    "rules": {
+      "no-console": [
+        0
+      ]
+    }
   },
   "keywords": [
     "postcss",
diff --git a/src/browser-legacy.js b/src/browser-legacy.js
index 07da534..25724de 100644
--- a/src/browser-legacy.js
+++ b/src/browser-legacy.js
@@ -1,4 +1,4 @@
-export default function cssBlankPseudo(document, opts) {
+export default function cssBlankPseudo (document, opts) {
 	// configuration
 	const className = Object(opts).className;
 	const attr = Object(opts).attr || 'blank';
@@ -72,7 +72,7 @@ export default function cssBlankPseudo(document, opts) {
 	}).observe(document, { childList: true, subtree: true });
 
 	// update a form control element’s css-blank attribute
-	function configureCssBlankAttribute() {
+	function configureCssBlankAttribute () {
 		if (this.value || this.nodeName === 'SELECT' && this.options[this.selectedIndex].value) {
 			if (attr) {
 				this.removeAttribute(attr);
@@ -94,11 +94,11 @@ export default function cssBlankPseudo(document, opts) {
 	}
 
 	// observe changes to the "value" property on an HTML Element
-	function observeValueOfHTMLElement(HTMLElement) {
+	function observeValueOfHTMLElement (HTMLElement) {
 		const descriptor = Object.getOwnPropertyDescriptor(HTMLElement.prototype, 'value');
 		const nativeSet = descriptor.set;
 
-		descriptor.set = function set(value) { // eslint-disable-line no-unused-vars
+		descriptor.set = function set (value) { // eslint-disable-line no-unused-vars
 			nativeSet.apply(this, arguments);
 
 			configureCssBlankAttribute.apply(this);
@@ -108,11 +108,11 @@ export default function cssBlankPseudo(document, opts) {
 	}
 
 	// observe changes to the "selected" property on an HTML Element
-	function observeSelectedOfHTMLElement(HTMLElement) {
+	function observeSelectedOfHTMLElement (HTMLElement) {
 		const descriptor = Object.getOwnPropertyDescriptor(HTMLElement.prototype, 'selected');
 		const nativeSet = descriptor.set;
 
-		descriptor.set = function set(value) { // eslint-disable-line no-unused-vars
+		descriptor.set = function set (value) { // eslint-disable-line no-unused-vars
 			nativeSet.apply(this, arguments);
 
 			const event = document.createEvent('Event');
diff --git a/src/browser.js b/src/browser.js
index adcbd10..f6a5ba3 100644
--- a/src/browser.js
+++ b/src/browser.js
@@ -1,4 +1,4 @@
-export default function cssBlankPseudo(document, opts) {
+export default function cssBlankPseudo (document, opts) {
 	// configuration
 	const className = Object(opts).className;
 	const attr = Object(opts).attr || 'blank';
@@ -58,7 +58,7 @@ export default function cssBlankPseudo(document, opts) {
 	}).observe(document, { childList: true, subtree: true });
 
 	// update a form control element’s css-blank attribute
-	function configureCssBlankAttribute() {
+	function configureCssBlankAttribute () {
 		if (this.value) {
 			if (attr) {
 				this.removeAttribute(attr);
@@ -80,11 +80,11 @@ export default function cssBlankPseudo(document, opts) {
 	}
 
 	// observe changes to the "value" property on an HTML Element
-	function observeValueOfHTMLElement(HTMLElement) {
+	function observeValueOfHTMLElement (HTMLElement) {
 		const descriptor = Object.getOwnPropertyDescriptor(HTMLElement.prototype, 'value');
 		const nativeSet = descriptor.set;
 
-		descriptor.set = function set(value) { // eslint-disable-line no-unused-vars
+		descriptor.set = function set (value) { // eslint-disable-line no-unused-vars
 			nativeSet.apply(this, arguments);
 
 			configureCssBlankAttribute.apply(this);
diff --git a/src/cli.js b/src/cli.js
index 60f679b..5c24728 100644
--- a/src/cli.js
+++ b/src/cli.js
@@ -14,7 +14,7 @@ if (process.argv.length < 3) {
 }
 
 // get process and plugin options from the command line
-const fileRegExp = /^[\w\/.]+$/;
+const fileRegExp = /^[\w/.]+$/;
 const argRegExp = /^--(\w+)=("|')?(.+)\2$/;
 const relaxedJsonPropRegExp = /(['"])?([a-z0-9A-Z_]+)(['"])?:/g;
 const relaxedJsonValueRegExp = /("[a-z0-9A-Z_]+":\s*)'?([A-z0-9]+)'?([,}])/g;
@@ -70,7 +70,7 @@ const argo = process.argv.slice(2).reduce(
 	}
 );
 
-function readFile(pathname) {
+function readFile (pathname) {
 	return new Promise((resolve, reject) => {
 		fs.readFile(pathname, 'utf8', (error, data) => {
 			if (error) {
@@ -82,7 +82,7 @@ function readFile(pathname) {
 	});
 }
 
-function writeFile(pathname, data) {
+function writeFile (pathname, data) {
 	return new Promise((resolve, reject) => {
 		fs.writeFile(pathname, data, (error, content) => {
 			if (error) {
@@ -94,7 +94,7 @@ function writeFile(pathname, data) {
 	});
 }
 
-function getStdin() {
+function getStdin () {
 	return new Promise(resolve => {
 		let data = '';
 
@@ -106,7 +106,7 @@ function getStdin() {
 			process.stdin.on('readable', () => {
 				let chunk;
 
-				while (chunk = process.stdin.read()) {
+				while ((chunk = process.stdin.read())) {
 					data += chunk;
 				}
 			});
-- 
2.33.1

