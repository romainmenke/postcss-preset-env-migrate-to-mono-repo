From a96a66012344e922399107fd0770f75672b608a2 Mon Sep 17 00:00:00 2001
From: Maxime Thirouin <m@moox.io>
Date: Tue, 25 Aug 2015 07:23:03 +0200
Subject: [PATCH 48/69] 3.0.0 (switch to postcss 5.x)

---
 .eslintrc     | 15 ++++++++++-----
 CHANGELOG.md  |  5 +++++
 package.json  | 16 +++++-----------
 src/index.js  | 10 +++++-----
 test/index.js |  8 ++++----
 5 files changed, 29 insertions(+), 25 deletions(-)

diff --git a/.eslintrc b/.eslintrc
index cb88f61..db21f05 100644
--- a/.eslintrc
+++ b/.eslintrc
@@ -2,6 +2,9 @@
 # babel support more syntax stuff than eslint for now
 parser: babel-eslint
 
+root: true
+extends: eslint:recommended
+
 ecmaFeatures:
   modules: true
 
@@ -20,18 +23,20 @@ rules:
   brace-style: [2, "stroustrup"]
   comma-dangle: [2, "always-multiline"]
   comma-style: [2, "last"]
-  computed-property-spacing: [2, "never"]
   dot-location: [2, "property"]
 
   one-var: [2, "never"]
-  #no-var: [2]
+  no-var: [2]
   prefer-const: [2]
   no-bitwise: [2]
 
-  object-shorthand: [2, "methods"]
+  object-curly-spacing: [2, "never"]
+  array-bracket-spacing: [2, "never"]
+  computed-property-spacing: [2, "never"]
+
+  space-unary-ops: [2, {"words": true, "nonwords": false}]
   space-after-keywords: [2, "always"]
   space-before-blocks: [2, "always"]
   space-before-function-paren: [2, "never"]
-  space-in-brackets: [2, "never"]
   space-in-parens: [2, "never"]
-  spaced-line-comment: [2, "always"]
+  spaced-comment: [2, "always"]
diff --git a/CHANGELOG.md b/CHANGELOG.md
index 3fad364..53643bc 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,3 +1,8 @@
+# 3.0.0 - 2015-08-25
+
+- Removed: compatibility with postcss v4.x
+- Added: compatibility with postcss v5.x
+
 # 2.3.0 - 2015-07-14
 
 * Fixed: Nested/mixed selectors now works correctly
diff --git a/package.json b/package.json
index e4a37ac..12c204c 100644
--- a/package.json
+++ b/package.json
@@ -1,6 +1,6 @@
 {
   "name": "postcss-custom-selectors",
-  "version": "2.3.0",
+  "version": "3.0.0",
   "description": "PostCSS plugin to transform W3C CSS Extensions(Custom Selectors) to more compatible CSS",
   "keywords": [
     "postcss",
@@ -18,27 +18,21 @@
     "type": "git",
     "url": "https://github.com/postcss/postcss-custom-selectors.git"
   },
-  "homepage": "https://github.com/postcss/postcss-custom-selectors",
-  "bugs": {
-    "url": "https://github.com/postcss/postcss-custom-selectors/issues"
-  },
+  "main": "dist/index.js",
   "files": [
-    "CHANGELOG.md",
-    "LICENSE",
     "dist",
     "README-zh.md"
   ],
-  "main": "dist/index.js",
   "dependencies": {
     "balanced-match": "^0.2.0",
-    "postcss": "^4.1.7",
-    "postcss-selector-matches": "^1.2.1"
+    "postcss": "^5.0.0",
+    "postcss-selector-matches": "^2.0.0"
   },
   "devDependencies": {
     "babel": "^5.5.8",
     "babel-eslint": "^3.1.15",
     "babel-tape-runner": "^1.1.0",
-    "eslint": "^0.23.0",
+    "eslint": "^1.0.0",
     "tape": "^4.0.0"
   },
   "scripts": {
diff --git a/src/index.js b/src/index.js
index 19c7121..bed1731 100644
--- a/src/index.js
+++ b/src/index.js
@@ -18,8 +18,8 @@ export default postcss.plugin("postcss-custom-selectors", function(options) {
 
   const transformMatchesOnRule = transformMatches
     ? (rule) => replaceRuleSelector(rule, {
-        lineBreak,
-      })
+      lineBreak,
+    })
     : (rule) => rule.selector
 
   return function(css, result) {
@@ -27,7 +27,7 @@ export default postcss.plugin("postcss-custom-selectors", function(options) {
     const customSelectors = {}
 
     // first, read custom selectors
-    css.eachAtRule(function(rule) {
+    css.walkAtRules(function(rule) {
       if (rule.name !== "custom-selector") {
         return
       }
@@ -47,7 +47,7 @@ export default postcss.plugin("postcss-custom-selectors", function(options) {
     })
 
     // Convert those selectors to :matches()
-    css.eachRule(function(rule) {
+    css.walkRules(function(rule) {
       if (rule.selector.indexOf(":--") > -1) {
         rule.selector = rule.selector.replace(
           CUSTOM_SELECTOR_RE,
@@ -71,7 +71,7 @@ export default postcss.plugin("postcss-custom-selectors", function(options) {
     })
 
     toRemove.forEach(function(rule) {
-      rule.removeSelf()
+      rule.remove()
     })
 
   }
diff --git a/test/index.js b/test/index.js
index 6f894ae..9c7fac8 100644
--- a/test/index.js
+++ b/test/index.js
@@ -1,6 +1,6 @@
-var test = require("tape")
-var postcss = require("postcss")
-var plugin = require("../src")
+import test from "tape"
+import postcss from "postcss"
+import plugin from "../src"
 
 function transform(input, opts = {}, postcssOpts = {}) {
   return postcss()
@@ -268,7 +268,7 @@ main #nav .bar + p {
     "should transform local extensions"
   )
 
-  var postcssPlugin = postcss().use(plugin())
+  const postcssPlugin = postcss().use(plugin())
   t.ok(
     postcssPlugin.process("@custom-selector :--foobar .foo;:--foobar{}").css,
     "should not create a memory"
-- 
2.35.1

