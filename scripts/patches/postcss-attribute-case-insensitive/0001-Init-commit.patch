From 8a8c258c04bd6224a0fb4cc0cde29736fb44a9aa Mon Sep 17 00:00:00 2001
From: Semigradsky <d.semigradsky@itransition.com>
Date: Wed, 10 Aug 2016 12:10:42 +0300
Subject: [PATCH 01/32] Init commit

---
 .babelrc      |  3 ++
 .editorconfig | 16 +++++++++
 .eslintrc     | 11 +++++++
 .gitignore    |  2 ++
 .npmignore    |  6 ++++
 .travis.yml   |  5 +++
 LICENSE       | 20 ++++++++++++
 README.md     | 21 ++++++++++++
 package.json  | 44 +++++++++++++++++++++++++
 src/index.js  | 89 +++++++++++++++++++++++++++++++++++++++++++++++++++
 10 files changed, 217 insertions(+)
 create mode 100644 .babelrc
 create mode 100644 .editorconfig
 create mode 100644 .eslintrc
 create mode 100644 .gitignore
 create mode 100644 .npmignore
 create mode 100644 .travis.yml
 create mode 100644 LICENSE
 create mode 100644 README.md
 create mode 100644 package.json
 create mode 100644 src/index.js

diff --git a/.babelrc b/.babelrc
new file mode 100644
index 0000000..7b37dd5
--- /dev/null
+++ b/.babelrc
@@ -0,0 +1,3 @@
+{
+	"presets": ["es2015"]
+}
diff --git a/.editorconfig b/.editorconfig
new file mode 100644
index 0000000..1e031cc
--- /dev/null
+++ b/.editorconfig
@@ -0,0 +1,16 @@
+# http://editorconfig.org
+root = true
+
+[*]
+indent_style = tab
+end_of_line = lf
+charset = utf-8
+trim_trailing_whitespace = true
+insert_final_newline = true
+
+[*.json]
+indent_style = space
+indent_size = 2
+
+[*.md]
+trim_trailing_whitespace = false
diff --git a/.eslintrc b/.eslintrc
new file mode 100644
index 0000000..6ffab65
--- /dev/null
+++ b/.eslintrc
@@ -0,0 +1,11 @@
+{
+  "extends": "airbnb-base",
+  "env": {
+    "mocha": true
+  },
+  "rules": {
+    "indent": [2, "tab"],
+    "no-param-reassign": [2, { "props": false }],
+    "comma-dangle": 0
+  }
+}
diff --git a/.gitignore b/.gitignore
new file mode 100644
index 0000000..b947077
--- /dev/null
+++ b/.gitignore
@@ -0,0 +1,2 @@
+node_modules/
+dist/
diff --git a/.npmignore b/.npmignore
new file mode 100644
index 0000000..f77ca0d
--- /dev/null
+++ b/.npmignore
@@ -0,0 +1,6 @@
+node_modules/
+.babelrc
+.editorconfig
+.eslintrc
+.gitignore
+.travis.yml
diff --git a/.travis.yml b/.travis.yml
new file mode 100644
index 0000000..2e7fd10
--- /dev/null
+++ b/.travis.yml
@@ -0,0 +1,5 @@
+language: node_js
+node_js:
+  - "6"
+  - "4"
+  - "0.12"
diff --git a/LICENSE b/LICENSE
new file mode 100644
index 0000000..6b6f39c
--- /dev/null
+++ b/LICENSE
@@ -0,0 +1,20 @@
+The MIT License (MIT)
+
+Copyright 2016 Dmitry Semigradsky <semigradskyd@gmail.com>
+
+Permission is hereby granted, free of charge, to any person obtaining a copy of
+this software and associated documentation files (the "Software"), to deal in
+the Software without restriction, including without limitation the rights to
+use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
+the Software, and to permit persons to whom the Software is furnished to do so,
+subject to the following conditions:
+
+The above copyright notice and this permission notice shall be included in all
+copies or substantial portions of the Software.
+
+THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
diff --git a/README.md b/README.md
new file mode 100644
index 0000000..743859b
--- /dev/null
+++ b/README.md
@@ -0,0 +1,21 @@
+# postcss-attribute-case-insensitive [![Build Status][ci-img]][ci]
+
+[PostCSS] plugin to support [case insensitive attributes](https://www.w3.org/TR/selectors4/#attribute-case).
+
+[PostCSS]: https://github.com/postcss/postcss
+[ci-img]:  https://travis-ci.org/Semigradsky/postcss-attribute-case-insensitive.svg
+[ci]:      https://travis-ci.org/Semigradsky/postcss-attribute-case-insensitive
+
+## Input
+```css
+[frame=hsides i] { border-style: solid none; }
+```
+
+
+## Output
+```css
+[frame=hsides],[frame=Hsides],[frame=hSides],[frame=HSides],[frame=hsIdes],[frame=HsIdes],[frame=hSIdes],[frame=HSIdes],[frame=hsiDes],[frame=HsiDes],[frame=hSiDes],[frame=HSiDes],[frame=hsIDes],[frame=HsIDes],[frame=hSIDes],[frame=HSIDes],[frame=hsidEs],[frame=HsidEs],[frame=hSidEs],[frame=HSidEs],[frame=hsIdEs],[frame=HsIdEs],[frame=hSIdEs],[frame=HSIdEs],[frame=hsiDEs],[frame=HsiDEs],[frame=hSiDEs],[frame=HSiDEs],[frame=hsIDEs],[frame=HsIDEs],[frame=hSIDEs],[frame=HSIDEs],[frame=hsideS],[frame=HsideS],[frame=hSideS],[frame=HSideS],[frame=hsIdeS],[frame=HsIdeS],[frame=hSIdeS],[frame=HSIdeS],[frame=hsiDeS],[frame=HsiDeS],[frame=hSiDeS],[frame=HSiDeS],[frame=hsIDeS],[frame=HsIDeS],[frame=hSIDeS],[frame=HSIDeS],[frame=hsidES],[frame=HsidES],[frame=hSidES],[frame=HSidES],[frame=hsIdES],[frame=HsIdES],[frame=hSIdES],[frame=HSIdES],[frame=hsiDES],[frame=HsiDES],[frame=hSiDES],[frame=HSiDES],[frame=hsIDES],[frame=HsIDES],[frame=hSIDES],[frame=HSIDES] { border-style: solid none; }
+```
+
+### Notes
+- As you see in example, it is not necessary to use this plugin with very long attributes.
diff --git a/package.json b/package.json
new file mode 100644
index 0000000..52e682e
--- /dev/null
+++ b/package.json
@@ -0,0 +1,44 @@
+{
+  "name": "postcss-attribute-case-insensitive",
+  "version": "0.0.0",
+  "description": "PostCSS plugin to support case insensitive attributes",
+  "main": "dist/index.js",
+  "scripts": {
+    "test": "eslint src && npm run publish && mocha --compilers js:babel-register",
+    "publish": "babel src --out-dir dist"
+  },
+  "repository": {
+    "type": "git",
+    "url": "git+https://github.com/Semigradsky/postcss-attribute-case-insensitive.git"
+  },
+  "keywords": [
+    "postcss",
+    "css",
+    "postcss-plugin",
+    "attribute",
+    "insensitive",
+    "sensitive",
+    "CSS4"
+  ],
+  "author": "Dmitry Semigradsky",
+  "license": "MIT",
+  "bugs": {
+    "url": "https://github.com/Semigradsky/postcss-attribute-case-insensitive/issues"
+  },
+  "homepage": "https://github.com/Semigradsky/postcss-attribute-case-insensitive#readme",
+  "devDependencies": {
+    "babel-cli": "^6.11.4",
+    "babel-eslint": "^6.1.2",
+    "babel-preset-es2015": "^6.9.0",
+    "babel-register": "^6.11.6",
+    "chai": "^3.5.0",
+    "eslint": "^3.2.2",
+    "eslint-config-airbnb-base": "^5.0.1",
+    "eslint-plugin-import": "^1.12.0",
+    "mocha": "^3.0.1"
+  },
+  "dependencies": {
+    "postcss": "^5.1.1",
+    "postcss-selector-parser": "^2.2.0"
+  }
+}
diff --git a/src/index.js b/src/index.js
new file mode 100644
index 0000000..1bb0a60
--- /dev/null
+++ b/src/index.js
@@ -0,0 +1,89 @@
+import postcss from 'postcss';
+import parser from 'postcss-selector-parser';
+
+function nodeIsInsensitiveAttribute(node) {
+	return node.type === 'attribute' && node.insensitive;
+}
+
+function selectorHasInsensitiveAttribute(selector) {
+	return selector.some(nodeIsInsensitiveAttribute);
+}
+
+function transformString(strings, charPos, string) {
+	const char = string.charAt(charPos);
+	if (char === '') {
+		return strings;
+	}
+
+	let newStrings = strings.map(x => x + char);
+	const upperChar = char.toLocaleUpperCase();
+
+	if (upperChar !== char) {
+		newStrings = newStrings.concat(strings.map(x => x + upperChar));
+	}
+
+	return transformString(newStrings, charPos + 1, string);
+}
+
+function createSensitiveAtributes(attribute) {
+	const attributes = transformString([''], 0, attribute.value);
+	return attributes.map(x => {
+		const newAttribute = attribute.clone({
+			value: x,
+			insensitive: false,
+			raws: {
+				insensitive: ''
+			}
+		});
+		return newAttribute;
+	});
+}
+
+function createNewSelectors(selector) {
+	let newSelectors = [parser.selector()];
+
+	selector.walk(node => {
+		if (!nodeIsInsensitiveAttribute(node)) {
+			newSelectors.forEach(newSelector => {
+				newSelector.append(node.clone());
+			});
+			return;
+		}
+
+		const sensitiveAttributes = createSensitiveAtributes(node);
+		const newSelectorsWithSensitiveAttributes = [];
+
+		sensitiveAttributes.forEach(newNode => {
+			newSelectors.forEach(newSelector => {
+				const newSelectorWithNewNode = newSelector.clone();
+				newSelectorWithNewNode.append(newNode);
+				newSelectorsWithSensitiveAttributes.push(newSelectorWithNewNode);
+			});
+		});
+
+		newSelectors = newSelectorsWithSensitiveAttributes;
+	});
+
+	return newSelectors;
+}
+
+function transform(selectors) {
+	let newSelectors = [];
+
+	selectors.each(selector => {
+		if (selectorHasInsensitiveAttribute(selector)) {
+			newSelectors = newSelectors.concat(createNewSelectors(selector));
+			selector.remove();
+		}
+	});
+
+	if (newSelectors.length) {
+		newSelectors.forEach(newSelector => selectors.append(newSelector));
+	}
+}
+
+export default postcss.plugin('postcss-attribute-case-insensitive', () => (css) => {
+	css.walkRules(rule => {
+		rule.selector = parser(transform).process(rule.selector).result;
+	});
+});
-- 
2.35.1

