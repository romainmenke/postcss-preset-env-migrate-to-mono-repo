From 0929148f04fff7d400e30d3cb1c6a0be961182e5 Mon Sep 17 00:00:00 2001
From: Jonathan Neal <jonathantneal@hotmail.com>
Date: Fri, 5 Oct 2018 17:24:06 -0400
Subject: [PATCH 55/62] 7.0.5

---
 .rollup.js                                    |  4 +-
 CHANGELOG.md                                  |  6 ++
 README.md                                     |  4 ++
 index.js                                      | 22 +++----
 ...om.js => get-custom-media-from-imports.js} | 58 ++++++++-----------
 ...to.js => write-custom-media-to-exports.js} | 28 ++++-----
 package.json                                  | 12 ++--
 7 files changed, 67 insertions(+), 67 deletions(-)
 rename lib/{import-from.js => get-custom-media-from-imports.js} (56%)
 rename lib/{export-to.js => write-custom-media-to-exports.js} (80%)

diff --git a/.rollup.js b/.rollup.js
index eab5c0d..3f28a55 100644
--- a/.rollup.js
+++ b/.rollup.js
@@ -3,8 +3,8 @@ import babel from 'rollup-plugin-babel';
 export default {
 	input: 'index.js',
 	output: [
-		{ file: 'index.cjs.js', format: 'cjs' },
-		{ file: 'index.es.mjs', format: 'es' }
+		{ file: 'index.cjs.js', format: 'cjs', sourcemap: true },
+		{ file: 'index.es.mjs', format: 'es', sourcemap: true }
 	],
 	plugins: [
 		babel({
diff --git a/CHANGELOG.md b/CHANGELOG.md
index f3a83ce..51c74f1 100755
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,5 +1,11 @@
 # Changes to PostCSS Custom Media
 
+### 7.0.5 (October 5, 2018)
+
+- Fixed: Possible issues resolving paths to imports and exports
+- Added: Imports from `customMedia` and `custom-media` simultaneously
+- Updated: `postcss` to 7.0.5
+
 ### 7.0.4 (September 23, 2018)
 
 - Added: `importFromPlugins` option to process imports
diff --git a/README.md b/README.md
index d4ffeba..89276ee 100755
--- a/README.md
+++ b/README.md
@@ -160,6 +160,10 @@ postcssCustomMedia({
 });
 ```
 
+See example exports written to [CSS](test/export-media.css),
+[JS](test/export-media.js), [MJS](test/export-media.mjs), and
+[JSON](test/export-media.json).
+
 [cli-img]: https://img.shields.io/travis/postcss/postcss-custom-media.svg
 [cli-url]: https://travis-ci.org/postcss/postcss-custom-media
 [css-img]: https://cssdb.org/badge/custom-media-queries.svg
diff --git a/index.js b/index.js
index 7547790..18ab7fc 100755
--- a/index.js
+++ b/index.js
@@ -1,29 +1,29 @@
 import postcss from 'postcss';
-import getCustomMedia from './lib/custom-media-from-root';
+import getCustomMediaFromRoot from './lib/custom-media-from-root';
+import getCustomMediaFromImports from './lib/get-custom-media-from-imports';
 import transformAtrules from './lib/transform-atrules';
-import importCustomMediaFromSources from './lib/import-from';
-import exportCustomMediaToDestinations from './lib/export-to';
+import writeCustomMediaToExports from './lib/write-custom-media-to-exports';
 
 export default postcss.plugin('postcss-custom-media', opts => {
-	// whether to preserve custom selectors and rules using them
-	const preserve = Boolean(Object(opts).preserve);
+	// whether to preserve custom media and at-rules using them
+	const preserve = 'preserve' in Object(opts) ? Boolean(opts.preserve) : false;
 
-	// sources to import custom selectors from
+	// sources to import custom media from
 	const importFrom = [].concat(Object(opts).importFrom || []);
 
-	// destinations to export custom selectors to
+	// destinations to export custom media to
 	const exportTo = [].concat(Object(opts).exportTo || []);
 
-	// promise any custom selectors are imported
-	const customMediaPromise = importCustomMediaFromSources(importFrom);
+	// promise any custom media are imported
+	const customMediaPromise = getCustomMediaFromImports(importFrom);
 
 	return async root => {
 		const customMedia = Object.assign(
 			await customMediaPromise,
-			getCustomMedia(root, { preserve })
+			getCustomMediaFromRoot(root, { preserve })
 		);
 
-		await exportCustomMediaToDestinations(customMedia, exportTo);
+		await writeCustomMediaToExports(customMedia, exportTo);
 
 		transformAtrules(root, customMedia, { preserve });
 	};
diff --git a/lib/import-from.js b/lib/get-custom-media-from-imports.js
similarity index 56%
rename from lib/import-from.js
rename to lib/get-custom-media-from-imports.js
index 47038f6..562b3f0 100644
--- a/lib/import-from.js
+++ b/lib/get-custom-media-from-imports.js
@@ -4,30 +4,24 @@ import postcss from 'postcss';
 import getMediaAstFromMediaString from './media-ast-from-string';
 import getCustomMedia from './custom-media-from-root';
 
-/* Import Custom Media from CSS AST
+/* Get Custom Media from CSS File
 /* ========================================================================== */
 
-function importCustomMediaFromCSSAST(root) {
-	return getCustomMedia(root, { preserve: true });
-}
-
-/* Import Custom Media from CSS File
-/* ========================================================================== */
+async function getCustomMediaFromCSSFile(from) {
+	const css = await readFile(from);
+	const root = postcss.parse(css, { from });
 
-async function importCustomMediaFromCSSFile(from) {
-	const css = await readFile(path.resolve(from));
-	const root = postcss.parse(css, { from: path.resolve(from) });
-
-	return importCustomMediaFromCSSAST(root);
+	return getCustomMedia(root, { preserve: true });
 }
 
-/* Import Custom Media from Object
+/* Get Custom Media from Object
 /* ========================================================================== */
 
-function importCustomMediaFromObject(object) {
+function getCustomMediaFromObject(object) {
 	const customMedia = Object.assign(
 		{},
-		Object(object).customMedia || Object(object)['custom-media']
+		Object(object).customMedia,
+		Object(object)['custom-media']
 	);
 
 	for (const key in customMedia) {
@@ -37,28 +31,28 @@ function importCustomMediaFromObject(object) {
 	return customMedia;
 }
 
-/* Import Custom Media from JSON file
+/* Get Custom Media from JSON file
 /* ========================================================================== */
 
-async function importCustomMediaFromJSONFile(from) {
-	const object = await readJSON(path.resolve(from));
+async function getCustomMediaFromJSONFile(from) {
+	const object = await readJSON(from);
 
-	return importCustomMediaFromObject(object);
+	return getCustomMediaFromObject(object);
 }
 
-/* Import Custom Media from JS file
+/* Get Custom Media from JS file
 /* ========================================================================== */
 
-async function importCustomMediaFromJSFile(from) {
-	const object = await import(path.resolve(from));
+async function getCustomMediaFromJSFile(from) {
+	const object = await import(from);
 
-	return importCustomMediaFromObject(object);
+	return getCustomMediaFromObject(object);
 }
 
-/* Import Custom Media from Sources
+/* Get Custom Media from Sources
 /* ========================================================================== */
 
-export default function importCustomMediaFromSources(sources) {
+export default function getCustomMediaFromSources(sources) {
 	return sources.map(source => {
 		if (source instanceof Promise) {
 			return source;
@@ -75,7 +69,7 @@ export default function importCustomMediaFromSources(sources) {
 		}
 
 		// source pathname
-		const from = String(opts.from || '');
+		const from = path.resolve(String(opts.from || ''));
 
 		// type of file being read from
 		const type = (opts.type || path.extname(from).slice(1)).toLowerCase();
@@ -84,23 +78,19 @@ export default function importCustomMediaFromSources(sources) {
 	}).reduce(async (customMedia, source) => {
 		const { type, from } = await source;
 
-		if (type === 'ast') {
-			return Object.assign(customMedia, importCustomMediaFromCSSAST(from));
-		}
-
 		if (type === 'css') {
-			return Object.assign(customMedia, await importCustomMediaFromCSSFile(from));
+			return Object.assign(await customMedia, await getCustomMediaFromCSSFile(from));
 		}
 
 		if (type === 'js') {
-			return Object.assign(customMedia, await importCustomMediaFromJSFile(from));
+			return Object.assign(await customMedia, await getCustomMediaFromJSFile(from));
 		}
 
 		if (type === 'json') {
-			return Object.assign(customMedia, await importCustomMediaFromJSONFile(from));
+			return Object.assign(await customMedia, await getCustomMediaFromJSONFile(from));
 		}
 
-		return Object.assign(customMedia, importCustomMediaFromObject(await source));
+		return Object.assign(await customMedia, getCustomMediaFromObject(await source));
 	}, {});
 }
 
diff --git a/lib/export-to.js b/lib/write-custom-media-to-exports.js
similarity index 80%
rename from lib/export-to.js
rename to lib/write-custom-media-to-exports.js
index e92518d..8828efc 100644
--- a/lib/export-to.js
+++ b/lib/write-custom-media-to-exports.js
@@ -1,10 +1,10 @@
 import fs from 'fs';
 import path from 'path';
 
-/* Import Custom Media from CSS File
+/* Write Custom Media from CSS File
 /* ========================================================================== */
 
-async function exportCustomMediaToCssFile(to, customMedia) {
+async function writeCustomMediaToCssFile(to, customMedia) {
 	const cssContent = Object.keys(customMedia).reduce((cssLines, name) => {
 		cssLines.push(`@custom-media ${name} ${customMedia[name]};`);
 
@@ -15,10 +15,10 @@ async function exportCustomMediaToCssFile(to, customMedia) {
 	await writeFile(to, css);
 }
 
-/* Import Custom Media from JSON file
+/* Write Custom Media from JSON file
 /* ========================================================================== */
 
-async function exportCustomMediaToJsonFile(to, customMedia) {
+async function writeCustomMediaToJsonFile(to, customMedia) {
 	const jsonContent = JSON.stringify({
 		'custom-media': customMedia
 	}, null, '  ');
@@ -27,10 +27,10 @@ async function exportCustomMediaToJsonFile(to, customMedia) {
 	await writeFile(to, json);
 }
 
-/* Import Custom Media from Common JS file
+/* Write Custom Media from Common JS file
 /* ========================================================================== */
 
-async function exportCustomMediaToCjsFile(to, customMedia) {
+async function writeCustomMediaToCjsFile(to, customMedia) {
 	const jsContents = Object.keys(customMedia).reduce((jsLines, name) => {
 		jsLines.push(`\t\t'${escapeForJS(name)}': '${escapeForJS(customMedia[name])}'`);
 
@@ -41,10 +41,10 @@ async function exportCustomMediaToCjsFile(to, customMedia) {
 	await writeFile(to, js);
 }
 
-/* Import Custom Media from Module JS file
+/* Write Custom Media from Module JS file
 /* ========================================================================== */
 
-async function exportCustomMediaToMjsFile(to, customMedia) {
+async function writeCustomMediaToMjsFile(to, customMedia) {
 	const mjsContents = Object.keys(customMedia).reduce((mjsLines, name) => {
 		mjsLines.push(`\t'${escapeForJS(name)}': '${escapeForJS(customMedia[name])}'`);
 
@@ -55,10 +55,10 @@ async function exportCustomMediaToMjsFile(to, customMedia) {
 	await writeFile(to, mjs);
 }
 
-/* Export Custom Media to Destinations
+/* Write Custom Media to Exports
 /* ========================================================================== */
 
-export default function exportCustomMediaToDestinations(customMedia, destinations) {
+export default function writeCustomMediaToExports(customMedia, destinations) {
 	return Promise.all(destinations.map(async destination => {
 		if (destination instanceof Function) {
 			await destination(defaultCustomMediaToJSON(customMedia));
@@ -86,19 +86,19 @@ export default function exportCustomMediaToDestinations(customMedia, destination
 				const customMediaJSON = toJSON(customMedia);
 
 				if (type === 'css') {
-					await exportCustomMediaToCssFile(to, customMediaJSON);
+					await writeCustomMediaToCssFile(to, customMediaJSON);
 				}
 
 				if (type === 'js') {
-					await exportCustomMediaToCjsFile(to, customMediaJSON);
+					await writeCustomMediaToCjsFile(to, customMediaJSON);
 				}
 
 				if (type === 'json') {
-					await exportCustomMediaToJsonFile(to, customMediaJSON);
+					await writeCustomMediaToJsonFile(to, customMediaJSON);
 				}
 
 				if (type === 'mjs') {
-					await exportCustomMediaToMjsFile(to, customMediaJSON);
+					await writeCustomMediaToMjsFile(to, customMediaJSON);
 				}
 			}
 		}
diff --git a/package.json b/package.json
index 2a36668..b24419d 100644
--- a/package.json
+++ b/package.json
@@ -1,6 +1,6 @@
 {
   "name": "postcss-custom-media",
-  "version": "7.0.4",
+  "version": "7.0.5",
   "description": "Use Custom Media Queries in CSS",
   "author": "Jonathan Neal <jonathantneal@hotmail.com>",
   "contributors": [
@@ -27,18 +27,18 @@
     "node": ">=6.0.0"
   },
   "dependencies": {
-    "postcss": "^7.0.2"
+    "postcss": "^7.0.5"
   },
   "devDependencies": {
-    "@babel/core": "^7.1.0",
+    "@babel/core": "^7.1.2",
     "@babel/plugin-syntax-dynamic-import": "^7.0.0",
     "@babel/preset-env": "^7.1.0",
-    "babel-eslint": "^9.0.0",
-    "eslint": "^5.6.0",
+    "babel-eslint": "^10.0.1",
+    "eslint": "^5.6.1",
     "eslint-config-dev": "^2.0.0",
     "postcss-tape": "^2.2.0",
     "pre-commit": "^1.2.2",
-    "rollup": "^0.66.2",
+    "rollup": "^0.66.4",
     "rollup-plugin-babel": "^4.0.3"
   },
   "eslintConfig": {
-- 
2.35.1

