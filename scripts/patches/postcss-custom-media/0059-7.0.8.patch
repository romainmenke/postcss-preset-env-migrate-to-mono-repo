From ca22cf673fbffbc981807c1e4b758f1575fb8aec Mon Sep 17 00:00:00 2001
From: Jonathan Neal <jonathantneal@hotmail.com>
Date: Sat, 30 Mar 2019 02:00:36 -0400
Subject: [PATCH 59/62] 7.0.8

---
 .tape.js                             | 420 +++++++++++++--------------
 CHANGELOG.md                         |   5 +
 lib/get-custom-media-from-imports.js |   2 +-
 package.json                         |  18 +-
 4 files changed, 224 insertions(+), 221 deletions(-)

diff --git a/.tape.js b/.tape.js
index d5ce77c..3782bcd 100644
--- a/.tape.js
+++ b/.tape.js
@@ -1,240 +1,238 @@
 module.exports = {
-	'postcss-custom-media': {
-		'basic': {
-			message: 'supports basic usage'
-		},
-		'basic:preserve': {
-			message: 'supports { preserve: true } usage',
-			options: {
-				preserve: true
+	'basic': {
+		message: 'supports basic usage'
+	},
+	'basic:preserve': {
+		message: 'supports { preserve: true } usage',
+		options: {
+			preserve: true
+		}
+	},
+	'import': {
+		message: 'supports { importFrom: { customMedia: { ... } } } usage',
+		options: {
+			importFrom: {
+				customMedia: {
+					'--mq-a': '(max-width: 30em), (max-height: 30em)',
+					'--not-mq-a': 'not all and (--mq-a)'
+				}
 			}
-		},
-		'import': {
-			message: 'supports { importFrom: { customMedia: { ... } } } usage',
-			options: {
-				importFrom: {
+		}
+	},
+	'import:import-fn': {
+		message: 'supports { importFrom() } usage',
+		options: {
+			importFrom() {
+				return {
 					customMedia: {
 						'--mq-a': '(max-width: 30em), (max-height: 30em)',
 						'--not-mq-a': 'not all and (--mq-a)'
 					}
-				}
+				};
 			}
 		},
-		'import:import-fn': {
-			message: 'supports { importFrom() } usage',
-			options: {
-				importFrom() {
-					return {
+		expect: 'import.expect.css',
+		result: 'import.result.css'
+	},
+	'import:import-fn-promise': {
+		message: 'supports { async importFrom() } usage',
+		options: {
+			importFrom() {
+				return new Promise(resolve => {
+					resolve({
 						customMedia: {
 							'--mq-a': '(max-width: 30em), (max-height: 30em)',
 							'--not-mq-a': 'not all and (--mq-a)'
 						}
-					};
-				}
-			},
-			expect: 'import.expect.css',
-			result: 'import.result.css'
-		},
-		'import:import-fn-promise': {
-			message: 'supports { async importFrom() } usage',
-			options: {
-				importFrom() {
-					return new Promise(resolve => {
-						resolve({
-							customMedia: {
-								'--mq-a': '(max-width: 30em), (max-height: 30em)',
-								'--not-mq-a': 'not all and (--mq-a)'
-							}
-						})
-					});
-				}
-			},
-			expect: 'import.expect.css',
-			result: 'import.result.css'
-		},
-		'import:json': {
-			message: 'supports { importFrom: "test/import-media.json" } usage',
-			options: {
-				importFrom: 'test/import-media.json'
-			},
-			expect: 'import.expect.css',
-			result: 'import.result.css'
-		},
-		'import:js': {
-			message: 'supports { importFrom: "test/import-media.js" } usage',
-			options: {
-				importFrom: 'test/import-media.js'
-			},
-			expect: 'import.expect.css',
-			result: 'import.result.css'
-		},
-		'import:css': {
-			message: 'supports { importFrom: "test/import-media.css" } usage',
-			options: {
-				importFrom: 'test/import-media.css'
-			},
-			expect: 'import.expect.css',
-			result: 'import.result.css'
-		},
-		'import:css-from': {
-			message: 'supports { importFrom: { from: "test/import-media.css" } } usage',
-			options: {
-				importFrom: { from: 'test/import-media.css' }
-			},
-			expect: 'import.expect.css',
-			result: 'import.result.css'
-		},
-		'import:css-from-type': {
-			message: 'supports { importFrom: [ { from: "test/import-media.css", type: "css" } ] } usage',
-			options: {
-				importFrom: [ { from: 'test/import-media.css', type: 'css' } ]
-			},
-			expect: 'import.expect.css',
-			result: 'import.result.css'
-		},
-		'import:empty': {
-			message: 'supports { importFrom: {} } usage',
-			options: {
-				importFrom: {}
+					})
+				});
 			}
 		},
-		'basic:export': {
-			message: 'supports { exportTo: { customMedia: { ... } } } usage',
-			options: {
-				exportTo: (global.__exportMediaObject = global.__exportMediaObject || {
-					customMedia: null
-				})
-			},
-			expect: 'basic.expect.css',
-			result: 'basic.result.css',
-			after() {
-				if (__exportMediaObject.customMedia['--mq-a'] !== '(max-width: 30em), (max-height: 30em)') {
+		expect: 'import.expect.css',
+		result: 'import.result.css'
+	},
+	'import:json': {
+		message: 'supports { importFrom: "test/import-media.json" } usage',
+		options: {
+			importFrom: 'test/import-media.json'
+		},
+		expect: 'import.expect.css',
+		result: 'import.result.css'
+	},
+	'import:js': {
+		message: 'supports { importFrom: "test/import-media.js" } usage',
+		options: {
+			importFrom: 'test/import-media.js'
+		},
+		expect: 'import.expect.css',
+		result: 'import.result.css'
+	},
+	'import:css': {
+		message: 'supports { importFrom: "test/import-media.css" } usage',
+		options: {
+			importFrom: 'test/import-media.css'
+		},
+		expect: 'import.expect.css',
+		result: 'import.result.css'
+	},
+	'import:css-from': {
+		message: 'supports { importFrom: { from: "test/import-media.css" } } usage',
+		options: {
+			importFrom: { from: 'test/import-media.css' }
+		},
+		expect: 'import.expect.css',
+		result: 'import.result.css'
+	},
+	'import:css-from-type': {
+		message: 'supports { importFrom: [ { from: "test/import-media.css", type: "css" } ] } usage',
+		options: {
+			importFrom: [ { from: 'test/import-media.css', type: 'css' } ]
+		},
+		expect: 'import.expect.css',
+		result: 'import.result.css'
+	},
+	'import:empty': {
+		message: 'supports { importFrom: {} } usage',
+		options: {
+			importFrom: {}
+		}
+	},
+	'basic:export': {
+		message: 'supports { exportTo: { customMedia: { ... } } } usage',
+		options: {
+			exportTo: (global.__exportMediaObject = global.__exportMediaObject || {
+				customMedia: null
+			})
+		},
+		expect: 'basic.expect.css',
+		result: 'basic.result.css',
+		after() {
+			if (__exportMediaObject.customMedia['--mq-a'] !== '(max-width: 30em), (max-height: 30em)') {
+				throw new Error('The exportTo function failed');
+			}
+		}
+	},
+	'basic:export-fn': {
+		message: 'supports { exportTo() } usage',
+		options: {
+			exportTo(customMedia) {
+				if (customMedia['--mq-a'] !== '(max-width: 30em), (max-height: 30em)') {
 					throw new Error('The exportTo function failed');
 				}
 			}
 		},
-		'basic:export-fn': {
-			message: 'supports { exportTo() } usage',
-			options: {
-				exportTo(customMedia) {
+		expect: 'basic.expect.css',
+		result: 'basic.result.css'
+	},
+	'basic:export-fn-promise': {
+		message: 'supports { async exportTo() } usage',
+		options: {
+			exportTo(customMedia) {
+				return new Promise((resolve, reject) => {
 					if (customMedia['--mq-a'] !== '(max-width: 30em), (max-height: 30em)') {
-						throw new Error('The exportTo function failed');
+						reject('The exportTo function failed');
+					} else {
+						resolve();
 					}
-				}
-			},
-			expect: 'basic.expect.css',
-			result: 'basic.result.css'
-		},
-		'basic:export-fn-promise': {
-			message: 'supports { async exportTo() } usage',
-			options: {
-				exportTo(customMedia) {
-					return new Promise((resolve, reject) => {
-						if (customMedia['--mq-a'] !== '(max-width: 30em), (max-height: 30em)') {
-							reject('The exportTo function failed');
-						} else {
-							resolve();
-						}
-					});
-				}
-			},
-			expect: 'basic.expect.css',
-			result: 'basic.result.css'
-		},
-		'basic:export-json': {
-			message: 'supports { exportTo: "test/export-media.json" } usage',
-			options: {
-				exportTo: 'test/export-media.json'
-			},
-			expect: 'basic.expect.css',
-			result: 'basic.result.css',
-			before() {
-				global.__exportMediaString = require('fs').readFileSync('test/export-media.json', 'utf8');
-			},
-			after() {
-				if (global.__exportMediaString !== require('fs').readFileSync('test/export-media.json', 'utf8')) {
-					throw new Error('The original file did not match the freshly exported copy');
-				}
+				});
 			}
 		},
-		'basic:export-js': {
-			message: 'supports { exportTo: "test/export-media.js" } usage',
-			options: {
-				exportTo: 'test/export-media.js'
-			},
-			expect: 'basic.expect.css',
-			result: 'basic.result.css',
-			before() {
-				global.__exportMediaString = require('fs').readFileSync('test/export-media.js', 'utf8');
-			},
-			after() {
-				if (global.__exportMediaString !== require('fs').readFileSync('test/export-media.js', 'utf8')) {
-					throw new Error('The original file did not match the freshly exported copy');
-				}
+		expect: 'basic.expect.css',
+		result: 'basic.result.css'
+	},
+	'basic:export-json': {
+		message: 'supports { exportTo: "test/export-media.json" } usage',
+		options: {
+			exportTo: 'test/export-media.json'
+		},
+		expect: 'basic.expect.css',
+		result: 'basic.result.css',
+		before() {
+			global.__exportMediaString = require('fs').readFileSync('test/export-media.json', 'utf8');
+		},
+		after() {
+			if (global.__exportMediaString !== require('fs').readFileSync('test/export-media.json', 'utf8')) {
+				throw new Error('The original file did not match the freshly exported copy');
 			}
-		},
-		'basic:export-mjs': {
-			message: 'supports { exportTo: "test/export-media.mjs" } usage',
-			options: {
-				exportTo: 'test/export-media.mjs'
-			},
-			expect: 'basic.expect.css',
-			result: 'basic.result.css',
-			before() {
-				global.__exportMediaString = require('fs').readFileSync('test/export-media.mjs', 'utf8');
-			},
-			after() {
-				if (global.__exportMediaString !== require('fs').readFileSync('test/export-media.mjs', 'utf8')) {
-					throw new Error('The original file did not match the freshly exported copy');
-				}
+		}
+	},
+	'basic:export-js': {
+		message: 'supports { exportTo: "test/export-media.js" } usage',
+		options: {
+			exportTo: 'test/export-media.js'
+		},
+		expect: 'basic.expect.css',
+		result: 'basic.result.css',
+		before() {
+			global.__exportMediaString = require('fs').readFileSync('test/export-media.js', 'utf8');
+		},
+		after() {
+			if (global.__exportMediaString !== require('fs').readFileSync('test/export-media.js', 'utf8')) {
+				throw new Error('The original file did not match the freshly exported copy');
 			}
-		},
-		'basic:export-css': {
-			message: 'supports { exportTo: "test/export-media.css" } usage',
-			options: {
-				exportTo: 'test/export-media.css'
-			},
-			expect: 'basic.expect.css',
-			result: 'basic.result.css',
-			before() {
-				global.__exportMediaString = require('fs').readFileSync('test/export-media.css', 'utf8');
-			},
-			after() {
-				if (global.__exportMediaString !== require('fs').readFileSync('test/export-media.css', 'utf8')) {
-					throw new Error('The original file did not match the freshly exported copy');
-				}
+		}
+	},
+	'basic:export-mjs': {
+		message: 'supports { exportTo: "test/export-media.mjs" } usage',
+		options: {
+			exportTo: 'test/export-media.mjs'
+		},
+		expect: 'basic.expect.css',
+		result: 'basic.result.css',
+		before() {
+			global.__exportMediaString = require('fs').readFileSync('test/export-media.mjs', 'utf8');
+		},
+		after() {
+			if (global.__exportMediaString !== require('fs').readFileSync('test/export-media.mjs', 'utf8')) {
+				throw new Error('The original file did not match the freshly exported copy');
 			}
-		},
-		'basic:export-css-to': {
-			message: 'supports { exportTo: { to: "test/export-media.css" } } usage',
-			options: {
-				exportTo: { to: 'test/export-media.css' }
-			},
-			expect: 'basic.expect.css',
-			result: 'basic.result.css',
-			before() {
-				global.__exportMediaString = require('fs').readFileSync('test/export-media.css', 'utf8');
-			},
-			after() {
-				if (global.__exportMediaString !== require('fs').readFileSync('test/export-media.css', 'utf8')) {
-					throw new Error('The original file did not match the freshly exported copy');
-				}
+		}
+	},
+	'basic:export-css': {
+		message: 'supports { exportTo: "test/export-media.css" } usage',
+		options: {
+			exportTo: 'test/export-media.css'
+		},
+		expect: 'basic.expect.css',
+		result: 'basic.result.css',
+		before() {
+			global.__exportMediaString = require('fs').readFileSync('test/export-media.css', 'utf8');
+		},
+		after() {
+			if (global.__exportMediaString !== require('fs').readFileSync('test/export-media.css', 'utf8')) {
+				throw new Error('The original file did not match the freshly exported copy');
 			}
-		},
-		'basic:export-css-to-type': {
-			message: 'supports { exportTo: { to: "test/export-media.css", type: "css" } } usage',
-			options: {
-				exportTo: { to: 'test/export-media.css', type: 'css' }
-			},
-			expect: 'basic.expect.css',
-			result: 'basic.result.css',
-			before() {
-				global.__exportMediaString = require('fs').readFileSync('test/export-media.css', 'utf8');
-			},
-			after() {
-				if (global.__exportMediaString !== require('fs').readFileSync('test/export-media.css', 'utf8')) {
-					throw new Error('The original file did not match the freshly exported copy');
-				}
+		}
+	},
+	'basic:export-css-to': {
+		message: 'supports { exportTo: { to: "test/export-media.css" } } usage',
+		options: {
+			exportTo: { to: 'test/export-media.css' }
+		},
+		expect: 'basic.expect.css',
+		result: 'basic.result.css',
+		before() {
+			global.__exportMediaString = require('fs').readFileSync('test/export-media.css', 'utf8');
+		},
+		after() {
+			if (global.__exportMediaString !== require('fs').readFileSync('test/export-media.css', 'utf8')) {
+				throw new Error('The original file did not match the freshly exported copy');
+			}
+		}
+	},
+	'basic:export-css-to-type': {
+		message: 'supports { exportTo: { to: "test/export-media.css", type: "css" } } usage',
+		options: {
+			exportTo: { to: 'test/export-media.css', type: 'css' }
+		},
+		expect: 'basic.expect.css',
+		result: 'basic.result.css',
+		before() {
+			global.__exportMediaString = require('fs').readFileSync('test/export-media.css', 'utf8');
+		},
+		after() {
+			if (global.__exportMediaString !== require('fs').readFileSync('test/export-media.css', 'utf8')) {
+				throw new Error('The original file did not match the freshly exported copy');
 			}
 		}
 	}
diff --git a/CHANGELOG.md b/CHANGELOG.md
index a762390..91fdb7e 100755
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,5 +1,10 @@
 # Changes to PostCSS Custom Media
 
+### 7.0.8 (March 30, 2019)
+
+- Fixed: Issue importing from `.pcss` files
+- Updated: `postcss` to 7.0.14 (patch)
+
 ### 7.0.7 (October 19, 2018)
 
 - Fixed: Issue combining custom media media queries with `and`
diff --git a/lib/get-custom-media-from-imports.js b/lib/get-custom-media-from-imports.js
index 562b3f0..617a40e 100644
--- a/lib/get-custom-media-from-imports.js
+++ b/lib/get-custom-media-from-imports.js
@@ -78,7 +78,7 @@ export default function getCustomMediaFromSources(sources) {
 	}).reduce(async (customMedia, source) => {
 		const { type, from } = await source;
 
-		if (type === 'css') {
+		if (type === 'css' || type === 'pcss') {
 			return Object.assign(await customMedia, await getCustomMediaFromCSSFile(from));
 		}
 
diff --git a/package.json b/package.json
index 505eb8e..5901467 100644
--- a/package.json
+++ b/package.json
@@ -1,6 +1,6 @@
 {
   "name": "postcss-custom-media",
-  "version": "7.0.7",
+  "version": "7.0.8",
   "description": "Use Custom Media Queries in CSS",
   "author": "Jonathan Neal <jonathantneal@hotmail.com>",
   "contributors": [
@@ -27,19 +27,19 @@
     "node": ">=6.0.0"
   },
   "dependencies": {
-    "postcss": "^7.0.5"
+    "postcss": "^7.0.14"
   },
   "devDependencies": {
-    "@babel/core": "^7.1.2",
-    "@babel/plugin-syntax-dynamic-import": "^7.0.0",
-    "@babel/preset-env": "^7.1.0",
+    "@babel/core": "^7.4.0",
+    "@babel/plugin-syntax-dynamic-import": "^7.2.0",
+    "@babel/preset-env": "^7.4.2",
     "babel-eslint": "^10.0.1",
-    "eslint": "^5.7.0",
+    "eslint": "^5.16.0",
     "eslint-config-dev": "^2.0.0",
-    "postcss-tape": "^2.2.0",
+    "postcss-tape": "^4.0.0",
     "pre-commit": "^1.2.2",
-    "rollup": "^0.66.6",
-    "rollup-plugin-babel": "^4.0.3"
+    "rollup": "^1.7.4",
+    "rollup-plugin-babel": "^4.3.2"
   },
   "eslintConfig": {
     "extends": "dev",
-- 
2.35.1

