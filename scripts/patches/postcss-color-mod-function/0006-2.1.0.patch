From 17eb49b2105f06a1868be6cf2577b83b1f4c5a22 Mon Sep 17 00:00:00 2001
From: Jonathan Neal <jonathantneal@hotmail.com>
Date: Sat, 20 Jan 2018 21:58:48 -0500
Subject: [PATCH 06/29] 2.1.0

---
 .appveyor.yml                |   2 +-
 CHANGELOG.md                 |   9 +
 index.js                     |   2 +-
 lib/color.js                 | 345 +++++++++----------------------
 lib/conversions.js           | 380 +++++++++++++++++++++++++++++++++++
 lib/manage-unresolved.js     |   2 +-
 lib/transform.js             | 178 ++++++++--------
 package.json                 |  14 +-
 test/basic.colors.expect.css |   5 +-
 test/basic.css               |   3 +
 test/basic.expect.css        |  69 ++++---
 11 files changed, 635 insertions(+), 374 deletions(-)
 create mode 100644 lib/conversions.js

diff --git a/.appveyor.yml b/.appveyor.yml
index d6b511f..acbf8a5 100644
--- a/.appveyor.yml
+++ b/.appveyor.yml
@@ -2,7 +2,7 @@
 
 environment:
   matrix:
-    - nodejs_version: 4.0
+    - nodejs_version: 4
 
 version: "{build}"
 build: off
diff --git a/CHANGELOG.md b/CHANGELOG.md
index 8d164d7..064d6bc 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,5 +1,14 @@
 # Changes to PostCSS color-mod() Function
 
+### 2.1.0 (January 20, 2018)
+
+- Added support for legacy (comma-separated) `hsl()` colors
+- Added support for all `<hue>` units
+- Added use of legacy (comma-separated) `hsl()` colors when appropriate
+- Improved color conversions
+- Improved support for all `rgb()` colors
+- Removed external math and color dependencies
+
 ### 2.0.0 (January 17, 2018)
 
 - Reverse blend/blenda percentage calculations (breaking change)
diff --git a/index.js b/index.js
index de40f34..15f0305 100644
--- a/index.js
+++ b/index.js
@@ -6,7 +6,7 @@ import transformAST from './lib/transform';
 // plugin
 export default postcss.plugin('postcss-color-mod-function', opts => {
 	const unresolvedOpt = String(Object(opts).unresolved || 'throw').toLowerCase();
-	const stringifierOpt = Object(opts).stringifier || (color => color.toRGBLegacy());
+	const stringifierOpt = Object(opts).stringifier || (color => color.toLegacy());
 
 	return (root, result) => {
 		root.walkDecls(decl => {
diff --git a/lib/color.js b/lib/color.js
index d77de6e..8d4c547 100644
--- a/lib/color.js
+++ b/lib/color.js
@@ -1,11 +1,11 @@
-import number from 'big.js';
+import { convertRGBtoHSL, convertRGBtoHWB, convertHSLtoRGB, convertHSLtoHWB, convertHWBtoRGB, convertHWBtoHSL, convertRGBtoH } from './conversions';
 
 export default class Color {
 	constructor(color) {
 		this.color = Object(Object(color).color || color);
 
 		if (color.colorspace === 'rgb') {
-			this.color.hue = rgb2hue(color.red, color.green, color.blue, color.hue || 0);
+			this.color.hue = convertRGBtoH(color.red, color.green, color.blue, color.hue || 0);
 		}
 	}
 
@@ -133,6 +133,10 @@ export default class Color {
 		return color2hwbString(this.color);
 	}
 
+	toLegacy() {
+		return color2legacyString(this.color);
+	}
+
 	toRGB() {
 		return color2rgbString(this.color);
 	}
@@ -149,20 +153,20 @@ export default class Color {
 /* Blending
 /* ========================================================================== */
 
-function blend(base, color, percentage, colorspace, isBlendingAlpha) { // eslint-disable-line max-params
-	const addition    = number(percentage).div(100);
-	const subtraction = number(1).minus(addition);
+function blend(base, color, percentage, colorspace, isBlendingAlpha) {
+	const addition    = percentage / 100;
+	const subtraction = 1 - addition;
 
 	if (colorspace === 'hsl') {
 		const { hue: h1, saturation: s1, lightness: l1, alpha: a1 } = color2hsl(base);
 		const { hue: h2, saturation: s2, lightness: l2, alpha: a2 } = color2hsl(color);
 
 		const [hue, saturation, lightness, alpha] = [
-			Number(number(h1).times(subtraction).plus(number(h2).times(addition))),
-			Number(number(s1).times(subtraction).plus(number(s2).times(addition))),
-			Number(number(l1).times(subtraction).plus(number(l2).times(addition))),
+			h1 * subtraction + h2 * addition,
+			s1 * subtraction + s2 * addition,
+			l1 * subtraction + l2 * addition,
 			isBlendingAlpha
-				? Number(number(a1).times(subtraction).plus(number(a2).times(addition)))
+				? a1 * subtraction + a2 * addition
 			: a1
 		];
 
@@ -172,10 +176,12 @@ function blend(base, color, percentage, colorspace, isBlendingAlpha) { // eslint
 		const { hue: h2, whiteness: w2, blackness: b2, alpha: a2 } = color2hwb(color);
 
 		const [hue, whiteness, blackness, alpha] = [
-			Number(number(h1).times(subtraction).plus(number(h2).times(addition))),
-			Number(number(w1).times(subtraction).plus(number(w2).times(addition))),
-			Number(number(b1).times(subtraction).plus(number(b2).times(addition))),
-			isBlendingAlpha ? Number(number(a1).times(subtraction).plus(number(a2).times(addition))) : a1
+			h1 * subtraction + h2 * addition,
+			w1 * subtraction + w2 * addition,
+			b1 * subtraction + b2 * addition,
+			isBlendingAlpha
+				? a1 * subtraction + a2 * addition
+			: a1
 		];
 
 		return { hue, whiteness, blackness, alpha, colorspace: 'hwb' };
@@ -184,10 +190,12 @@ function blend(base, color, percentage, colorspace, isBlendingAlpha) { // eslint
 		const { red: r2, green: g2, blue: b2, alpha: a2 } = color2rgb(color);
 
 		const [red, green, blue, alpha] = [
-			Number(number(r1).times(subtraction).plus(number(r2).times(addition))),
-			Number(number(g1).times(subtraction).plus(number(g2).times(addition))),
-			Number(number(b1).times(subtraction).plus(number(b2).times(addition))),
-			isBlendingAlpha ? Number(number(a1).times(subtraction).plus(number(a2).times(addition))) : a1
+			r1 * subtraction + r2 * addition,
+			g1 * subtraction + g2 * addition,
+			b1 * subtraction + b2 * addition,
+			isBlendingAlpha
+				? a1 * subtraction + a2 * addition
+			: a1
 		];
 
 		return { red, green, blue, alpha, colorspace: 'rgb' };
@@ -214,7 +222,7 @@ function assign(base, channels) {
 
 			if (isRGB) {
 				// conditionally preserve the hue
-				color.hue = rgb2hue(color.red, color.green, color.blue, base.hue || 0);
+				color.hue = convertRGBtoH(color.red, color.green, color.blue, base.hue || 0);
 			}
 		}
 	);
@@ -230,183 +238,44 @@ function normalize(value, channel) {
 	const min = 0;
 	const max = isHue ? 360 : 100;
 
-	const modifiedValue = Math.min(Math.max(isHue
-		? number(value).mod(360)
+	const normalizedValue = Math.min(Math.max(isHue
+		? value % 360
 	: value, min), max);
 
-	return modifiedValue
+	return normalizedValue;
 }
 
 /* Convert colors
 /* ========================================================================== */
 
-function color2hsl(color) {
-	return color.colorspace === 'rgb'
-		? rgb2hsl(color, color.hue)
-	: color.colorspace === 'hwb'
-		? rgb2hsl(hwb2rgb(color), color.hue)
-	: color;
-}
-
-function color2hwb(color) {
-	return color.colorspace === 'rgb'
-		? rgb2hwb(color, color.hue)
-	: color.colorspace === 'hsl'
-		? rgb2hwb(hsl2rgb(color), color.hue)
-	: color;
-}
-
 function color2rgb(color) {
-	return color.colorspace === 'hsl'
-		? hsl2rgb(color)
+	const [ red, green, blue ] = color.colorspace === 'hsl'
+		? convertHSLtoRGB(color.hue, color.saturation, color.lightness)
 	: color.colorspace === 'hwb'
-		? hwb2rgb(color)
-	: color;
-}
-
-/* Convert HSL to RGB
-/* ========================================================================== */
-
-function hsl2rgb({ hue, saturation, lightness, alpha = 100 }) {
-	const t2 = lightness <= 50
-		? Number(
-			number(lightness).div(100).times(
-				number(saturation).div(100).plus(1)
-			)
-		)
-	: Number(
-		number(lightness).div(100).plus(
-			number(saturation).div(100)
-		).minus(
-			number(lightness).div(100).times(
-				number(saturation).div(100)
-			)
-		)
-	);
-
-	const t1 = Number(number(lightness).div(100).times(2).minus(t2));
-
-	const red   = hue2channel(t1, t2, Number(number(hue).div(60).plus(2)));
-	const green = hue2channel(t1, t2, Number(number(hue).div(60)));
-	const blue  = hue2channel(t1, t2, Number(number(hue).div(60).minus(2)));
-
-	return { hue, red, green, blue, alpha, colorspace: 'rgb' };
-}
+		? convertHWBtoRGB(color.hue, color.whiteness, color.blackness)
+	: [ color.red, color.green, color.blue ];
 
-/* Convert HWB to RGB
-/* ========================================================================== */
-
-function hwb2rgb({ hue, whiteness, blackness, alpha = 100 }) {
-	const ratio = Number(number(whiteness).plus(blackness));
-	const rwhiteness = ratio > 100 ? Number(number(whiteness).div(ratio)) : whiteness;
-	const rblackness = ratio > 100 ? Number(number(blackness).div(ratio)) : blackness;
-	const value = Number(number(100).minus(rblackness));
-	const hexagon = number(6).times(hue).div(360);
-
-	const hexagonFloor = Math.floor(hexagon);
-
-	const hexagonF = hexagonFloor % 6
-		? number(1).minus(
-			hexagon.minus(hexagonFloor)
-		)
-	: hexagon.minus(hexagonFloor);
-
-	const interpolation = Number(number(rwhiteness).plus(
-		hexagonF.times(
-			number(value).minus(rwhiteness)
-		)
-	));
-
-	const [red, green, blue] = hexagonFloor % 6 === 5
-		? [value, rwhiteness, interpolation]
-	: hexagonFloor % 6 === 4
-		? [interpolation, rwhiteness, value]
-	: hexagonFloor % 6 === 3
-		? [rwhiteness, interpolation, value]
-	: hexagonFloor % 6 === 2
-		? [rwhiteness, value, interpolation]
-	: hexagonFloor % 6 === 1
-		? [interpolation, value, rwhiteness]
-	: [value, interpolation, rwhiteness];
-
-	return { hue, red, green, blue, alpha, colorspace: 'rgb' };
+	return { red, green, blue, hue: color.hue, alpha: color.alpha, colorspace: 'rgb' };
 }
 
-/* Convert RGB to HSL
-/* ========================================================================== */
-
-function rgb2hsl({ red, green, blue, alpha = 100 }, fallback = 0) { // eslint-disable-line max-params
-	const hue        = rgb2hue(red, green, blue, fallback);
-	const whiteness  = rgb2whiteness(red, green, blue);
-	const value      = rgb2value(red, green, blue);
-	const lightness  = wv2lightness(whiteness, value);
-	const saturation = lvw2saturation(lightness, value, whiteness);
-
-	return { hue, saturation, lightness, alpha, colorspace: 'hsl' };
-}
-
-/* Convert RGB to HWB
-/* ========================================================================== */
-
-function rgb2hwb({ red, green, blue, alpha = 100 }, fallback = 0) { // eslint-disable-line max-params
-	const hue       = rgb2hue(red, green, blue, fallback);
-	const whiteness = rgb2whiteness(red, green, blue);
-	const value     = rgb2value(red, green, blue);
-	const blackness = Number(number(100).minus(value));
-
-	return { hue, whiteness, blackness, alpha, colorspace: 'hwb' };
-}
-
-/* Convert Hue to RGB
-/* ========================================================================== */
+function color2hsl(color) {
+	const [ hue, saturation, lightness ] = color.colorspace === 'rgb'
+		? convertRGBtoHSL(color.red, color.green, color.blue, color.hue)
+	: color.colorspace === 'hwb'
+		? convertHWBtoHSL(color.hue, color.whiteness, color.blackness)
+	: [ color.hue, color.saturation, color.lightness ];
 
-function hue2channel(t1, t2, hue) {
-	const huerange = hue < 0
-		? number(hue).plus(6)
-	: hue >= 6
-		? number(hue).minus(6)
-	: number(hue);
-
-	const rgb = huerange < 1
-		? Number(number(number(t2).minus(t1)).times(hue).plus(t1))
-	: hue < 3
-		? t2
-	: hue < 4
-		? Number(number(number(t2).minus(t1)).times(number(4).minus(hue)).plus(t1))
-	: t1;
-
-	return Number(number(rgb).times(100));
+	return { hue, saturation, lightness, alpha: color.alpha, colorspace: 'hsl' };
 }
 
-/* Convert RGB to Hue
-/* ========================================================================== */
-
-function rgb2hue(red, green, blue, fallback) { // eslint-disable-line max-params
-	const whiteness = rgb2whiteness(red, green, blue);
-	const value     = rgb2value(red, green, blue);
-	const chroma    = vw2chroma(value, whiteness);
+function color2hwb(color) {
+	const [ hue, whiteness, blackness ] = color.colorspace === 'rgb'
+		? convertRGBtoHWB(color.red, color.green, color.blue, color.hue)
+	: color.colorspace === 'hsl'
+		? convertHSLtoHWB(color.hue, color.saturation, color.lightness)
+	: [ color.hue, color.whiteness, color.blackness ];
 
-	if (chroma === 0) {
-		return fallback;
-	} else {
-		const segment = value === red
-			? number(green).minus(blue).div(chroma)
-		: value === green
-			? number(blue).minus(red).div(chroma)
-		: number(red).minus(green).div(chroma);
-
-		const shift = value === red
-			? segment < 0
-				? 360 / 60
-				: 0 / 60
-		: value === green
-			? 120 / 60
-		: 240 / 60;
-
-		const hue = Number(number(segment).plus(shift).times(60));
-
-		return hue;
-	}
+	return { hue, whiteness, blackness, alpha: color.alpha, colorspace: 'hwb' };
 }
 
 /* Contrast functions
@@ -415,9 +284,10 @@ function rgb2hue(red, green, blue, fallback) { // eslint-disable-line max-params
 function contrast(color, percentage) {
 	// https://drafts.csswg.org/css-color/#contrast-adjuster
 	const hwb = color2hwb(color);
+	const rgb = color2rgb(color);
 
 	// compute the luminance of the color.
-	const luminance = rgb2luminance(color.red, color.green, color.blue);
+	const luminance = rgb2luminance(rgb.red, rgb.green, rgb.blue);
 
 	// the maximum-contrast color, if it is less than .5
 	const maxContrastColor = luminance < 0.5
@@ -435,7 +305,7 @@ function contrast(color, percentage) {
 	// otherwise, the maximum-contrast color
 	: maxContrastColor;
 
-	// color(maximum-contrast blend(minimum-contrast <percentage> hwb))
+	// color(maximum-contrast blend(minimum-contrast <percentage> hwb)));
 	return blend(maxContrastColor, minContrastColor, percentage, 'hwb', false);
 }
 
@@ -448,9 +318,9 @@ function colors2contrast(color1, color2) {
 
 	return l1 > l2
 		// if l1 is the relative luminance of the lighter of the colors
-		? Number(number(l1).plus(0.05).div(number(l2).plus(0.05)))
+		? (l1 + 0.05) / (l2 + 0.05)
 	// otherwise, if l2 is the relative luminance of the lighter of the colors
-	: Number(number(l2).plus(0.05).div(number(l2).plus(0.05)));
+	: (l2 + 0.05) / (l1 + 0.05);
 }
 
 function rgb2luminance(red, green, blue) {
@@ -461,14 +331,14 @@ function rgb2luminance(red, green, blue) {
 	];
 
 	// https://drafts.csswg.org/css-color/#luminance
-	const luminance = Number(number(0.2126).times(redLuminance).plus(number(0.7152).times(greenLuminance)).plus(number(0.0722).times(blueLuminance)));
+	const luminance = 0.2126 * redLuminance + 0.7152 * greenLuminance + 0.0722 * blueLuminance;
 
 	return luminance;
 }
 
 function channel2luminance(value) {
 	// https://drafts.csswg.org/css-color/#luminance
-	const luminance = value <= 0.03928 ? Number(number(value).div(12.92)) : Math.pow(number(value).plus(0.055).div(1.055), 2.4);
+	const luminance = value <= 0.03928 ? value / 12.92 : Math.pow((value + 0.055) /1.055, 2.4);
 
 	return luminance;
 }
@@ -478,18 +348,18 @@ function colors2contrastRatioColor(hwb, maxHWB) {
 	const modifiedHWB = Object.assign({}, hwb);
 
 	// values to be used for linear interpolations in HWB space
-	let minW = number(hwb.whiteness);
-	let minB = number(hwb.blackness);
-	let maxW = number(maxHWB.whiteness);
-	let maxB = number(maxHWB.blackness);
+	let minW = hwb.whiteness;
+	let minB = hwb.blackness;
+	let maxW = maxHWB.whiteness;
+	let maxB = maxHWB.blackness;
 
 	// find the color with the smallest contrast ratio with the base color that is greater than 4.5
-	while (Number(minW.minus(maxW).abs()) > 100 || Number(minB.minus(maxB).abs()) > 100) {
-		const midW = maxW.plus(minW).div(2).round();
-		const midB = maxB.plus(minB).div(2).round();
+	while (Math.abs(minW - maxW) > 100 || Math.abs(minB - maxB) > 100) {
+		const midW = Math.round((maxW + minW) / 2);
+		const midB = Math.round((maxB + minB) / 2);
 
-		modifiedHWB.whiteness = Number(midW);
-		modifiedHWB.blackness = Number(midB);
+		modifiedHWB.whiteness = midW;
+		modifiedHWB.blackness = midB;
 
 		if (colors2contrast(modifiedHWB, hwb) > 4.5) {
 			maxW = midW;
@@ -503,45 +373,6 @@ function colors2contrastRatioColor(hwb, maxHWB) {
 	return modifiedHWB;
 }
 
-/* Convert RGB to Whiteness
-/* ========================================================================== */
-
-function rgb2whiteness(red, green, blue) {
-	return Math.min(red, green, blue);
-}
-
-/* Convert RGB to Value
-/* ========================================================================== */
-
-function rgb2value(red, green, blue) {
-	return Math.max(red, green, blue)
-}
-
-/* Convert Whiteness and Value to Lightness
-/* ========================================================================== */
-
-function wv2lightness(whiteness, value) {
-	return Number(number(whiteness).plus(value).div(2));
-}
-
-/* Convert Value and Whiteness to Chroma
-/* ========================================================================== */
-
-function vw2chroma(value, whiteness) {
-	return Number(number(value).minus(whiteness));
-}
-
-/* Convert Lightness, Value, and Whiteness to Saturation
-/* ========================================================================== */
-
-function lvw2saturation(lightness, value, whiteness) {
-	return whiteness === value
-		? 0
-	: lightness < 50
-		? Number(number(value).minus(whiteness).div(number(value).plus(whiteness)).times(100))
-	: Number(number(value).minus(whiteness).div(number(200).minus(value).minus(whiteness)).times(100));
-}
-
 /* Match
 /* ========================================================================== */
 
@@ -562,9 +393,9 @@ function color2hslString(color) {
 	const hsl        = color2hsl(color);
 	const isOpaque   = hsl.alpha === 100;
 	const hue        = hsl.hue;
-	const saturation = number(hsl.saturation).round(10);
-	const lightness  = number(hsl.lightness).round(10);
-	const alpha      = number(hsl.alpha).round(10);
+	const saturation = Math.round(hsl.saturation * 10000000000) / 10000000000;
+	const lightness  = Math.round(hsl.lightness * 10000000000) / 10000000000;
+	const alpha      = Math.round(hsl.alpha * 10000000000) / 10000000000;
 
 	return `hsl(${hue} ${saturation}% ${lightness}%${isOpaque
 		? ''
@@ -575,9 +406,9 @@ function color2hwbString(color) {
 	const hwb       = color2hwb(color);
 	const isOpaque  = hwb.alpha === 100;
 	const hue       = hwb.hue;
-	const whiteness = number(hwb.whiteness).round(10);
-	const blackness = number(hwb.blackness).round(10);
-	const alpha     = number(hwb.alpha).round(10);
+	const whiteness = Math.round(hwb.whiteness * 10000000000) / 10000000000;
+	const blackness = Math.round(hwb.blackness * 10000000000) / 10000000000;
+	const alpha     = Math.round(hwb.alpha * 10000000000) / 10000000000;
 
 	return `hwb(${hue} ${whiteness}% ${blackness}%${isOpaque
 		? ''
@@ -587,26 +418,46 @@ function color2hwbString(color) {
 function color2rgbString(color) {
 	const rgb      = color2rgb(color);
 	const isOpaque = rgb.alpha === 100;
-	const red      = number(rgb.red).round(10);
-	const green    = number(rgb.green).round(10);
-	const blue     = number(rgb.blue).round(10);
-	const alpha    = number(rgb.alpha).round(10);
+	const red      = Math.round(rgb.red * 10000000000) / 10000000000;
+	const green    = Math.round(rgb.green * 10000000000) / 10000000000;
+	const blue     = Math.round(rgb.blue * 10000000000) / 10000000000;
+	const alpha    = Math.round(rgb.alpha * 10000000000) / 10000000000;
 
 	return `rgb(${red}% ${green}% ${blue}%${isOpaque
 		? ''
 	: ` / ${alpha}%`})`;
 }
 
+function color2legacyString(color) {
+	return color.colorspace === 'hsl'
+		? color2hslLegacyString(color)
+	: color2rgbLegacyString(color);
+}
+
 function color2rgbLegacyString(color) {
 	const rgb      = color2rgb(color);
 	const isOpaque = rgb.alpha === 100;
 	const name     = isOpaque ? 'rgb' : 'rgba';
-	const red      = number(rgb.red).times(2.55).round(0);
-	const green    = number(rgb.green).times(2.55).round(0);
-	const blue     = number(rgb.blue).times(2.55).round(0);
-	const alpha    = number(rgb.alpha).div(100).round(10);
+	const red      = Math.round(rgb.red * 255 / 100);
+	const green    = Math.round(rgb.green * 255 / 100);
+	const blue     = Math.round(rgb.blue * 255 / 100);
+	const alpha    = Math.round(rgb.alpha / 100 * 10000000000) / 10000000000;
 
 	return `${name}(${red}, ${green}, ${blue}${isOpaque
 		? ''
 	: `, ${alpha}`})`;
 }
+
+function color2hslLegacyString(color) {
+	const hsl        = color2hsl(color);
+	const isOpaque   = hsl.alpha === 100;
+	const name       = isOpaque ? 'hsl' : 'hsla';
+	const hue        = hsl.hue;
+	const saturation = Math.round(hsl.saturation * 10000000000) / 10000000000;
+	const lightness  = Math.round(hsl.lightness * 10000000000) / 10000000000;
+	const alpha      = Math.round(hsl.alpha / 100 * 10000000000) / 10000000000;
+
+	return `${name}(${hue}, ${saturation}%, ${lightness}%${isOpaque
+		? ''
+	: `, ${alpha}`})`;
+}
diff --git a/lib/conversions.js b/lib/conversions.js
new file mode 100644
index 0000000..22003ca
--- /dev/null
+++ b/lib/conversions.js
@@ -0,0 +1,380 @@
+/* Convert Degree to Hue Degree
+/* ========================================================================== */
+
+export function convertDtoD(deg) {
+	return deg % 360;
+}
+
+/* Convert Gradian to Hue Degree
+/* ========================================================================== */
+
+export function convertGtoD(grad) {
+	return grad * 0.9 % 360;
+}
+
+/* Convert Radian to Hue Degree
+/* ========================================================================== */
+
+export function convertRtoD(rad) {
+	return rad * 180 / Math.PI % 360;
+}
+
+/* Convert Turn to Hue Degree
+/* ========================================================================== */
+
+export function convertTtoD(turn) {
+	return turn * 360 % 360;
+}
+
+/* Convert Red/Green/Blue to Red/Green/Blue (0 - 255)
+/* ========================================================================== */
+
+export function convertRGBtoRGB255(red, green, blue) {
+	const red255   = convertChannelToChannel255(red);
+	const green255 = convertChannelToChannel255(green);
+	const blue255  = convertChannelToChannel255(blue);
+
+	return [red255, green255, blue255];
+}
+
+/* Convert Red/Green/Blue to Hue/Saturation/Lightness
+/* ========================================================================== */
+
+export function convertRGBtoHSL(red, green, blue, fallbackHue = 0) {
+	const hue        = convertRGBtoH(red, green, blue, fallbackHue);
+	const whiteness  = convertRGBtoW(red, green, blue);
+	const value      = convertRGBtoV(red, green, blue);
+	const lightness  = convertWVtoL(whiteness, value);
+	const saturation = convertLVWtoS(lightness, value, whiteness);
+
+	return [ hue, saturation, lightness ];
+}
+
+/* Convert Red/Green/Blue to Hue/Whiteness/Blackness
+/* ========================================================================== */
+
+export function convertRGBtoHWB(red, green, blue, fallbackHue = 0) {
+	const hue       = convertRGBtoH(red, green, blue, fallbackHue);
+	const whiteness = convertRGBtoW(red, green, blue);
+	const value     = convertRGBtoV(red, green, blue);
+	const blackness = convertVtoB(value);
+
+	return [ hue, whiteness, blackness ];
+}
+
+/* Convert Hue/Saturation/Lightness to Red/Green/Blue (and fallback Hue)
+/* ========================================================================== */
+
+export function convertHSLtoRGB(hue, saturation, lightness) {
+	const hexagon = hue / 60;
+
+	const t2 = lightness <= 50
+		? lightness * (saturation + 100) / 10000
+	: (lightness + saturation) / 100 - lightness * saturation / 10000;
+
+	const t1 = lightness * 0.02 - t2;
+
+	const red   = convertTTHtoChannel(t1, t2, hexagon + 2) * 100;
+	const green = convertTTHtoChannel(t1, t2, hexagon) * 100;
+	const blue  = convertTTHtoChannel(t1, t2, hexagon - 2) * 100;
+
+	return [red, green, blue];
+}
+
+/* Convert Hue/Saturation/Lightness to Hue/Whiteness/Blackness
+/* ========================================================================== */
+
+export function convertHSLtoHWB(hue, saturation, lightness) {
+	const [ red, green, blue ] = convertHSLtoRGB(hue, saturation, lightness);
+	const [ , whiteness, blackness ] = convertRGBtoHWB(red, green, blue, hue);
+
+	return [ hue, whiteness, blackness ];
+}
+
+/* Convert Hue/Whiteness/Blackness to Hue/Saturation/Lightness
+/* ========================================================================== */
+
+export function convertHWBtoHSL(hue, whiteness, blackness) {
+	const [ red, green, blue ] = convertHWBtoRGB(hue, whiteness, blackness);
+	const [ , saturation, lightness ] = convertRGBtoHSL(red, green, blue, hue);
+
+	return [ hue, saturation, lightness ];
+}
+
+/* Convert Hue/Whiteness/Blackness to Red/Green/Blue (and fallback Hue)
+/* ========================================================================== */
+
+export function convertHWBtoRGB(hue, whiteness, blackness) {
+	const [ hslRed, hslGreen, hslBlue ] = convertHSLtoRGB(hue, 100, 50);
+
+	const tot = whiteness + blackness;
+	const w = tot > 100 ? whiteness / tot * 100 : whiteness;
+	const b = tot > 100 ? blackness / tot * 100 : blackness;
+
+	const red   = hslRed   * (100 - w - b) / 100 + w;
+	const green = hslGreen * (100 - w - b) / 100 + w;
+	const blue  = hslBlue  * (100 - w - b) / 100 + w;
+
+	return [red, green, blue];
+}
+
+/* Convert Channel to Channel (0 - 255)
+/* ========================================================================== */
+
+export function convertChannelToChannel255(channel) {
+	return Math.round(channel * 2.55);
+}
+
+/* Convert Red/Green/Blue to Hue
+/* ========================================================================== */
+
+export function convertRGBtoH(red, green, blue, fallbackHue = 0) {
+	const whiteness = convertRGBtoW(red, green, blue);
+	const value     = convertRGBtoV(red, green, blue);
+	const chroma    = convertVWtoC(value, whiteness);
+
+	if (chroma === 0) {
+		return fallbackHue;
+	} else {
+		const segment = value === red
+			? (green - blue) / chroma
+		: value === green
+			? (blue - red) / chroma
+		: (red - green) / chroma;
+
+		const shift = value === red
+			? segment < 0
+				? 360 / 60
+				: 0 / 60
+		: value === green
+			? 120 / 60
+		: 240 / 60;
+
+		const hue = (segment + shift) * 60;
+
+		return hue;
+	}
+}
+
+/* Convert Red/Green/Blue to Whiteness
+/* ========================================================================== */
+
+export function convertRGBtoW(red, green, blue) {
+	return Math.min(red, green, blue);
+}
+
+/* Convert Red/Green/Blue to Value
+/* ========================================================================== */
+
+export function convertRGBtoV(red, green, blue) {
+	return Math.max(red, green, blue);
+}
+
+/* Convert Value/Whiteness to Chroma
+/* ========================================================================== */
+
+export function convertVWtoC(value, whiteness) {
+	return value - whiteness;
+}
+
+/* Convert Whiteness/Value to Lightness
+/* ========================================================================== */
+
+export function convertWVtoL(whiteness, value) {
+	return (whiteness + value) / 2;
+}
+
+/* Convert Lightness/Value/Whiteness to Saturation
+/* ========================================================================== */
+
+export function convertLVWtoS(lightness, value, whiteness) {
+	return whiteness === value
+		? 0
+	: lightness < 50
+		? (value - whiteness) / (value + whiteness) * 100
+	: (value - whiteness) / (200 - value - whiteness) * 100;
+}
+
+/* Convert Value to Blackness
+/* ========================================================================== */
+
+export function convertVtoB(value) {
+	return 100 - value;
+}
+
+/* Convert Hue parts to Channel
+/* ========================================================================== */
+
+export function convertTTHtoChannel(t1, t2, hexagon) {
+	const althexagon = hexagon < 0
+		? hexagon + 6
+	: hexagon >= 6
+		? hexagon - 6
+	: hexagon;
+
+	return althexagon < 1
+		? (t2 - t1) * althexagon + t1
+	: althexagon < 3
+		? t2
+	: althexagon < 4
+		? (t2 - t1) * (4 - althexagon) + t1
+	: t1;
+}
+
+/* Convert a Name to Red/Green/Blue
+/* ========================================================================== */
+
+export function convertNtoRGB(name) {
+	const names = {
+		aliceblue: [240, 248, 255],
+		antiquewhite: [250, 235, 215],
+		aqua: [0, 255, 255],
+		aquamarine: [127, 255, 212],
+		azure: [240, 255, 255],
+		beige: [245, 245, 220],
+		bisque: [255, 228, 196],
+		black: [0, 0, 0],
+		blanchedalmond: [255, 235, 205],
+		blue: [0, 0, 255],
+		blueviolet: [138, 43, 226],
+		brown: [165, 42, 42],
+		burlywood: [222, 184, 135],
+		cadetblue: [95, 158, 160],
+		chartreuse: [127, 255, 0],
+		chocolate: [210, 105, 30],
+		coral: [255, 127, 80],
+		cornflowerblue: [100, 149, 237],
+		cornsilk: [255, 248, 220],
+		crimson: [220, 20, 60],
+		cyan: [0, 255, 255],
+		darkblue: [0, 0, 139],
+		darkcyan: [0, 139, 139],
+		darkgoldenrod: [184, 134, 11],
+		darkgray: [169, 169, 169],
+		darkgreen: [0, 100, 0],
+		darkgrey: [169, 169, 169],
+		darkkhaki: [189, 183, 107],
+		darkmagenta: [139, 0, 139],
+		darkolivegreen: [85, 107, 47],
+		darkorange: [255, 140, 0],
+		darkorchid: [153, 50, 204],
+		darkred: [139, 0, 0],
+		darksalmon: [233, 150, 122],
+		darkseagreen: [143, 188, 143],
+		darkslateblue: [72, 61, 139],
+		darkslategray: [47, 79, 79],
+		darkslategrey: [47, 79, 79],
+		darkturquoise: [0, 206, 209],
+		darkviolet: [148, 0, 211],
+		deeppink: [255, 20, 147],
+		deepskyblue: [0, 191, 255],
+		dimgray: [105, 105, 105],
+		dimgrey: [105, 105, 105],
+		dodgerblue: [30, 144, 255],
+		firebrick: [178, 34, 34],
+		floralwhite: [255, 250, 240],
+		forestgreen: [34, 139, 34],
+		fuchsia: [255, 0, 255],
+		gainsboro: [220, 220, 220],
+		ghostwhite: [248, 248, 255],
+		gold: [255, 215, 0],
+		goldenrod: [218, 165, 32],
+		gray: [128, 128, 128],
+		green: [0, 128, 0],
+		greenyellow: [173, 255, 47],
+		grey: [128, 128, 128],
+		honeydew: [240, 255, 240],
+		hotpink: [255, 105, 180],
+		indianred: [205, 92, 92],
+		indigo: [75, 0, 130],
+		ivory: [255, 255, 240],
+		khaki: [240, 230, 140],
+		lavender: [230, 230, 250],
+		lavenderblush: [255, 240, 245],
+		lawngreen: [124, 252, 0],
+		lemonchiffon: [255, 250, 205],
+		lightblue: [173, 216, 230],
+		lightcoral: [240, 128, 128],
+		lightcyan: [224, 255, 255],
+		lightgoldenrodyellow: [250, 250, 210],
+		lightgray: [211, 211, 211],
+		lightgreen: [144, 238, 144],
+		lightgrey: [211, 211, 211],
+		lightpink: [255, 182, 193],
+		lightsalmon: [255, 160, 122],
+		lightseagreen: [32, 178, 170],
+		lightskyblue: [135, 206, 250],
+		lightslategray: [119, 136, 153],
+		lightslategrey: [119, 136, 153],
+		lightsteelblue: [176, 196, 222],
+		lightyellow: [255, 255, 224],
+		lime: [0, 255, 0],
+		limegreen: [50, 205, 50],
+		linen: [250, 240, 230],
+		magenta: [255, 0, 255],
+		maroon: [128, 0, 0],
+		mediumaquamarine: [102, 205, 170],
+		mediumblue: [0, 0, 205],
+		mediumorchid: [186, 85, 211],
+		mediumpurple: [147, 112, 219],
+		mediumseagreen: [60, 179, 113],
+		mediumslateblue: [123, 104, 238],
+		mediumspringgreen: [0, 250, 154],
+		mediumturquoise: [72, 209, 204],
+		mediumvioletred: [199, 21, 133],
+		midnightblue: [25, 25, 112],
+		mintcream: [245, 255, 250],
+		mistyrose: [255, 228, 225],
+		moccasin: [255, 228, 181],
+		navajowhite: [255, 222, 173],
+		navy: [0, 0, 128],
+		oldlace: [253, 245, 230],
+		olive: [128, 128, 0],
+		olivedrab: [107, 142, 35],
+		orange: [255, 165, 0],
+		orangered: [255, 69, 0],
+		orchid: [218, 112, 214],
+		palegoldenrod: [238, 232, 170],
+		palegreen: [152, 251, 152],
+		paleturquoise: [175, 238, 238],
+		palevioletred: [219, 112, 147],
+		papayawhip: [255, 239, 213],
+		peachpuff: [255, 218, 185],
+		peru: [205, 133, 63],
+		pink: [255, 192, 203],
+		plum: [221, 160, 221],
+		powderblue: [176, 224, 230],
+		purple: [128, 0, 128],
+		rebeccapurple: [102, 51, 153],
+		red: [255, 0, 0],
+		rosybrown: [188, 143, 143],
+		royalblue: [65, 105, 225],
+		saddlebrown: [139, 69, 19],
+		salmon: [250, 128, 114],
+		sandybrown: [244, 164, 96],
+		seagreen: [46, 139, 87],
+		seashell: [255, 245, 238],
+		sienna: [160, 82, 45],
+		silver: [192, 192, 192],
+		skyblue: [135, 206, 235],
+		slateblue: [106, 90, 205],
+		slategray: [112, 128, 144],
+		slategrey: [112, 128, 144],
+		snow: [255, 250, 250],
+		springgreen: [0, 255, 127],
+		steelblue: [70, 130, 180],
+		tan: [210, 180, 140],
+		teal: [0, 128, 128],
+		thistle: [216, 191, 216],
+		tomato: [255, 99, 71],
+		turquoise: [64, 224, 208],
+		violet: [238, 130, 238],
+		wheat: [245, 222, 179],
+		white: [255, 255, 255],
+		whitesmoke: [245, 245, 245],
+		yellow: [255, 255, 0],
+		yellowgreen: [154, 205, 50]
+	};
+
+	return names[name];
+}
diff --git a/lib/manage-unresolved.js b/lib/manage-unresolved.js
index 3a8ef68..028a8db 100644
--- a/lib/manage-unresolved.js
+++ b/lib/manage-unresolved.js
@@ -1,4 +1,4 @@
-export default function manageUnresolved(node, opts, word, message) { // eslint-disable-line max-params
+export default function manageUnresolved(node, opts, word, message) {
 	if ('warn' === opts.unresolved) {
 		opts.decl.warn(opts.result, message, { word });
 	} else if ('ignore' !== opts.unresolved) {
diff --git a/lib/transform.js b/lib/transform.js
index 64c2e79..13e4ffa 100644
--- a/lib/transform.js
+++ b/lib/transform.js
@@ -1,8 +1,7 @@
 // tooling
+import { convertDtoD, convertGtoD, convertRtoD, convertTtoD, convertNtoRGB } from './conversions';
 import Color from './color';
 import manageUnresolved from './manage-unresolved';
-import names from 'color-name';
-import number from 'big.js';
 import parser from 'postcss-values-parser';
 
 /* Transform AST
@@ -52,10 +51,14 @@ function transformColor(node, opts) {
 // return a transformed rgb/rgba color function
 function transformRGBFunction(node, opts) {
 	const [red, green, blue, alpha = 100] = transformArgsByParams(node, [
-		// [ <percentage>{3} | <rgb-value>{3} ] [ / <alpha-value> ]?
-		[transformRGBValue, transformRGBValue, transformRGBValue, isSlash, transformAlpha],
-		// <number>#{3} [ , <alpha-value> ]? ]
-		[transformRGBValue, isComma, transformRGBValue, isComma, transformRGBValue, isComma, transformAlpha]
+		// <percentage> <percentage> <percentage> [ , <alpha-value> ]?
+		[transformPercentage, transformPercentage, transformPercentage, isSlash, transformAlpha],
+		// <number> <number> <number> [ , <alpha-value> ]?
+		[transformRGBNumber, transformRGBNumber, transformRGBNumber, isSlash, transformAlpha],
+		// <percentage> , <percentage> , <percentage> [ , <alpha-value> ]?
+		[transformPercentage, isComma, transformPercentage, isComma, transformPercentage, isComma, transformAlpha],
+		// <number> , <number> , <number> [ , <alpha-value> ]?
+		[transformRGBNumber, isComma, transformRGBNumber, isComma, transformRGBNumber, isComma, transformAlpha]
 	]);
 
 	if (red !== undefined) {
@@ -70,9 +73,9 @@ function transformRGBFunction(node, opts) {
 // return a transformed hsl/hsla color function
 function transformHSLFunction(node, opts) {
 	const [hue, saturation, lightness, alpha = 100] = transformArgsByParams(node, [
-		// <hue> <percentage>{2} [ / <alpha-value> ]?
+		// <hue> <percentage> <percentage> [ / <alpha-value> ]?
 		[transformHue, transformPercentage, transformPercentage, isSlash, transformAlpha],
-		// hue, <percentage>#{2} [ , <alpha-value> ]? ]
+		// <hue> , <percentage> , <percentage> [ , <alpha-value> ]?
 		[transformHue, isComma, transformPercentage, isComma, transformPercentage, isComma, transformAlpha]
 	]);
 
@@ -136,10 +139,10 @@ function transformHexColor(node, opts) {
 		const [r, g, b, a, rr, gg, bb, aa] = (node.value.match(hexColorMatch) || []).slice(1);
 
 		const color = new Color({
-			red:   rr !== undefined ? Number(number(parseInt(rr, 16)).div(2.55)) : r !== undefined ? Number(number(parseInt(r + r, 16)).div(2.55)) : 0,
-			green: gg !== undefined ? Number(number(parseInt(gg, 16)).div(2.55)) : g !== undefined ? Number(number(parseInt(g + g, 16)).div(2.55)) : 0,
-			blue:  bb !== undefined ? Number(number(parseInt(bb, 16)).div(2.55)) : b !== undefined ? Number(number(parseInt(b + b, 16)).div(2.55)) : 0,
-			alpha: aa !== undefined ? Number(number(parseInt(aa, 16)).div(2.55)) : a !== undefined ? Number(number(parseInt(a + a, 16)).div(2.55)) : 100
+			red:   rr !== undefined ? parseInt(rr, 16) / 2.55 : r !== undefined ? parseInt(r + r, 16) / 2.55 : 0,
+			green: gg !== undefined ? parseInt(gg, 16) / 2.55 : g !== undefined ? parseInt(g + g, 16) / 2.55 : 0,
+			blue:  bb !== undefined ? parseInt(bb, 16) / 2.55 : b !== undefined ? parseInt(b + b, 16) / 2.55 : 0,
+			alpha: aa !== undefined ? parseInt(aa, 16) / 2.55 : a !== undefined ? parseInt(a + a, 16) / 2.55 : 100
 		});
 
 		return color;
@@ -152,12 +155,12 @@ function transformHexColor(node, opts) {
 function transformNamedColor(node, opts) {
 	if (isNamedColor(node)) {
 		// <named-color>
-		const [red, green, blue] = names[node.value];
+		const [red, green, blue] = convertNtoRGB(node.value);
 
 		const color = new Color({
-			red: Number(number(red).div(2.55)),
-			green: Number(number(green).div(2.55)),
-			blue: Number(number(blue).div(2.55)),
+			red: red / 2.55,
+			green: green / 2.55,
+			blue: blue / 2.55,
 			alpha: 100,
 			colorspace: 'rgb'
 		});
@@ -201,21 +204,27 @@ function transformColorByAdjusters(color, adjusterNodes, opts) {
 // return a transformed color using a/alpha/blue/green/red adjustments
 function transformAlphaBlueGreenRedAdjuster(base, node, opts) {
 	const [operatorOrValue, adjustment] = transformArgsByParams(node, alphaMatch.test(node.value)
+			// a/alpha adjustments
 			? [
 				// [ + | - ] <alpha-value>
 				[transformMinusPlusOperator, transformAlpha],
-				// * <alpha-value>
+				// * <percentage>
 				[transformTimesOperator, transformPercentage],
 				// <alpha-value>
 				[transformAlpha]
 			]
+		// blue/green/red adjustments
 		: [
-			// [ + | - ] <rgb-value>
-			[transformMinusPlusOperator, transformRGBValue],
+			// [ + | - ] <percentage>
+			[transformMinusPlusOperator, transformPercentage],
+			// [ + | - ] <number>
+			[transformMinusPlusOperator, transformRGBNumber],
 			// * <percentage>
 			[transformTimesOperator, transformPercentage],
-			// <rgb-value>
-			[transformRGBValue]
+			// <percentage>
+			[transformPercentage],
+			// <number>
+			[transformRGBNumber]
 		]
 	);
 
@@ -223,19 +232,19 @@ function transformAlphaBlueGreenRedAdjuster(base, node, opts) {
 		// normalized channel name
 		const channel = node.value.toLowerCase().replace(alphaMatch, 'alpha');
 
-		const existingValue = number(base[channel]());
+		const existingValue = base[channel]();
 
 		const modifiedValue = adjustment !== undefined
 			? operatorOrValue === '+'
-				? existingValue.plus(adjustment)
+				? existingValue + Number(adjustment)
 			: operatorOrValue === '-'
-				? existingValue.minus(adjustment)
+				? existingValue - Number(adjustment)
 			: operatorOrValue === '*'
-				? existingValue.times(adjustment)
-			: adjustment
-		: operatorOrValue;
+				? existingValue * Number(adjustment)
+			: Number(adjustment)
+		: Number(operatorOrValue);
 
-		const modifiedColor = base[channel](Number(modifiedValue));
+		const modifiedColor = base[channel](modifiedValue);
 
 		return modifiedColor;
 	} else {
@@ -246,10 +255,10 @@ function transformAlphaBlueGreenRedAdjuster(base, node, opts) {
 // return a transformed color using an rgb adjustment
 function transformRGBAdjuster(base, node, opts) {
 	const [arg1, arg2, arg3, arg4] = transformArgsByParams(node, [
-			// [ + | - ] <number> <number> <number>
-			[transformMinusPlusOperator, transformRGBNumber, transformRGBNumber, transformRGBNumber],
 			// [ + | - ] <percentage> <percentage> <percentage>
 			[transformMinusPlusOperator, transformPercentage, transformPercentage, transformPercentage],
+			// [ + | - ] <number> <number> <number>
+			[transformMinusPlusOperator, transformRGBNumber, transformRGBNumber, transformRGBNumber],
 			// [ + | - ] <hash-token>
 			[transformMinusPlusOperator, transformHexColor],
 			// [ * ] <percentage>
@@ -260,36 +269,36 @@ function transformRGBAdjuster(base, node, opts) {
 	if (arg2 !== undefined && arg2.color) {
 		const modifiedColor = base.rgb(
 			arg1 === '+'
-				? Number(number(base.red()).plus(arg2.red()))
-			: Number(number(base.red()).minus(arg2.red())),
+				? base.red() + arg2.red()
+			: base.red() - arg2.red(),
 			arg1 === '+'
-				? Number(number(base.green()).plus(arg2.green()))
-			: Number(number(base.green()).minus(arg2.green())),
+				? base.green() + arg2.green()
+			: base.green() - arg2.green(),
 			arg1 === '+'
-				? Number(number(base.blue()).plus(arg2.blue()))
-			: Number(number(base.blue()).minus(arg2.blue()))
+				? base.blue() + arg2.blue()
+			: base.blue() - arg2.blue()
 		);
 
 		return modifiedColor;
 	} else if (arg1 !== undefined && minusPlusMatch.test(arg1)) {
 		const modifiedColor = base.rgb(
 			arg1 === '+'
-				? Number(number(base.red()).plus(arg2))
-			: Number(number(base.red()).minus(arg2)),
+				? base.red() + arg2
+			: base.red() - arg2,
 			arg1 === '+'
-				? Number(number(base.green()).plus(arg3))
-			: Number(number(base.green()).minus(arg3)),
+				? base.green() + arg3
+			: base.green() - arg3,
 			arg1 === '+'
-				? Number(number(base.blue()).plus(arg4))
-			: Number(number(base.blue()).minus(arg4))
+				? base.blue() + arg4
+			: base.blue() - arg4
 		);
 
 		return modifiedColor;
 	} else if (arg1 !== undefined && arg2 !== undefined) {
 		const modifiedColor = base.rgb(
-			Number(number(base.red()).times(arg2)),
-			Number(number(base.green()).times(arg2)),
-			Number(number(base.blue()).times(arg2))
+			base.red() * arg2,
+			base.green() * arg2,
+			base.blue() * arg2
 		);
 
 		return modifiedColor;
@@ -299,7 +308,7 @@ function transformRGBAdjuster(base, node, opts) {
 }
 
 // return a transformed color using a blend/blenda adjustment
-function transformBlendAdjuster(base, node, isAlphaBlend, opts) { // eslint-disable-line max-params
+function transformBlendAdjuster(base, node, isAlphaBlend, opts) {
 	const [color, percentage, colorspace = 'rgb'] = transformArgsByParams(node, [
 		[transformColor, transformPercentage, transformColorSpace]
 	]);
@@ -345,15 +354,15 @@ function transformHueAdjuster(base, node, opts) {
 
 		const modifiedValue = adjustment !== undefined
 			? operatorOrHue === '+'
-				? number(existingHue).plus(adjustment)
+				? existingHue + Number(adjustment)
 			: operatorOrHue === '-'
-				? number(existingHue).minus(adjustment)
+				? existingHue - Number(adjustment)
 			: operatorOrHue === '*'
-				? number(existingHue).times(adjustment)
-			: number(adjustment)
-		: number(operatorOrHue);
+				? existingHue * Number(adjustment)
+			: Number(adjustment)
+		: Number(operatorOrHue);
 
-		return base.hue(Number(modifiedValue));
+		return base.hue(modifiedValue);
 	} else {
 		return manageUnresolved(node, opts, node.value, `Expected a valid hue() function)`);
 	}
@@ -362,26 +371,23 @@ function transformHueAdjuster(base, node, opts) {
 // [ b | blackness | l | lightness | s | saturation | w | whiteness ]( [ + | - | * ]? <percentage> )
 function transformBlacknessLightnessSaturationWhitenessAdjuster(base, node, opts) {
 	const channel = node.value.toLowerCase().replace(/^b$/, 'blackness').replace(/^l$/, 'lightness').replace(/^s$/, 'saturation').replace(/^w$/, 'whiteness');
-	const [operatorOrValue, rawAdjustment] = transformArgsByParams(node, [
+	const [operatorOrValue, adjustment] = transformArgsByParams(node, [
 		[transformMinusPlusTimesOperator, transformPercentage],
 		[transformPercentage]
 	]);
 
 	if (operatorOrValue !== undefined) {
-		const existingValue = number(base[channel]());
-		const adjustment = parseFloat(rawAdjustment);
+		const existingValue = base[channel]();
 
-		const rawModifiedValue = !isNaN(adjustment)
+		const modifiedValue = adjustment !== undefined
 			? operatorOrValue === '+'
-				? existingValue.plus(adjustment)
+				? existingValue + Number(adjustment)
 			: operatorOrValue === '-'
-				? existingValue.minus(adjustment)
+				? existingValue - Number(adjustment)
 			: operatorOrValue === '*'
-				? existingValue.times(adjustment)
-			: number(adjustment)
-		: number(operatorOrValue);
-
-		const modifiedValue = Number(rawModifiedValue);
+				? existingValue * Number(adjustment)
+			: Number(adjustment)
+		: Number(operatorOrValue);
 
 		return base[channel](modifiedValue);
 	} else {
@@ -398,7 +404,7 @@ function transformShadeTintAdjuster(base, node, opts) {
 	]);
 
 	if (percentage !== undefined) {
-		const modifiedValue = parseFloat(percentage);
+		const modifiedValue = Number(percentage);
 
 		return base[channel](modifiedValue);
 	} else {
@@ -423,7 +429,7 @@ function transformColorSpace(node, opts) {
 function transformAlpha(node, opts) {
 	if (isNumber(node)) {
 		// <number>
-		return Number(number(node.value).times(100));
+		return node.value * 100;
 	} else if (isPercentage(node)) {
 		// <percentage>
 		return transformPercentage(node, opts);
@@ -432,24 +438,11 @@ function transformAlpha(node, opts) {
 	}
 }
 
-// return a transformed rgb value
-function transformRGBValue(node, opts) {
-	if (isNumber(node)) {
-		// <rgba-number>
-		return transformRGBNumber(node, opts);
-	} else if (isPercentage(node)) {
-		// <percentage>
-		return transformPercentage(node, opts);
-	} else {
-		return manageUnresolved(node, opts, node.value, `Expected a valid RGB value)`);
-	}
-}
-
 // return a transformed rgb number
 function transformRGBNumber(node, opts) {
 	if (isNumber(node)) {
-		// <rgba-number>
-		return Number(number(node.value).div(2.55));
+		// <number>
+		return node.value / 2.55;
 	} else {
 		return manageUnresolved(node, opts, node.value, `Expected a valid RGB value)`);
 	}
@@ -458,8 +451,22 @@ function transformRGBNumber(node, opts) {
 // return a transformed hue
 function transformHue(node, opts) {
 	if (isHue(node)) {
-		// <hue>
-		return parseFloat(node.value);
+		// <hue> = <number> | <angle>
+		const unit = node.unit.toLowerCase();
+
+		if (unit === 'grad') {
+			// if <angle> = <gradian> (400 per circle)
+			return convertGtoD(node.value);
+		} else if (unit === 'rad') {
+			// if <angle> = <radian> (2π per circle)
+			return convertRtoD(node.value);
+		} else if (unit === 'turn') {
+			// if <angle> = <turn> (1 per circle)
+			return convertTtoD(node.value);
+		} else {
+			// if <angle> = [ <degree> | <number> ] (360 per circle)
+			return convertDtoD(node.value);
+		}
 	} else {
 		return manageUnresolved(node, opts, node.value, `Expected a valid hue`);
 	}
@@ -469,7 +476,7 @@ function transformHue(node, opts) {
 function transformPercentage(node, opts) {
 	if (isPercentage(node)) {
 		// <percentage>
-		return Number(number(node.value));
+		return Number(node.value);
 	} else {
 		return manageUnresolved(node, opts, node.value, `Expected a valid hue`);
 	}
@@ -593,7 +600,7 @@ function isColorModFunction(node) {
 
 // return whether the node is a valid named-color
 function isNamedColor(node) {
-	return Object(node).type === 'word' && node.value in names;
+	return Object(node).type === 'word' && Boolean(convertNtoRGB(node.value));
 }
 
 // return whether the node is a valid hex color
@@ -613,7 +620,7 @@ function isColorSpace(node) {
 
 // return whether the hue value is valid
 function isHue(node) {
-	return Object(node).type === 'number' && /^(deg)?$/.test(node.unit);
+	return Object(node).type === 'number' && hueUnitMatch.test(node.unit);
 }
 
 // return whether the comma is valid
@@ -663,6 +670,7 @@ const colorSpaceMatch = /^(hsl|hwb|rgb)$/i;
 const contrastMatch = /^contrast$/i;
 const hexColorMatch = /^#(?:([a-f0-9])([a-f0-9])([a-f0-9])([a-f0-9])?|([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})?)$/i;
 const hslaMatch = /^hsla?$/i;
+const hueUnitMatch = /^(deg|grad|rad|turn)?$/i;
 const hueMatch = /^h(ue)?$/i;
 const hwbMatch = /^hwb$/i;
 const minusPlusMatch = /^[+-]$/;
diff --git a/package.json b/package.json
index adb148c..edcbf1a 100644
--- a/package.json
+++ b/package.json
@@ -1,6 +1,6 @@
 {
   "name": "postcss-color-mod-function",
-  "version": "2.0.0",
+  "version": "2.1.0",
   "description": "Modify colors using the color-mod() function in CSS",
   "author": "Jonathan Neal <jonathantneal@hotmail.com>",
   "license": "CC0-1.0",
@@ -26,8 +26,6 @@
     "node": ">=4.0.0"
   },
   "dependencies": {
-    "big.js": "^5.0.3",
-    "color-name": "^1.1.3",
     "postcss": "^6.0",
     "postcss-values-parser": "^1.3.1"
   },
@@ -36,7 +34,7 @@
     "babel-eslint": "^8.2",
     "babel-preset-env": "^1.6",
     "echint": "^4.0",
-    "eslint": "^4.15",
+    "eslint": "^4.16",
     "eslint-config-dev": "2.0",
     "postcss-tape": "2.2",
     "pre-commit": "^1.2",
@@ -45,7 +43,13 @@
   },
   "eslintConfig": {
     "extends": "dev",
-    "parser": "babel-eslint"
+    "parser": "babel-eslint",
+    "rules": {
+      "max-params": [
+        2,
+        5
+      ]
+    }
   },
   "keywords": [
     "postcss",
diff --git a/test/basic.colors.expect.css b/test/basic.colors.expect.css
index c6698e8..e06f831 100644
--- a/test/basic.colors.expect.css
+++ b/test/basic.colors.expect.css
@@ -21,6 +21,9 @@ test-color-mod {
 	color: hwb(0 0% 0%);
 	color: hsl(0 100% 50%);
 	color: hsl(0 100% 50%);
+	color: hsl(0 100% 50%);
+	color: hsl(0 100% 50%);
+	color: hsl(0 100% 50%);
 }
 
 test-red-green-blue-alpha-adjuster {
@@ -103,7 +106,7 @@ test-contrast-adjuster {
 }
 
 test-combination-adjuster {
-	color: rgb(41.2352941176% 31.2352941176% 80%);
+	color: rgb(70% 30.2012805122% 46.7647058824%);
 }
 
 test-sameness {
diff --git a/test/basic.css b/test/basic.css
index d6ebe6e..55c4921 100644
--- a/test/basic.css
+++ b/test/basic.css
@@ -21,6 +21,9 @@ test-color-mod {
 	color: color-mod(hwb(0 0% 0% / 100%));
 	color: color-mod(0);
 	color: color-mod(0deg);
+	color: color-mod(0grad);
+	color: color-mod(0rad);
+	color: color-mod(0turn);
 }
 
 test-red-green-blue-alpha-adjuster {
diff --git a/test/basic.expect.css b/test/basic.expect.css
index 9049a4b..050adf9 100644
--- a/test/basic.expect.css
+++ b/test/basic.expect.css
@@ -11,16 +11,19 @@ test-color-mod {
 	color: rgb(255, 0, 0);
 	color: rgb(255, 0, 0);
 	color: rgb(255, 0, 0);
-	color: rgb(255, 0, 255);
-	color: rgb(255, 0, 255);
-	color: rgb(255, 0, 255);
-	color: rgb(255, 0, 255);
-	color: rgb(255, 0, 255);
+	color: hsl(0, 100%, 50%);
+	color: hsl(0, 100%, 50%);
+	color: hsl(0, 100%, 50%);
+	color: hsl(0, 100%, 50%);
+	color: hsl(0, 100%, 50%);
 	color: rgb(255, 0, 0);
 	color: rgb(255, 0, 0);
 	color: rgb(255, 0, 0);
-	color: rgb(255, 0, 255);
-	color: rgb(255, 0, 255);
+	color: hsl(0, 100%, 50%);
+	color: hsl(0, 100%, 50%);
+	color: hsl(0, 100%, 50%);
+	color: hsl(0, 100%, 50%);
+	color: hsl(0, 100%, 50%);
 }
 
 test-red-green-blue-alpha-adjuster {
@@ -44,33 +47,33 @@ test-rgb-adjuster {
 }
 
 test-hue-adjuster {
-	color: rgb(255, 85, 255);
-	color: rgb(255, 85, 255);
-	color: rgb(255, 85, 255);
-	color: rgb(255, 85, 255);
-	color: rgb(255, 0, 255);
-	color: rgb(255, 0, 255);
-	color: rgb(255, 0, 255);
-	color: rgb(255, 0, 255);
+	color: hsl(20, 100%, 50%);
+	color: hsl(20, 100%, 50%);
+	color: hsl(20, 100%, 50%);
+	color: hsl(20, 100%, 50%);
+	color: hsl(0, 100%, 50%);
+	color: hsl(0, 100%, 50%);
+	color: hsl(0, 100%, 50%);
+	color: hsl(0, 100%, 50%);
 }
 
 test-lightness-saturation-adjuster {
-	color: rgb(255, 0, 255);
-	color: rgb(102, 0, 102);
-	color: rgb(255, 102, 255);
-	color: rgb(153, 0, 153);
-	color: rgb(255, 128, 255);
-	color: rgb(237, 237, 237);
-	color: rgb(249, 249, 249);
-	color: rgb(241, 241, 241);
-	color: rgb(251, 251, 251);
+	color: hsl(0, 100%, 50%);
+	color: hsl(0, 100%, 20%);
+	color: hsl(0, 100%, 70%);
+	color: hsl(0, 100%, 30%);
+	color: hsl(0, 100%, 75%);
+	color: hsl(60, 20%, 91.1764705882%);
+	color: hsl(60, 75.5555555556%, 91.1764705882%);
+	color: hsl(60, 35.5555555556%, 91.1764705882%);
+	color: hsl(60, 83.3333333333%, 91.1764705882%);
 }
 
 test-blackness-whiteness-adjuster {
-	color: rgb(255, 255, 2);
-	color: rgb(254, 254, 2);
+	color: rgb(207, 207, 207);
+	color: rgb(200, 200, 200);
 	color: rgb(248, 248, 220);
-	color: rgb(254, 254, 1);
+	color: rgb(134, 134, 134);
 	color: rgb(245, 245, 51);
 	color: rgb(245, 245, 223);
 	color: rgb(245, 245, 169);
@@ -90,7 +93,7 @@ test-tint-shade-adjuster {
 test-blend-adjuster {
 	color: rgb(255, 128, 0);
 	color: rgb(255, 128, 0);
-	color: rgb(255, 128, 255);
+	color: hsl(30, 100%, 50%);
 	color: rgb(255, 128, 0);
 }
 
@@ -103,16 +106,16 @@ test-contrast-adjuster {
 }
 
 test-combination-adjuster {
-	color: rgb(105, 80, 204);
+	color: rgb(178, 77, 119);
 }
 
 test-sameness {
 	color: rgb(245, 245, 220);
-	color: rgb(245, 245, 245);
-	color: rgb(245, 245, 245);
-	color: rgb(245, 245, 245);
+	color: hsl(60, 55.5555555556%, 91.1764705882%);
+	color: hsl(60, 55.5555555556%, 91.1764705882%);
+	color: hsl(60, 55.5555555556%, 91.1764705882%);
 	color: rgb(245, 245, 220);
 	color: rgb(245, 245, 220);
 	color: rgb(245, 245, 220);
-	color: rgb(245, 245, 245);
+	color: hsl(60, 55.5555555556%, 91.1764705882%);
 }
-- 
2.33.1

