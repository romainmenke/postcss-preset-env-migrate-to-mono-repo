From 058391d97c926e11ed4fd3dde324609c820e1322 Mon Sep 17 00:00:00 2001
From: Jonathan Neal <jonathantneal@hotmail.com>
Date: Sun, 12 Apr 2020 12:56:32 -0400
Subject: [PATCH 12/24] 3.0.0

---
 .gitignore                          |   1 +
 .rollup.js                          |  21 ++--
 .tape.js                            |  18 ++--
 .travis.yml                         |   3 +-
 CHANGELOG.md                        |   7 ++
 README.md                           |  21 ++--
 index.js                            | 154 ----------------------------
 package.json                        |  75 +++++++++-----
 src/index.js                        |  18 ++++
 src/onDeclaration.js                |  29 ++++++
 src/onFunction.js                   | 138 +++++++++++++++++++++++++
 src/options.js                      |   4 +
 test/basic.css                      |   8 --
 test/basic.expect.css               |   8 --
 test/basic.preserve-true.expect.css |  13 ---
 15 files changed, 268 insertions(+), 250 deletions(-)
 delete mode 100644 index.js
 create mode 100644 src/index.js
 create mode 100644 src/onDeclaration.js
 create mode 100644 src/onFunction.js
 create mode 100644 src/options.js

diff --git a/.gitignore b/.gitignore
index d920b78..66c31f6 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1,3 +1,4 @@
+dist
 node_modules
 index.*.*
 package-lock.json
diff --git a/.rollup.js b/.rollup.js
index ebe39f9..e4e0035 100644
--- a/.rollup.js
+++ b/.rollup.js
@@ -1,16 +1,9 @@
-import babel from 'rollup-plugin-babel';
+import pkg from './package.json'
 
 export default {
-	input: 'index.js',
-	output: [
-		{ file: 'index.cjs.js', format: 'cjs', sourcemap: true },
-		{ file: 'index.es.mjs', format: 'es', sourcemap: true }
-	],
-	plugins: [
-		babel({
-			presets: [
-				['@babel/env', { modules: false, targets: { node: 6 } }]
-			]
-		})
-	]
-};
+    ...pkg.rollup,
+	plugins: pkg.rollup.plugins.map(plugin => require(plugin)()),
+	onwarn(warning, warn) {
+		if (warning.code !== 'UNRESOLVED_IMPORT') warn(warning)
+	}
+}
diff --git a/.tape.js b/.tape.js
index 4f2b738..e496428 100644
--- a/.tape.js
+++ b/.tape.js
@@ -1,13 +1,11 @@
 module.exports = {
-	'postcss-lab-function': {
-		'basic': {
-			message: 'supports basic usage'
-		},
-		'basic:preserve-true': {
-			message: 'supports { preserve: true } usage',
-			options: {
-				preserve: true
-			}
+	'basic': {
+		message: 'supports basic usage'
+	},
+	'basic:preserve-true': {
+		message: 'supports { preserve: true } usage',
+		options: {
+			preserve: true
 		}
 	}
-};
+}
diff --git a/.travis.yml b/.travis.yml
index e1f11a5..cccb9cf 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -3,7 +3,8 @@
 language: node_js
 
 node_js:
-  - 6
+  - 10
 
 install:
   - npm install --ignore-scripts
+  - npm run build
diff --git a/CHANGELOG.md b/CHANGELOG.md
index 540f11f..2f5ed7b 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,5 +1,12 @@
 # Changes to PostCSS Lab Function
 
+### 3.0.0 (April 12, 2020)
+
+- Updated: `postcss-values-parser` to 3.1.1 (major).
+- Updated: Node support to 10.0.0 (major).
+- Updated: Feature to use new percentage syntax.
+- Removed: Support for the removed `gray()` function.
+
 ### 2.0.1 (September 18, 2018)
 
 - Updated: PostCSS Values Parser 2.0.0
diff --git a/README.md b/README.md
index 54194c3..ca09b5d 100644
--- a/README.md
+++ b/README.md
@@ -1,19 +1,18 @@
 # PostCSS Lab Function [<img src="https://postcss.github.io/postcss/logo.svg" alt="PostCSS Logo" width="90" height="90" align="right">][postcss]
 
-[![NPM Version][npm-img]][npm-url]
-[![CSS Standard Status][css-img]][css-url]
-[![Build Status][cli-img]][cli-url]
-[![Support Chat][git-img]][git-url]
+[<img alt="npm version" src="https://img.shields.io/npm/v/postcss-lab-function.svg" height="20">][npm-url]
+[<img alt="CSS Standard Status" src="https://cssdb.org/badge/lab-function.svg" height="20">][css-url]
+[<img alt="build status" src="https://img.shields.io/travis/jonathantneal/postcss-lab-function/master.svg" height="20">][cli-url]
+[<img alt="support chat" src="https://img.shields.io/badge/support-chat-blue.svg" height="20">][git-url]
 
-[PostCSS Lab Function] lets you use `lab`, `lch`, and `gray` color functions in
-CSS, following the [CSS Color] specification.
+
+  [PostCSS Lab Function] lets you use `lab` and `lch` color functions in
+  CSS, following the [CSS Color] specification.
 
 ```pcss
 :root {
   --firebrick: lab(40% 56.6 39);
   --firebrick-a50: lch(40% 68.8 34.5 / 50%);
-  --gray-40: gray(40);
-  --gray-40a50: gray(40 / .5);
 }
 
 /* becomes */
@@ -21,8 +20,6 @@ CSS, following the [CSS Color] specification.
 :root {
   --firebrick: rgb(178, 34, 34);
   --firebrick-a50: rgba(178, 34, 34, .5);
-  --gray-40: rgb(94,94,94);
-  --gray-40a50: rgba(94,94,94, .5);
 }
 ```
 
@@ -86,13 +83,9 @@ postcssLabFunction({ preserve: true })
 }
 ```
 
-[cli-img]: https://img.shields.io/travis/jonathantneal/postcss-lab-function.svg
 [cli-url]: https://travis-ci.org/jonathantneal/postcss-lab-function
-[css-img]: https://cssdb.org/badge/lab-function.svg
 [css-url]: https://cssdb.org/#lab-function
-[git-img]: https://img.shields.io/badge/support-chat-blue.svg
 [git-url]: https://gitter.im/postcss/postcss
-[npm-img]: https://img.shields.io/npm/v/postcss-lab-function.svg
 [npm-url]: https://www.npmjs.com/package/postcss-lab-function
 
 [CSS Color]: https://drafts.csswg.org/css-color/#specifying-lab-lch
diff --git a/index.js b/index.js
deleted file mode 100644
index f04ae8a..0000000
--- a/index.js
+++ /dev/null
@@ -1,154 +0,0 @@
-import { lab2rgb, lch2rgb } from '@csstools/convert-colors';
-import postcss from 'postcss';
-import parser from 'postcss-values-parser';
-
-export default postcss.plugin('postcss-lab-function', opts => {
-	const preserve = 'preserve' in Object(opts) ? Boolean(opts.preserve) : false;
-
-	return root => {
-		root.walkDecls(decl => {
-			const { value } = decl;
-
-			if (colorAnyRegExp.test(value)) {
-				const ast = parser(value).parse();
-
-				ast.walkType('func', node => {
-					if (colorRegExp.test(node.value)) {
-						const children = node.nodes.slice(1, -1);
-						const isLab = labRegExp.test(node.value);
-						const isGray = grayRegExp.test(node.value);
-						const isFunctionalLAB = !isGray && matchFunctionalLAB(children);
-						const isFunctionalLCH = !isGray && matchFunctionalLCH(children);
-						const isFunctionalGray = isGray && matchFunctionalGray(children);
-
-						if (isFunctionalLAB || isFunctionalLCH) {
-							node.value = 'rgb';
-
-							const slashNode = children[3];
-							const alphaNode = children[4];
-
-							if (alphaNode) {
-								if (isPercentage(alphaNode) && !isCalc(alphaNode)) {
-									alphaNode.unit = '';
-									alphaNode.value = String(alphaNode.value / 100);
-								}
-
-								if (alphaNode.value === '1') {
-									slashNode.remove();
-									alphaNode.remove();
-								} else {
-									node.value += 'a';
-								}
-							}
-
-							if (slashNode && isSlash(slashNode)) {
-								slashNode.replaceWith( newComma() );
-							}
-
-							const converter = isLab ? lab2rgb : lch2rgb;
-
-							const rgbValues = converter(
-								...[
-									children[0].value,
-									children[1].value,
-									children[2].value
-								].map(
-									number => parseFloat(number)
-								)
-							).map(
-								sourceValue => Math.max(Math.min(parseInt(sourceValue * 2.55), 255), 0)
-							)
-
-							children[0].value = String(rgbValues[0]);
-							children[0].unit = '';
-							children[1].value = String(rgbValues[1]);
-							children[2].value = String(rgbValues[2]);
-
-							node.nodes.splice(3, 0, [ newComma() ]);
-							node.nodes.splice(2, 0, [ newComma() ]);
-						} else if (isFunctionalGray) {
-							node.value = 'rgb';
-
-							const alphaNode = children[2];
-
-							const rgbValues = lab2rgb(
-								...[
-									children[0].value,
-									0,
-									0
-								].map(
-									number => parseFloat(number)
-								)
-							).map(
-								sourceValue => Math.max(Math.min(parseInt(sourceValue * 2.55), 255), 0)
-							);
-
-							node.removeAll()
-							.append(newParen('('))
-							.append(newNumber(rgbValues[0]))
-							.append(newComma())
-							.append(newNumber(rgbValues[1]))
-							.append(newComma())
-							.append(newNumber(rgbValues[2]))
-							.append(newParen(')'));
-
-							if (alphaNode) {
-								if (isPercentage(alphaNode) && !isCalc(alphaNode)) {
-									alphaNode.unit = '';
-									alphaNode.value = String(alphaNode.value / 100);
-								}
-
-								if (alphaNode.value !== '1') {
-									node.value += 'a';
-
-									node
-									.insertBefore(node.last, newComma())
-									.insertBefore(node.last, alphaNode)
-								}
-							}
-						}
-					}
-				});
-
-				const newValue = String(ast);
-
-				if (preserve) {
-					decl.cloneBefore({ value: newValue });
-				} else {
-					decl.value = newValue;
-				}
-			}
-		});
-	};
-});
-
-const colorAnyRegExp = /(^|[^\w-])(lab|lch|gray)\(/i;
-const colorRegExp = /^(lab|lch|gray)$/i;
-const labRegExp = /^lab$/i;
-const grayRegExp = /^gray$/i;
-const alphaUnitMatch = /^%?$/i;
-const calcFuncMatch = /^calc$/i;
-const hueUnitMatch = /^(deg|grad|rad|turn)?$/i;
-
-const isAlphaValue = node => isCalc(node) || node.type === 'number' && alphaUnitMatch.test(node.unit);
-const isCalc = node => node.type === 'func' && calcFuncMatch.test(node.value);
-const isHue = node => isCalc(node) || node.type === 'number' && hueUnitMatch.test(node.unit);
-const isNumber = node => isCalc(node) || node.type === 'number' && node.unit === '';
-const isPercentage = node => isCalc(node) || node.type === 'number' && node.unit === '%';
-const isSlash = node => node.type === 'operator' && node.value === '/';
-const functionalLABMatch = [isPercentage, isNumber, isNumber, isSlash, isAlphaValue];
-const functionalLCHMatch = [isPercentage, isNumber, isHue, isSlash, isAlphaValue];
-const functionalGrayMatch = [isNumber, isSlash, isAlphaValue];
-const matchFunctionalLAB = children => children.every(
-	(child, index) => typeof functionalLABMatch[index] === 'function' && functionalLABMatch[index](child)
-);
-const matchFunctionalLCH = children => children.every(
-	(child, index) => typeof functionalLCHMatch[index] === 'function' && functionalLCHMatch[index](child)
-);
-const matchFunctionalGray = children => children.every(
-	(child, index) => typeof functionalGrayMatch[index] === 'function' && functionalGrayMatch[index](child)
-);
-
-const newComma = () => parser.comma({ value: ',' });
-const newNumber = value => parser.number({ value });
-const newParen = value => parser.paren({ value });
diff --git a/package.json b/package.json
index 47bf792..877be0b 100644
--- a/package.json
+++ b/package.json
@@ -1,50 +1,69 @@
 {
   "name": "postcss-lab-function",
-  "version": "2.0.1",
+  "version": "3.0.0",
   "description": "Use lab() and lch() color functions in CSS",
   "author": "Jonathan Neal <jonathantneal@hotmail.com>",
   "license": "CC0-1.0",
   "repository": "jonathantneal/postcss-lab-function",
   "homepage": "https://github.com/jonathantneal/postcss-lab-function#readme",
   "bugs": "https://github.com/jonathantneal/postcss-lab-function/issues",
-  "main": "index.cjs.js",
-  "module": "index.es.mjs",
+  "main": "dist/index.cjs.js",
+  "module": "dist/index.esm.mjs",
   "files": [
-    "index.cjs.js",
-    "index.cjs.js.map",
-    "index.es.mjs",
-    "index.es.mjs.map"
+    "dist"
   ],
   "scripts": {
-    "prepublishOnly": "npm test",
-    "pretest": "rollup -c .rollup.js --silent",
-    "test": "echo 'Running tests...'; npm run test:js && npm run test:tape",
-    "test:ec": "echint --ignore index.*.js test",
-    "test:js": "eslint *.js --cache --ignore-path .gitignore --quiet",
-    "test:tape": "postcss-tape"
+    "build": "npx rollup -c .rollup.js",
+    "build:watch": "npx rollup -c .rollup.js --watch",
+    "lint": "npx eslint --cache src",
+    "lint:fix": "npx eslint --cache --fix",
+    "test": "npm run lint && npm run tape",
+    "tape": "npx postcss-tape"
   },
   "engines": {
-    "node": ">=6.0.0"
+    "node": ">=10.0.0"
   },
   "dependencies": {
-    "@csstools/convert-colors": "^1.4.0",
-    "postcss": "^7.0.2",
-    "postcss-values-parser": "^2.0.0"
+    "@csstools/convert-colors": "^2.0.0",
+    "postcss": "^7.0.27",
+    "postcss-values-parser": "^3.1.1"
   },
   "devDependencies": {
-    "@babel/core": "^7.1.0",
-    "@babel/preset-env": "^7.1.0",
-    "babel-eslint": "^9.0.0",
-    "eslint": "^5.6.0",
-    "eslint-config-dev": "^2.0.0",
-    "postcss-tape": "^2.2.0",
-    "pre-commit": "^1.2.2",
-    "rollup": "^0.66.0",
-    "rollup-plugin-babel": "^4.0.3"
+    "@babel/core": "^7.9.0",
+    "@babel/preset-env": "^7.9.5",
+    "babel-eslint": "^10.1.0",
+    "eslint": "^6.8.0",
+    "postcss-tape": "^5.0.2",
+    "rollup": "^2.6.0",
+    "rollup-plugin-babel": "^4.4.0"
   },
   "eslintConfig": {
-    "extends": "dev",
-    "parser": "babel-eslint"
+    "parser": "babel-eslint",
+    "ignorePatterns": [
+      "dist",
+      "node_modules"
+    ]
+  },
+  "babel": {
+    "presets": [
+      "@babel/env"
+    ]
+  },
+  "rollup": {
+    "input": "src/index.js",
+    "plugins": [
+      "rollup-plugin-babel"
+    ],
+    "output": [
+      {
+        "file": "dist/index.cjs.js",
+        "format": "cjs"
+      },
+      {
+        "file": "dist/index.esm.js",
+        "format": "esm"
+      }
+    ]
   },
   "keywords": [
     "postcss",
diff --git a/src/index.js b/src/index.js
new file mode 100644
index 0000000..191baf5
--- /dev/null
+++ b/src/index.js
@@ -0,0 +1,18 @@
+import postcss from 'postcss'
+import onDeclaration from './onDeclaration'
+import options from './options'
+
+/** Transform lab() and lch() functions in CSS. */
+const plugin = postcss.plugin('postcss-lab-function', /** @type {PostCSSPluginInitializer} */ opts => {
+	options.preserve = 'preserve' in Object(opts) ? Boolean(opts.preserve) : false
+
+	return root => {
+		root.walkDecls(onDeclaration)
+	}
+})
+
+export default plugin
+
+/** @typedef {import('postcss').Root} CSSRoot */ 
+/** @typedef {(root: CSSRoot) => void} PostCSSTransformCallback */ 
+/** @typedef {(opts: options) => PostCSSTransformCallback} PostCSSPluginInitializer */ 
diff --git a/src/onDeclaration.js b/src/onDeclaration.js
new file mode 100644
index 0000000..a5f298f
--- /dev/null
+++ b/src/onDeclaration.js
@@ -0,0 +1,29 @@
+import { parse } from 'postcss-values-parser'
+import onFunction from './onFunction'
+import options from './options'
+
+/** @type {(decl: CSSDeclaration) => void} Transform lab() and lch() functions in CSS Declarations. */
+const visitor = decl => {
+	const { value } = decl
+
+	if (hasAnyColorFunction(value)) {
+		const valueAST = parse(value)
+
+		valueAST.walkFuncs(onFunction)
+
+		const newValue = String(valueAST)
+
+		if (options.preserve) decl.cloneBefore({ value: newValue })
+		else decl.value = newValue
+	}
+}
+
+export default visitor
+
+/** @type {(value: RegExp) => (value: string) => boolean} Return a function that checks whether the expression exists in a value. */
+const createRegExpTest = Function.bind.bind(RegExp.prototype.test)
+
+/** Return whether the value has a lab() or lch() function. */
+const hasAnyColorFunction = createRegExpTest(/(^|[^\w-])(lab|lch)\(/i)
+
+/** @typedef {import('postcss').Declaration} CSSDeclaration */
diff --git a/src/onFunction.js b/src/onFunction.js
new file mode 100644
index 0000000..3de84b4
--- /dev/null
+++ b/src/onFunction.js
@@ -0,0 +1,138 @@
+import { lab2rgb, lch2rgb } from '@csstools/convert-colors'
+import { parse } from 'postcss-values-parser'
+
+/** @type {(decl: CSSFunction) => void} Transform lab() and lch() functions. */
+const visitor = node => {
+	/** @type {{ name: string, nodes: CSSNode[] }} */
+	const { name, nodes } = node
+
+	if (isColorFunctionName(name)) {
+		if (isLabFunctionContents(nodes) || isLchFunctionContents(nodes)) {
+			// rename the Color function to `rgb`
+			Object.assign(node, { name: 'rgb' })
+
+			/** @type {CSSPunctuation} Slash punctuation before the Alpha channel. */
+			const slashNode = nodes[3]
+
+			/** @type {CSSNumber} Alpha channel. */
+			const alphaNode = nodes[4]
+
+			if (alphaNode) {
+				if (isPercentage(alphaNode) && !isCalc(alphaNode)) {
+					// transform the Alpha channel from a Percentage to (0-1) Number
+					Object.assign(alphaNode, { value: String(alphaNode.value / 100), unit: '' })
+				}
+
+				// if the color is fully opaque (i.e. the Alpha channel is `1`)
+				if (alphaNode.value === '1') {
+					// remove the Slash and Alpha channel
+					slashNode.remove()
+					alphaNode.remove()
+				} else {
+					// otherwise, rename the Color function to `rgba`
+					Object.assign(node, { name: 'rgba' })
+				}
+			}
+
+			// replace a remaining Slash with a Comma
+			if (slashNode && isSlash(slashNode)) {
+				slashNode.replaceWith(commaNode.clone())
+			}
+
+			/** Extracted Color channels. */
+			const [channelNode1, channelNode2, channelNode3] = nodes
+
+			/** Corresponding Color transformer. */
+			const toRGB = isLabColorFunctionName(name) ? lab2rgb : lch2rgb
+
+			/** RGB channels from the source color. */
+			const rgbValues = toRGB(
+				...[
+					channelNode1.value,
+					channelNode2.value,
+					channelNode3.value
+				].map(
+					channelNumber => parseFloat(channelNumber)
+				)
+			).map(
+				channelValue => Math.max(Math.min(parseInt(channelValue * 2.55), 255), 0)
+			)
+
+			channelNode3.replaceWith(
+				channelNode3.clone({ value: String(rgbValues[2]) })
+			)
+
+			channelNode2.replaceWith(
+				channelNode2.clone({ value: String(rgbValues[1]) }),
+				commaNode.clone()
+			)
+
+			channelNode1.replaceWith(
+				channelNode1.clone({ value: String(rgbValues[0]), unit: '' }),
+				commaNode.clone()
+			)
+		}
+	}
+}
+
+export default visitor
+
+const commaNode = parse(',').first
+
+/** @type {(value: RegExp) => (value: string) => boolean} Return a function that checks whether the expression exists in a value. */
+const createRegExpTest = Function.bind.bind(RegExp.prototype.test)
+
+/** Return whether the function name is `lab` or `lch`. */
+const isColorFunctionName = createRegExpTest(/^(lab|lch)$/i)
+
+/** Return whether the function name is `calc`. */
+const isCalcFunctionName = createRegExpTest(/^calc$/i)
+
+/** Return whether the function name is `lab`. */
+const isLabColorFunctionName = createRegExpTest(/^lab$/i)
+
+/** Return whether the unit is alpha-like. */
+const isAlphaLikeUnit = createRegExpTest(/^%?$/i)
+
+/** Return whether the unit is hue-like. */
+const isHueLikeUnit = createRegExpTest(/^(deg|grad|rad|turn)?$/i)
+
+/** @type {(node: CSSFunction) => boolean} Return whether the node is an Alpha-like unit. */
+const isAlphaValue = node => isCalc(node) || node.type === 'numeric' && isAlphaLikeUnit(node.unit)
+
+/** @type {(node: CSSFunction) => boolean} Return whether the node is a calc() function. */
+const isCalc = node => node.type === 'func' && isCalcFunctionName(node.name)
+
+/** @type {(node: CSSNumber) => boolean} Return whether the node is a Hue-like unit. */
+const isHue = node => isCalc(node) || node.type === 'numeric' && isHueLikeUnit(node.unit)
+
+/** @type {(node: CSSNumber) => boolean} Return whether the node is a Number unit. */
+const isNumber = node => isCalc(node) || node.type === 'numeric' && node.unit === ''
+
+/** @type {(node: CSSNumber) => boolean} Return whether the node is a Percentage unit. */
+const isPercentage = node => isCalc(node) || node.type === 'numeric' && node.unit === '%'
+
+/** @type {(node: CSSOperator) => boolean} Return whether the node is a Slash delimiter. */
+const isSlash = node => node.type === 'operator' && node.value === '/'
+
+/** @type {(nodes: Node[]) => boolean} Return whether a set of nodes is a lab() function. */
+const isLabFunctionContents = nodes => nodes.every(
+	(node, index) => typeof labFunctionContents[index] === 'function' && labFunctionContents[index](node)
+)
+
+/** Set of nodes in a lab() function. */
+const labFunctionContents = [isPercentage, isNumber, isNumber, isSlash, isAlphaValue]
+
+/** @type {(nodes: Node[]) => boolean} Return whether a set of nodes is a lch() function. */
+const isLchFunctionContents = nodes => nodes.every(
+	(node, index) => typeof lchFunctionContents[index] === 'function' && lchFunctionContents[index](node)
+)
+
+/** Set of nodes in a lch() function. */
+const lchFunctionContents = [isPercentage, isNumber, isHue, isSlash, isAlphaValue]
+
+/** @typedef {import('postcss-values-parser').Func} CSSFunction */
+/** @typedef {import('postcss-values-parser').Node} CSSNode */
+/** @typedef {import('postcss-values-parser').Numeric} CSSNumber */
+/** @typedef {import('postcss-values-parser').Operator} CSSOperator */
+/** @typedef {import('postcss-values-parser').Punctuation} CSSPunctuation */
diff --git a/src/options.js b/src/options.js
new file mode 100644
index 0000000..0227109
--- /dev/null
+++ b/src/options.js
@@ -0,0 +1,4 @@
+export default {
+	/** Whether to preserve the original functional color declaration. */
+	preserve: false
+}
diff --git a/test/basic.css b/test/basic.css
index bd0450f..57dc0f7 100644
--- a/test/basic.css
+++ b/test/basic.css
@@ -15,11 +15,3 @@
 	color: lch(40% 68.8 34.5 / 50%);
 	color: lch(100% 50 0);
 }
-
-.test-gray {
-	color: gray(40);
-	color: gray(40 / 1);
-	color: gray(40 / .5);
-	color: gray(40 / 100%);
-	color: gray(40 / 50%);
-}
diff --git a/test/basic.expect.css b/test/basic.expect.css
index 76dccae..4068e14 100644
--- a/test/basic.expect.css
+++ b/test/basic.expect.css
@@ -15,11 +15,3 @@
 	color: rgba(178, 34, 34, 0.5);
 	color: rgb(255, 216, 255);
 }
-
-.test-gray {
-	color: rgb(94,94,94);
-	color: rgb(94,94,94);
-	color: rgba(94,94,94, .5);
-	color: rgb(94,94,94);
-	color: rgba(94,94,94, 0.5);
-}
diff --git a/test/basic.preserve-true.expect.css b/test/basic.preserve-true.expect.css
index 3ef20b2..e2cb310 100644
--- a/test/basic.preserve-true.expect.css
+++ b/test/basic.preserve-true.expect.css
@@ -27,16 +27,3 @@
 	color: rgb(255, 216, 255);
 	color: lch(100% 50 0);
 }
-
-.test-gray {
-	color: rgb(94,94,94);
-	color: gray(40);
-	color: rgb(94,94,94);
-	color: gray(40 / 1);
-	color: rgba(94,94,94, .5);
-	color: gray(40 / .5);
-	color: rgb(94,94,94);
-	color: gray(40 / 100%);
-	color: rgba(94,94,94, 0.5);
-	color: gray(40 / 50%);
-}
-- 
2.33.1

