From 8b41822d8dbfb032ba006a1579f5996b539e63c5 Mon Sep 17 00:00:00 2001
From: Jonathan Neal <jonathantneal@hotmail.com>
Date: Sat, 25 Apr 2020 00:39:57 -0400
Subject: [PATCH 14/19] 3.1.0

---
 CHANGELOG.md                                  |  4 ++++
 package.json                                  |  6 ++---
 src/index.js                                  |  8 +++----
 src/{onDeclaration.js => onCSSDeclaration.js} | 22 ++++++++++---------
 src/{onFunction.js => onCSSFunction.js}       |  4 ++--
 5 files changed, 25 insertions(+), 19 deletions(-)
 rename src/{onDeclaration.js => onCSSDeclaration.js} (56%)
 rename src/{onFunction.js => onCSSFunction.js} (98%)

diff --git a/CHANGELOG.md b/CHANGELOG.md
index 4cfaa43..57097a3 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,5 +1,9 @@
 # Changes to PostCSS Lab Function
 
+### 3.1.0 (April 25, 2020)
+
+- Updated: `postcss-values-parser` to 3.2.0 (minor).
+
 ### 3.0.1 (April 12, 2020)
 
 - Updated: Ownership moved to CSSTools.
diff --git a/package.json b/package.json
index b420484..834a837 100644
--- a/package.json
+++ b/package.json
@@ -1,6 +1,6 @@
 {
   "name": "postcss-lab-function",
-  "version": "3.0.1",
+  "version": "3.1.0",
   "description": "Use lab() and lch() color functions in CSS",
   "author": "Jonathan Neal <jonathantneal@hotmail.com>",
   "license": "CC0-1.0",
@@ -27,7 +27,7 @@
   "dependencies": {
     "@csstools/convert-colors": "^2.0.0",
     "postcss": "^7.0.27",
-    "postcss-values-parser": "^3.1.1"
+    "postcss-values-parser": "^3.2.0"
   },
   "devDependencies": {
     "@babel/core": "^7.9.0",
@@ -35,7 +35,7 @@
     "babel-eslint": "^10.1.0",
     "eslint": "^6.8.0",
     "postcss-tape": "^5.0.2",
-    "rollup": "^2.6.0",
+    "rollup": "^2.7.2",
     "rollup-plugin-babel": "^4.4.0"
   },
   "babel": {
diff --git a/src/index.js b/src/index.js
index 191baf5..0145e4d 100644
--- a/src/index.js
+++ b/src/index.js
@@ -1,17 +1,17 @@
 import postcss from 'postcss'
-import onDeclaration from './onDeclaration'
+import onCSSDeclaration from './onCSSDeclaration'
 import options from './options'
 
 /** Transform lab() and lch() functions in CSS. */
-const plugin = postcss.plugin('postcss-lab-function', /** @type {PostCSSPluginInitializer} */ opts => {
+const postcssPlugin = postcss.plugin('postcss-lab-function', /** @type {PostCSSPluginInitializer} */ opts => {
 	options.preserve = 'preserve' in Object(opts) ? Boolean(opts.preserve) : false
 
 	return root => {
-		root.walkDecls(onDeclaration)
+		root.walkDecls(onCSSDeclaration)
 	}
 })
 
-export default plugin
+export default postcssPlugin
 
 /** @typedef {import('postcss').Root} CSSRoot */ 
 /** @typedef {(root: CSSRoot) => void} PostCSSTransformCallback */ 
diff --git a/src/onDeclaration.js b/src/onCSSDeclaration.js
similarity index 56%
rename from src/onDeclaration.js
rename to src/onCSSDeclaration.js
index a5f298f..ecbfc9b 100644
--- a/src/onDeclaration.js
+++ b/src/onCSSDeclaration.js
@@ -1,24 +1,26 @@
 import { parse } from 'postcss-values-parser'
-import onFunction from './onFunction'
+import onCSSFunction from './onCSSFunction'
 import options from './options'
 
 /** @type {(decl: CSSDeclaration) => void} Transform lab() and lch() functions in CSS Declarations. */
-const visitor = decl => {
-	const { value } = decl
+const onCSSDeclaration = decl => {
+	const { value: originalValue } = decl
 
-	if (hasAnyColorFunction(value)) {
-		const valueAST = parse(value)
+	if (hasAnyColorFunction(originalValue)) {
+		const valueAST = parse(originalValue)
 
-		valueAST.walkFuncs(onFunction)
+		valueAST.walkFuncs(onCSSFunction)
 
-		const newValue = String(valueAST)
+		const modifiedValue = String(valueAST)
 
-		if (options.preserve) decl.cloneBefore({ value: newValue })
-		else decl.value = newValue
+		if (modifiedValue !== originalValue) {
+			if (options.preserve) decl.cloneBefore({ value: modifiedValue })
+			else decl.value = modifiedValue
+		}
 	}
 }
 
-export default visitor
+export default onCSSDeclaration
 
 /** @type {(value: RegExp) => (value: string) => boolean} Return a function that checks whether the expression exists in a value. */
 const createRegExpTest = Function.bind.bind(RegExp.prototype.test)
diff --git a/src/onFunction.js b/src/onCSSFunction.js
similarity index 98%
rename from src/onFunction.js
rename to src/onCSSFunction.js
index 3de84b4..4416c5f 100644
--- a/src/onFunction.js
+++ b/src/onCSSFunction.js
@@ -2,7 +2,7 @@ import { lab2rgb, lch2rgb } from '@csstools/convert-colors'
 import { parse } from 'postcss-values-parser'
 
 /** @type {(decl: CSSFunction) => void} Transform lab() and lch() functions. */
-const visitor = node => {
+const onCSSFunction = node => {
 	/** @type {{ name: string, nodes: CSSNode[] }} */
 	const { name, nodes } = node
 
@@ -75,7 +75,7 @@ const visitor = node => {
 	}
 }
 
-export default visitor
+export default onCSSFunction
 
 const commaNode = parse(',').first
 
-- 
2.33.1

