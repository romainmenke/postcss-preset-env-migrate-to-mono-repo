From bfe055b02c155c8be5e697cf25923d93dd0b1f14 Mon Sep 17 00:00:00 2001
From: Jonathan Neal <jonathantneal@hotmail.com>
Date: Sat, 26 Nov 2016 08:37:56 -0500
Subject: [PATCH 01/26] 1.0.0

---
 .gitignore            |   3 +
 .travis.yml           |   3 +
 CHANGELOG.md          |   5 ++
 CONTRIBUTING.md       |  64 ++++++++++++++++++++
 LICENSE.md            | 106 +++++++++++++++++++++++++++++++++
 README.md             | 134 ++++++++++++++++++++++++++++++++++++++++++
 index.js              |  41 +++++++++++++
 package.json          |  53 +++++++++++++++++
 test.js               |  81 +++++++++++++++++++++++++
 test/basic.css        |  23 ++++++++
 test/basic.expect.css |  35 +++++++++++
 11 files changed, 548 insertions(+)
 create mode 100644 .gitignore
 create mode 100644 .travis.yml
 create mode 100644 CHANGELOG.md
 create mode 100644 CONTRIBUTING.md
 create mode 100644 LICENSE.md
 create mode 100644 README.md
 create mode 100644 index.js
 create mode 100644 package.json
 create mode 100644 test.js
 create mode 100644 test/basic.css
 create mode 100644 test/basic.expect.css

diff --git a/.gitignore b/.gitignore
new file mode 100644
index 0000000..091413e
--- /dev/null
+++ b/.gitignore
@@ -0,0 +1,3 @@
+node_modules
+npm-debug.log
+test/*.result.css
diff --git a/.travis.yml b/.travis.yml
new file mode 100644
index 0000000..833d09d
--- /dev/null
+++ b/.travis.yml
@@ -0,0 +1,3 @@
+language: node_js
+node_js:
+  - stable
diff --git a/CHANGELOG.md b/CHANGELOG.md
new file mode 100644
index 0000000..29f298b
--- /dev/null
+++ b/CHANGELOG.md
@@ -0,0 +1,5 @@
+# Changes to Place
+
+### 1.0.0 (November 25, 2016)
+
+- Initial version
diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md
new file mode 100644
index 0000000..5e65704
--- /dev/null
+++ b/CONTRIBUTING.md
@@ -0,0 +1,64 @@
+# Contributing to Place
+
+You want to help? You rock! Now, take a moment to be sure your contributions
+make sense to everyone else.
+
+## Reporting Issues
+
+Found a problem? Want a new feature?
+
+- See if your issue or idea has [already been reported].
+- Provide a [reduced test case] or a [live example].
+
+Remember, a bug is a _demonstrable problem_ caused by _our_ code.
+
+## Submitting Pull Requests
+
+Pull requests are the greatest contributions, so be sure they are focused in 
+scope, and do avoid unrelated commits.
+
+1. To begin, [fork this project], clone your fork, and add our upstream.
+	```bash
+	# Clone your fork of the repo into the current directory
+	git clone https://github.com/<your-username>/postcss-place
+	# Navigate to the newly cloned directory
+	cd postcss-place
+	# Assign the original repo to a remote called "upstream"
+	git remote add upstream https://github.com/jonathantneal/postcss-place
+	# Install the tools necessary for development
+	npm install
+	```
+
+2. Create a branch for your feature or fix:
+	```bash
+	# Move into a new branch for a feature
+	git checkout -b feature/thing
+	```
+	```bash
+	# Move into a new branch for a fix
+	git checkout -b fix/something
+	```
+
+3. Be sure your code follows our practices.
+	```bash
+	# Test current code
+	npm run test
+	```
+
+4. Push your branch up to your fork:
+	```bash
+	# Push a feature branch
+	git push origin feature/thing
+	```
+	```bash
+	# Push a fix branch
+	git push origin fix/something
+	```
+
+5. Now [open a pull request] with a clear title and description.
+
+[already been reported]: issues
+[fork this project]:     fork
+[live example]:          http://codepen.io/pen
+[open a pull request]:   https://help.github.com/articles/using-pull-requests/
+[reduced test case]:     https://css-tricks.com/reduced-test-cases/
diff --git a/LICENSE.md b/LICENSE.md
new file mode 100644
index 0000000..34f902f
--- /dev/null
+++ b/LICENSE.md
@@ -0,0 +1,106 @@
+# CC0 1.0 Universal
+
+## Statement of Purpose
+
+The laws of most jurisdictions throughout the world automatically confer
+exclusive Copyright and Related Rights (defined below) upon the creator and
+subsequent owner(s) (each and all, an “owner”) of an original work of
+authorship and/or a database (each, a “Work”).
+
+Certain owners wish to permanently relinquish those rights to a Work for the
+purpose of contributing to a commons of creative, cultural and scientific works
+(“Commons”) that the public can reliably and without fear of later claims of
+infringement build upon, modify, incorporate in other works, reuse and
+redistribute as freely as possible in any form whatsoever and for any purposes,
+including without limitation commercial purposes. These owners may contribute
+to the Commons to promote the ideal of a free culture and the further
+production of creative, cultural and scientific works, or to gain reputation or
+greater distribution for their Work in part through the use and efforts of
+others.
+
+For these and/or other purposes and motivations, and without any expectation of
+additional consideration or compensation, the person associating CC0 with a
+Work (the “Affirmer”), to the extent that he or she is an owner of Copyright
+and Related Rights in the Work, voluntarily elects to apply CC0 to the Work and
+publicly distribute the Work under its terms, with knowledge of his or her
+Copyright and Related Rights in the Work and the meaning and intended legal
+effect of CC0 on those rights.
+
+1. Copyright and Related Rights. A Work made available under CC0 may be
+	 protected by copyright and related or neighboring rights (“Copyright and
+	 Related Rights”). Copyright and Related Rights include, but are not limited
+	 to, the following:
+	1. the right to reproduce, adapt, distribute, perform, display,
+		 communicate, and translate a Work;
+	2. moral rights retained by the original author(s) and/or performer(s);
+	3. publicity and privacy rights pertaining to a person’s image or likeness
+		 depicted in a Work;
+	4. rights protecting against unfair competition in regards to a Work,
+		 subject to the limitations in paragraph 4(i), below;
+	5. rights protecting the extraction, dissemination, use and reuse of data
+		 in a Work;
+	6. database rights (such as those arising under Directive 96/9/EC of the
+		 European Parliament and of the Council of 11 March 1996 on the legal
+		 protection of databases, and under any national implementation thereof,
+		 including any amended or successor version of such directive); and
+	7. other similar, equivalent or corresponding rights throughout the world
+		 based on applicable law or treaty, and any national implementations
+		 thereof.
+
+2. Waiver. To the greatest extent permitted by, but not in contravention of,
+applicable law, Affirmer hereby overtly, fully, permanently, irrevocably and
+unconditionally waives, abandons, and surrenders all of Affirmer’s Copyright
+and Related Rights and associated claims and causes of action, whether now
+known or unknown (including existing as well as future claims and causes of
+action), in the Work (i) in all territories worldwide, (ii) for the maximum
+duration provided by applicable law or treaty (including future time
+extensions), (iii) in any current or future medium and for any number of
+copies, and (iv) for any purpose whatsoever, including without limitation
+commercial, advertising or promotional purposes (the “Waiver”). Affirmer makes
+the Waiver for the benefit of each member of the public at large and to the
+detriment of Affirmer’s heirs and successors, fully intending that such Waiver
+shall not be subject to revocation, rescission, cancellation, termination, or
+any other legal or equitable action to disrupt the quiet enjoyment of the Work
+by the public as contemplated by Affirmer’s express Statement of Purpose.
+
+3. Public License Fallback. Should any part of the Waiver for any reason be
+judged legally invalid or ineffective under applicable law, then the Waiver
+shall be preserved to the maximum extent permitted taking into account
+Affirmer’s express Statement of Purpose. In addition, to the extent the Waiver
+is so judged Affirmer hereby grants to each affected person a royalty-free, non
+transferable, non sublicensable, non exclusive, irrevocable and unconditional
+license to exercise Affirmer’s Copyright and Related Rights in the Work (i) in
+all territories worldwide, (ii) for the maximum duration provided by applicable
+law or treaty (including future time extensions), (iii) in any current or
+future medium and for any number of copies, and (iv) for any purpose
+whatsoever, including without limitation commercial, advertising or promotional
+purposes (the “License”). The License shall be deemed effective as of the date
+CC0 was applied by Affirmer to the Work. Should any part of the License for any
+reason be judged legally invalid or ineffective under applicable law, such
+partial invalidity or ineffectiveness shall not invalidate the remainder of the
+License, and in such case Affirmer hereby affirms that he or she will not (i)
+exercise any of his or her remaining Copyright and Related Rights in the Work
+or (ii) assert any associated claims and causes of action with respect to the
+Work, in either case contrary to Affirmer’s express Statement of Purpose.
+
+4. Limitations and Disclaimers.
+		1. No trademark or patent rights held by Affirmer are waived, abandoned,
+			 surrendered, licensed or otherwise affected by this document.
+		2. Affirmer offers the Work as-is and makes no representations or
+			 warranties of any kind concerning the Work, express, implied, statutory
+			 or otherwise, including without limitation warranties of title,
+			 merchantability, fitness for a particular purpose, non infringement, or
+			 the absence of latent or other defects, accuracy, or the present or
+			 absence of errors, whether or not discoverable, all to the greatest
+			 extent permissible under applicable law.
+		3. Affirmer disclaims responsibility for clearing rights of other persons
+			 that may apply to the Work or any use thereof, including without
+			 limitation any person’s Copyright and Related Rights in the Work.
+			 Further, Affirmer disclaims responsibility for obtaining any necessary
+			 consents, permissions or other rights required for any use of the Work.
+		4. Affirmer understands and acknowledges that Creative Commons is not a
+			 party to this document and has no duty or obligation with respect to
+			 this CC0 or use of the Work.
+
+For more information, please see
+http://creativecommons.org/publicdomain/zero/1.0/.
diff --git a/README.md b/README.md
new file mode 100644
index 0000000..6ed097b
--- /dev/null
+++ b/README.md
@@ -0,0 +1,134 @@
+# Place <a href="https://github.com/postcss/postcss"><img src="https://postcss.github.io/postcss/logo.svg" alt="PostCSS Logo" width="90" height="90" align="right"></a>
+
+[![NPM Version][npm-img]][npm-url]
+[![Build Status][cli-img]][cli-url]
+[![Licensing][lic-image]][lic-url]
+[![Changelog][log-image]][log-url]
+[![Gitter Chat][git-image]][git-url]
+
+[Place] lets you use `place-*` properties as shorthands for `align-*` and `justify-*` per the [CSS Box Alignment Module Level 3].
+
+```css
+/* before */
+
+.example {
+	place-self: center;
+	place-content: space-between center;
+}
+
+/* after */
+
+.example {
+	align-self: center;
+	justify-self: center;
+	align-content: space-between;
+	justify-content: center;
+}
+```
+
+## Usage
+
+Add [Place] to your build tool:
+
+```bash
+npm install jonathantneal/postcss-place --save-dev
+```
+
+#### Node
+
+```js
+require('postcss-place').process(YOUR_CSS, { /* options */ });
+```
+
+#### PostCSS
+
+Add [PostCSS] to your build tool:
+
+```bash
+npm install postcss --save-dev
+```
+
+Load [Place] as a PostCSS plugin:
+
+```js
+postcss([
+	require('postcss-place')({ /* options */ })
+]).process(YOUR_CSS, /* options */);
+```
+
+#### Gulp
+
+Add [Gulp PostCSS] to your build tool:
+
+```bash
+npm install gulp-postcss --save-dev
+```
+
+Enable [Place] within your Gulpfile:
+
+```js
+var postcss = require('gulp-postcss');
+
+gulp.task('css', function () {
+	return gulp.src('./src/*.css').pipe(
+		postcss([
+			require('postcss-place')({ /* options */ })
+		])
+	).pipe(
+		gulp.dest('.')
+	);
+});
+```
+
+#### Grunt
+
+Add [Grunt PostCSS] to your build tool:
+
+```bash
+npm install grunt-postcss --save-dev
+```
+
+Enable [Place] within your Gruntfile:
+
+```js
+grunt.loadNpmTasks('grunt-postcss');
+
+grunt.initConfig({
+	postcss: {
+		options: {
+			use: [
+				require('postcss-place')({ /* options */ })
+			]
+		},
+		dist: {
+			src: '*.css'
+		}
+	}
+});
+```
+
+## Options
+
+#### `prefix`
+
+Type: `String`  
+Default: `null`
+
+Specifies a prefix to be surrounded by dashes before the declaration (e.g. `prefix: 'x'` changes the detected property to `-x-place-content`).
+
+[npm-url]: https://www.npmjs.com/package/postcss-place
+[npm-img]: https://img.shields.io/npm/v/postcss-place.svg
+[cli-url]: https://travis-ci.org/jonathantneal/postcss-place
+[cli-img]: https://img.shields.io/travis/jonathantneal/postcss-place.svg
+[lic-url]: LICENSE.md
+[lic-image]: https://img.shields.io/npm/l/postcss-place.svg
+[log-url]: CHANGELOG.md
+[log-image]: https://img.shields.io/badge/changelog-md-blue.svg
+[git-url]: https://gitter.im/postcss/postcss
+[git-image]: https://img.shields.io/badge/chat-gitter-blue.svg
+
+[Place]: https://github.com/jonathantneal/postcss-place
+[CSS Box Alignment Module Level 3]: https://drafts.csswg.org/css-align/#propdef-place-content
+[PostCSS]: https://github.com/postcss/postcss
+[Gulp PostCSS]: https://github.com/postcss/gulp-postcss
+[Grunt PostCSS]: https://github.com/nDmitry/grunt-postcss
diff --git a/index.js b/index.js
new file mode 100644
index 0000000..b1cf577
--- /dev/null
+++ b/index.js
@@ -0,0 +1,41 @@
+// tooling
+const postcss = require('postcss');
+const parser  = require('postcss-value-parser');
+
+// plugin
+module.exports = postcss.plugin('postcss-place', ({
+	prefix
+} = {}) => (root) => {
+	// property
+	const prop = new RegExp(prefix ? '^-' + prefix + '-(content|items|self)' : '^place-(content|items|self)');
+
+	root.walkDecls(prop, (decl) => {
+		// alignment
+		const alignment = decl.prop.match(prop)[1];
+
+		// value
+		const value = parser(decl.value);
+
+		// divider position
+		const index = value.nodes.map(
+			(node) => node.type
+		).indexOf('space');
+
+		// new justify-[alignment] and align-[alignment] declarations
+		const alignValue   = index === -1 ? decl.value : parser.stringify(value.nodes.slice(0, index));
+		const justifyValue = index === -1 ? decl.value : parser.stringify(value.nodes.slice(index + 1));
+
+		decl.cloneBefore({
+			prop: 'align-' + alignment,
+			value: alignValue
+		});
+
+		decl.cloneBefore({
+			prop: 'justify-' + alignment,
+			value: justifyValue
+		});
+
+		// remove place-[alignment]
+		decl.remove();
+	});
+});
diff --git a/package.json b/package.json
new file mode 100644
index 0000000..7e7262f
--- /dev/null
+++ b/package.json
@@ -0,0 +1,53 @@
+{
+  "name": "postcss-place",
+  "version": "1.0.0",
+  "description": "`place-[alignment] shorthand for align-[alignment] and justify-[alignment]",
+  "author": "Jonathan Neal <jonathantneal@hotmail.com> (http://jonathantneal.com)",
+  "license": "CC0-1.0",
+  "repository": "jonathantneal/postcss-place",
+  "homepage": "https://github.com/jonathantneal/postcss-place#readme",
+  "bugs": "https://github.com/jonathantneal/postcss-place/issues",
+  "main": "index.js",
+  "files": [
+    "index.js"
+  ],
+  "scripts": {
+    "lint": "eslint index.js && jscs index.js",
+    "tape": "node test",
+    "test": "npm run lint && node test"
+  },
+  "engines": {
+    "node": ">=6.9.1"
+  },
+  "dependencies": {
+    "postcss": "^5.2.5",
+    "postcss-value-parser": "^3.3.0"
+  },
+  "devDependencies": {
+    "eslint": "^3.10.2",
+    "eslint-config-10up": "github:jonathantneal/eslint-config-10up",
+    "jscs": "^3.0.7",
+    "jscs-config-10up": "github:jonathantneal/jscs-config-10up"
+  },
+  "eslintConfig": {
+    "extends": "10up",
+    "parserOptions": {
+      "sourceType": "module"
+    }
+  },
+  "jscsConfig": {
+    "preset": "10up"
+  },
+  "keywords": [
+    "postcss",
+    "css",
+    "postcss-plugin",
+    "shorthands",
+    "alignments",
+    "justifies",
+    "justify",
+    "aligns",
+    "contents",
+    "selfs"
+  ]
+}
diff --git a/test.js b/test.js
new file mode 100644
index 0000000..5fcb605
--- /dev/null
+++ b/test.js
@@ -0,0 +1,81 @@
+// tests
+var tests = {
+	'postcss-place': {
+		'basic': {
+			message: 'supports basic usage'
+		}
+	}
+};
+
+// tooling
+const fs     = require('fs');
+const path   = require('path');
+const plugin = require('.');
+
+// error symbols
+const pass = '\x1b[32m\✔\x1b[0m';
+const fail = '\x1b[31m\✖\x1b[0m';
+
+// runner
+Promise.all(Object.keys(tests).map(
+	(section) => Promise.all(
+		Object.keys(tests[section]).map(
+			(name) => {
+				const baseName = name.split(':')[0];
+				const testName = name.split(':').join('.');
+				const warnings = tests[section][name].warning || 0;
+
+				return Promise.all([
+					readFile(path.resolve(__dirname, 'test', baseName + '.css'), 'utf8'),
+					readFile(path.resolve(__dirname, 'test', testName + '.expect.css'), 'utf8')
+				]).then(
+					([actualCSS, expectCSS]) => plugin.process(actualCSS, tests[section][name].options || {}).then(
+						(result) => writeFile(path.resolve(__dirname, 'test', testName + '.result.css'), result.css).then(
+							() => {
+								if (result.css !== expectCSS) {
+									throw new Error(`  ${ fail }  ${ tests[section][name].message }\n${ JSON.stringify({
+										expect: expectCSS,
+										result: result.css
+									}, null, '  ') }`);
+								} else if (result.warnings().length !== warnings) {
+									throw Error(`  ${ fail } ${ tests[section][name].message } (${ result.warnings().length } warnings, expected ${ warnings })`);
+								} else {
+									return `  ${ pass }  ${ tests[section][name].message }`;
+								}
+							}
+						)
+					)
+				);
+			}
+		)
+	).then(
+		(messages) => console.log(`${ pass } ${ section }\n${ messages.join('\n') }`)
+	).catch(
+		(error)    => {
+			console.log(`${ fail } ${ section }\n${ error.message }`);
+
+			throw Error;
+		}
+	)
+)).then(
+	() => console.log(`\n${ pass } Test passed`) && process.exit(0),
+	() => console.log(`\n${ fail } Test failed`) && process.exit(1)
+);
+
+// Promise fs.readFile
+function readFile(filename) {
+	return new Promise(
+		(resolve, reject) => fs.readFile(filename, 'utf8',
+			(error, data) => error ? reject(error) : resolve(data)
+		)
+	);
+}
+
+// Promise fs.writeFile
+function writeFile(filename, data) {
+	return new Promise(
+		(resolve, reject) => fs.writeFile(filename, data,
+			(error) => error ? reject(error) : resolve()
+		)
+	);
+}
diff --git a/test/basic.css b/test/basic.css
new file mode 100644
index 0000000..a760709
--- /dev/null
+++ b/test/basic.css
@@ -0,0 +1,23 @@
+a {
+	place-content: first second;
+	place-items: first second;
+	place-self: first second;
+}
+
+b {
+	place-content: first;
+	place-items: first;
+	place-self: first;
+}
+
+c {
+	place-content: var(--first) second;
+	place-items: var(--first) second;
+	place-self: var(--first) second;
+}
+
+d {
+	place-content: first var(--second);
+	place-items: first var(--second);
+	place-self: first var(--second);
+}
diff --git a/test/basic.expect.css b/test/basic.expect.css
new file mode 100644
index 0000000..92214f4
--- /dev/null
+++ b/test/basic.expect.css
@@ -0,0 +1,35 @@
+a {
+	align-content: first;
+	justify-content: second;
+	align-items: first;
+	justify-items: second;
+	align-self: first;
+	justify-self: second;
+}
+
+b {
+	align-content: first;
+	justify-content: first;
+	align-items: first;
+	justify-items: first;
+	align-self: first;
+	justify-self: first;
+}
+
+c {
+	align-content: var(--first);
+	justify-content: second;
+	align-items: var(--first);
+	justify-items: second;
+	align-self: var(--first);
+	justify-self: second;
+}
+
+d {
+	align-content: first;
+	justify-content: var(--second);
+	align-items: first;
+	justify-items: var(--second);
+	align-self: first;
+	justify-self: var(--second);
+}
-- 
2.33.1

