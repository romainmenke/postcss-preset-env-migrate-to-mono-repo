From 63f06590a12a2c0eb9663bada9e4eba4efb5d4ab Mon Sep 17 00:00:00 2001
From: Jonathan Neal <jonathantneal@hotmail.com>
Date: Thu, 20 Sep 2018 09:08:12 -0400
Subject: [PATCH 47/97] 6.0.0

---
 .gitignore                         |   2 +-
 .rollup.js                         |   4 +-
 .tape.js                           |  40 +++-
 CHANGELOG.md                       |  13 ++
 INSTALL.md                         | 170 ++++++++++++++
 README.md                          | 352 ++++++++++++++---------------
 index.js                           |  36 ++-
 lib/ids-by-execution-order.js      |   2 +-
 package.json                       |  91 ++++----
 test/basic.autoprefixer.expect.css |  51 ++---
 test/basic.ch38.expect.css         |  51 ++---
 test/basic.css                     |  29 +--
 test/basic.expect.css              |  55 +++--
 test/basic.ff49.expect.css         |  33 ++-
 test/basic.nesting.expect.css      |  33 ++-
 test/basic.stage0-ff49.expect.css  |  35 ++-
 test/basic.stage0.expect.css       |  45 ++--
 test/import.css                    |  16 ++
 test/import.expect.css             |  15 ++
 19 files changed, 648 insertions(+), 425 deletions(-)
 create mode 100644 INSTALL.md
 create mode 100644 test/import.css
 create mode 100644 test/import.expect.css

diff --git a/.gitignore b/.gitignore
index de73e5a..6b0c809 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1,5 +1,5 @@
 node_modules
-index.*.js
+index.*.*
 package-lock.json
 *.log*
 *.result.css
diff --git a/.rollup.js b/.rollup.js
index 0436758..8e1bda0 100644
--- a/.rollup.js
+++ b/.rollup.js
@@ -4,12 +4,12 @@ export default {
 	input: 'index.js',
 	output: [
 		{ file: 'index.cjs.js', format: 'cjs' },
-		{ file: 'index.es.js', format: 'es' }
+		{ file: 'index.es.mjs', format: 'es' }
 	],
 	plugins: [
 		babel({
 			presets: [
-				['env', { modules: false, targets: { node: 4 } }]
+				['@babel/env', { modules: false, targets: { node: 6 } }]
 			]
 		})
 	]
diff --git a/.tape.js b/.tape.js
index 98bb20c..99e28ec 100644
--- a/.tape.js
+++ b/.tape.js
@@ -61,9 +61,12 @@ module.exports = {
 			}
 		},
 		'insert:before': {
-			message: 'supports { stage: 1, before: { "color-mod-function": [ require("postcss-simple-vars") ] } } usage',
+			message: 'supports { stage: 1, features: { "color-mod-function": true }, insertBefore: { "color-mod-function": [ require("postcss-simple-vars") ] } } usage',
 			options: {
 				stage: 1,
+				features: {
+					'color-mod-function': true
+				},
 				insertBefore: {
 					'color-mod-function': [
 						require('postcss-simple-vars')
@@ -72,31 +75,31 @@ module.exports = {
 			}
 		},
 		'insert:after': {
-			message: 'supports { stage: 1, after: { "color-mod-function": [ require("postcss-simple-vars")() ] } } usage',
+			message: 'supports { stage: 1, features: { "color-mod-function": { unresolved: "warn" } }, insertAfter: { "color-mod-function": [ require("postcss-simple-vars")() ] } } usage',
 			options: {
 				stage: 1,
-				insertAfter: {
-					'color-mod-function': require('postcss-simple-vars')
-				},
 				features: {
 					'color-mod-function': {
 						unresolved: 'warn'
 					}
+				},
+				insertAfter: {
+					'color-mod-function': require('postcss-simple-vars')
 				}
 			},
 			warning: 2
 		},
 		'insert:after:exec': {
-			message: 'supports { stage: 2, after: { "color-mod-function": require("postcss-simple-vars")() } } usage',
+			message: 'supports { stage: 2, features: { "color-mod-function": { unresolved: "ignore" } }, insertAfter: { "color-mod-function": require("postcss-simple-vars")() } } usage',
 			options: {
 				stage: 2,
-				insertAfter: {
-					'color-mod-function': require('postcss-simple-vars')()
-				},
 				features: {
 					'color-mod-function': {
 						unresolved: 'ignore'
 					}
+				},
+				insertAfter: {
+					'color-mod-function': require('postcss-simple-vars')()
 				}
 			},
 			expect: 'insert.after.expect.css'
@@ -117,6 +120,23 @@ module.exports = {
 				}
 			},
 			expect: 'insert.after.expect.css'
-		}
+		},
+		'import': {
+			message: 'supports { importFrom: { customMedia, customProperties, customSelectors }, stage: 0 } usage',
+			options: {
+				importFrom: {
+					customMedia: {
+						'--narrow-window': '(max-width: 30em)'
+					},
+					customProperties: {
+						'--order': '1'
+					},
+					customSelectors: {
+						':--heading': 'h1, h2, h3, h4, h5, h6'
+					}
+				},
+				stage: 0
+			}
+		},
 	}
 };
diff --git a/CHANGELOG.md b/CHANGELOG.md
index 311095c..5019db2 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,5 +1,18 @@
 # Changes to PostCSS Preset Env
 
+### 6.0.0 (September 20, 2018)
+
+- Added: Support for PostCSS 7+
+- Added: Support for PostCSS Values Parser 2+
+- Added: Support for PostCSS Selector Parser 5+
+- Added: Support for Node 6+
+- Updated: All 28 plugins
+
+### 5.4.0 (July 25, 2018)
+
+- Added: `toggle` option to override which features are enabled or disabled
+- Deprecated: toggle features with `toggle`, not `features`
+
 ### 5.3.0 (July 24, 2018)
 
 - Updated: `postcss-lab-function` to v1.1.0 (minor update)
diff --git a/INSTALL.md b/INSTALL.md
new file mode 100644
index 0000000..2443bc9
--- /dev/null
+++ b/INSTALL.md
@@ -0,0 +1,170 @@
+# Installing PostCSS Preset Env
+
+[PostCSS Preset Env] runs in all Node environments, with special instructions for:
+
+| [Node](#node) | [PostCSS CLI](#postcss-cli) | [Webpack](#webpack) | [Create React App](#create-react-app) | [Gulp](#gulp) | [Grunt](#grunt) |
+| --- | --- | --- | --- | --- | --- |
+
+## Node
+
+Add [PostCSS Preset Env] to your project:
+
+```bash
+npm install postcss-preset-env --save-dev
+```
+
+Use [PostCSS Preset Env] to process your CSS:
+
+```js
+const postcssPresetEnv = require('postcss-preset-env');
+
+postcssPresetEnv.process(YOUR_CSS /*, processOptions, pluginOptions */);
+```
+
+Or use it as a [PostCSS] plugin:
+
+```js
+const postcss = require('postcss');
+const postcssPresetEnv = require('postcss-preset-env');
+
+postcss([
+  postcssPresetEnv(/* pluginOptions */)
+]).process(YOUR_CSS /*, processOptions */);
+```
+
+## PostCSS CLI
+
+Add [PostCSS CLI] to your project:
+
+```bash
+npm install postcss-cli --save-dev
+```
+
+Use [PostCSS Preset Env] in your `postcss.config.js` configuration file:
+
+```js
+const postcssPresetEnv = require('postcss-preset-env');
+
+module.exports = {
+  plugins: [
+    postcssPresetEnv(/* pluginOptions */)
+  ]
+}
+```
+
+## Webpack
+
+Add [PostCSS Loader] to your project:
+
+```bash
+npm install postcss-loader --save-dev
+```
+
+Use [PostCSS Preset Env] in your Webpack configuration:
+
+```js
+const postcssPresetEnv = require('postcss-preset-env');
+
+module.exports = {
+  module: {
+    rules: [
+      {
+        test: /\.css$/,
+        use: [
+          'style-loader',
+          { loader: 'css-loader', options: { importLoaders: 1 } },
+          { loader: 'postcss-loader', options: {
+            ident: 'postcss',
+            plugins: () => [
+              postcssPresetEnv(/* pluginOptions */)
+            ]
+          } }
+        ]
+      }
+    ]
+  }
+}
+```
+
+## Create React App
+
+Add [React App Rewired] and [React App Rewire PostCSS] to your project:
+
+```bash
+npm install react-app-rewired react-app-rewire-postcss --save-dev
+```
+
+Use [React App Rewire PostCSS] and [PostCSS Preset Env] in your
+`config-overrides.js` file:
+
+```js
+const reactAppRewirePostcss = require('react-app-rewire-postcss');
+const postcssPresetEnv = require('postcss-preset-env');
+
+module.exports = config => reactAppRewirePostcss(config, {
+  plugins: () => [
+    postcssPresetEnv(/* pluginOptions */)
+  ]
+});
+```
+
+## Gulp
+
+Add [Gulp PostCSS] to your project:
+
+```bash
+npm install gulp-postcss --save-dev
+```
+
+Use [PostCSS Preset Env] in your Gulpfile:
+
+```js
+const postcss = require('gulp-postcss');
+const postcssPresetEnv = require('postcss-preset-env');
+
+gulp.task('css', () => gulp.src('./src/*.css').pipe(
+  postcss([
+    postcssPresetEnv(/* pluginOptions */)
+  ])
+).pipe(
+  gulp.dest('.')
+));
+```
+
+## Grunt
+
+Add [Grunt PostCSS] to your project:
+
+```bash
+npm install grunt-postcss --save-dev
+```
+
+Use [PostCSS Preset Env] in your Gruntfile:
+
+```js
+const postcssPresetEnv = require('postcss-preset-env');
+
+grunt.loadNpmTasks('grunt-postcss');
+
+grunt.initConfig({
+  postcss: {
+    options: {
+      use: [
+       postcssPresetEnv(/* pluginOptions */)
+      ]
+    },
+    dist: {
+      src: '*.css'
+    }
+  }
+});
+```
+
+[Gulp PostCSS]: https://github.com/postcss/gulp-postcss
+[Grunt PostCSS]: https://github.com/nDmitry/grunt-postcss
+[PostCSS]: https://github.com/postcss/postcss
+[PostCSS CLI]: https://github.com/postcss/postcss-cli
+[PostCSS Loader]: https://github.com/postcss/postcss-loader
+[PostCSS Preset Env]: https://github.com/csstools/postcss-preset-env
+[React App Rewire PostCSS]: https://github.com/csstools/react-app-rewire-postcss
+[React App Rewired]: https://github.com/timarney/react-app-rewired
diff --git a/README.md b/README.md
index b59079d..cbef2d9 100644
--- a/README.md
+++ b/README.md
@@ -1,4 +1,4 @@
-# PostCSS Preset Env [<img src="https://postcss.github.io/postcss/logo.svg" alt="PostCSS" width="90" height="90" align="right">][PostCSS]
+# PostCSS Preset Env [<img src="https://postcss.github.io/postcss/logo.svg" alt="PostCSS" width="90" height="90" align="right">][postcss]
 
 [![NPM Version][npm-img]][npm-url]
 [![Build Status][cli-img]][cli-url]
@@ -36,10 +36,10 @@ body {
 }
 
 a {
-  color: rebeccapurple;
+  color: rgb(0 0 100% / 90%);
 
   &:hover {
-    color: color-mod(var(--mainColor) alpha(80%));
+    color: rebeccapurple;
   }
 }
 
@@ -74,11 +74,11 @@ h1, h2, h3, h4, h5, h6 {
 }
 
 a {
-  color: #639
+  color: rgba(0, 0, 255, 0.9)
 }
 
 a:hover {
-  color: rgba(18, 52, 86, 0.8);
+  color: #639;
 }
 ```
 
@@ -96,169 +96,53 @@ Add [PostCSS Preset Env] to your project:
 npm install postcss-preset-env --save-dev
 ```
 
-#### Node
-
 Use [PostCSS Preset Env] to process your CSS:
 
 ```js
-import postcssPresetEnv from 'postcss-preset-env';
+const postcssPresetEnv = require('postcss-preset-env');
 
-postcssPresetEnv.process(YOUR_CSS);
+postcssPresetEnv.process(YOUR_CSS /*, processOptions, pluginOptions */);
 ```
 
-#### PostCSS
-
-Add [PostCSS] to your project:
-
-```bash
-npm install postcss --save-dev
-```
-
-Use [PostCSS Preset Env] as a plugin:
+Or use it as a [PostCSS] plugin:
 
 ```js
-import postcss from 'gulp-postcss';
-import postcssPresetEnv from 'postcss-preset-env';
+const postcss = require('postcss');
+const postcssPresetEnv = require('postcss-preset-env');
 
 postcss([
-  postcssPresetEnv(/* options */)
-]).process(YOUR_CSS);
-```
-
-#### Webpack
-
-Add [PostCSS Loader] to your project:
-
-```bash
-npm install postcss-loader --save-dev
-```
-
-Use [PostCSS Preset Env] in your Webpack configuration:
-
-```js
-import postcssPresetEnv from 'postcss-preset-env';
-
-export default {
-  module: {
-    rules: [
-      {
-        test: /\.css$/,
-        use: [
-          'style-loader',
-          { loader: 'css-loader', options: { importLoaders: 1 } },
-          { loader: 'postcss-loader', options: {
-            ident: 'postcss',
-            plugins: () => [
-              postcssPresetEnv(/* options */)
-            ]
-          } }
-        ]
-      }
-    ]
-  }
-};
-```
-
-#### Create React App
-
-Add [React App Rewired] and [React App Rewire PostCSS] to your project:
-
-```bash
-npm install react-app-rewired react-app-rewire-postcss --save-dev
-```
-
-Use [React App Rewire PostCSS] and [PostCSS Preset Env] in your
-`config-overrides.js` file:
-
-```js
-import reactAppRewirePostcss from 'react-app-rewire-postcss';
-import postcssPresetEnv from 'postcss-preset-env';
-
-export default config => reactAppRewirePostcss(config, {
-  plugins: () => [
-    postcssPresetEnv(/* options */)
-  ]
-});
-```
-
-#### Gulp
-
-Add [Gulp PostCSS] to your build tool:
-
-```bash
-npm install gulp-postcss --save-dev
-```
-
-Use [PostCSS Preset Env] in your Gulpfile:
-
-```js
-import postcss from 'gulp-postcss';
-import postcssPresetEnv from 'postcss-preset-env';
-
-gulp.task('css', () => gulp.src('./src/*.css').pipe(
-  postcss([
-    postcssPresetEnv(/* options */)
-  ])
-).pipe(
-  gulp.dest('.')
-));
-```
-
-#### Grunt
-
-Add [Grunt PostCSS] to your project:
-
-```bash
-npm install grunt-postcss --save-dev
+  postcssPresetEnv(/* pluginOptions */)
+]).process(YOUR_CSS /*, processOptions */);
 ```
 
-Use [PostCSS Preset Env] in your Gruntfile:
+[PostCSS Preset Env] runs in all Node environments, with special instructions for:
 
-```js
-import postcssPresetEnv from 'postcss-preset-env';
-
-grunt.loadNpmTasks('grunt-postcss');
-
-grunt.initConfig({
-  postcss: {
-    options: {
-      use: [
-       postcssPresetEnv(/* options */)
-      ]
-    },
-    dist: {
-      src: '*.css'
-    }
-  }
-});
-```
+| [Node](INSTALL.md#node) | [PostCSS CLI](INSTALL.md#postcss-cli) | [Webpack](INSTALL.md#webpack) | [Create React App](INSTALL.md#create-react-app) | [Gulp](INSTALL.md#gulp) | [Grunt](INSTALL.md#grunt) |
+| --- | --- | --- | --- | --- | --- |
 
 ## Options
 
 ### stage
 
 The `stage` option determines which CSS features to polyfill, based upon their
-stability in the process of becoming implemented web standards. The stages are
-0 through 4.
+stability in the process of becoming implemented web standards.
 
 ```js
-postcssPresetEnv({
-  stage: 0
-})
+postcssPresetEnv({ stage: 0 })
 ```
 
-Setting the `stage` option to `false` will disable all of the polyfills. Doing
-this would only be useful if you intended to exclusively use the
-[`features`](#features) option.
+The `stage` can be `0` (experimental) through `4` (stable), or `false`. Setting
+`stage` to `false` will disable every polyfill. Doing this would only be useful
+if you intended to exclusively use the [`features`](#features) option.
 
 Without any configuration options, [PostCSS Preset Env] enables **Stage 2**
 features.
 
 ### features
 
-The `features` option enables or disables specific polyfills. Passing `true` to
-a specific feature id will enable its polyfill, while passing `false` will
-disable it.
+The `features` option enables or disables specific polyfills by ID. Passing
+`true` to a specific feature ID will enable its polyfill, while passing `false`
+will disable it.
 
 ```js
 postcssPresetEnv({
@@ -270,17 +154,14 @@ postcssPresetEnv({
 })
 ```
 
-Passing an object `{}` to a specific feature id will enable and
-configure it.
+Passing an object to a specific feature ID will both enable and configure it.
 
 ```js
 postcssPresetEnv({
   /* use stage 3 features + css color-mod (warning on unresolved) */
   stage: 3,
   features: {
-    'color-mod-function': {
-      unresolved: 'warn'
-    }
+    'color-mod-function': { unresolved: 'warn' }
   }
 })
 ```
@@ -290,21 +171,18 @@ determined by the [`stage`](#stage) option.
 
 ### browsers
 
-The `browsers` option determines which browsers are being supported, which is
-used to further enable or disable polyfills, based upon their support matrix
-found at [caniuse].
+The `browsers` option determines which polyfills are required based upon the
+browsers you are supporting.
 
 [PostCSS Preset Env] supports any standard [browserslist] configuration, which
-includes a `.browserslistrc` file, a `browserslist` key in `package.json`, or
+can be a `.browserslistrc` file, a `browserslist` key in `package.json`, or
 `browserslist` environment variables.
 
 The `browsers` option should only be used when a standard browserslist
 configuration is not available.
 
 ```js
-postcssPresetEnv({
-  browsers: 'last 2 versions'
-})
+postcssPresetEnv({ browsers: 'last 2 versions' })
 ```
 
 If not valid browserslist configuration is specified, the
@@ -328,50 +206,159 @@ postcssPresetEnv({
 })
 ```
 
-### Configuring
+### autoprefixer
 
-Pass the configuration to the plugin in any way supported by [postcss-load-config](https://github.com/michael-ciniawsky/postcss-load-config).
+[PostCSS Preset Env] includes [autoprefixer] and [`browsers`](#browsers) option
+will be passed to it automatically.
 
-#### postcss.config.js
+Specifying `autoprefixer` option enables passing
+[additional options](https://github.com/postcss/autoprefixer#options)
+into [autoprefixer].
 
 ```js
-module.exports = {
-  plugins: {
-    'postcss-preset-env': {
-      stage: 3,
-      browsers: ['last 2 versions', '> 5%'],
-    }
-  }
-};
+postcssPresetEnv({
+  autoprefixer: { grid: true }
+})
+```
+
+### preserve
+
+The `preserve` option determines whether all plugins should receive a
+`preserve` option, which may preserve or remove otherwise-polyfilled CSS. By
+default, this option is not configured.
+
+```js
+postcssPresetEnv({
+  preserve: false // instruct all plugins to omit pre-polyfilled CSS
+});
+```
+
+### importFrom
+
+The `importFrom` option specifies sources where variables like Custom Media,
+Custom Properties, Custom Selectors, and Environment Variables can be imported
+from, which might be CSS, JS, and JSON files, functions, and directly passed
+objects.
+
+```js
+postcssPresetEnv({
+  /*
+    @custom-media --small-viewport (max-width: 30em);
+    @custom-selector :--heading h1, h2, h3;
+    :root { --color: red; }
+  */
+  importFrom: 'path/to/file.css'
+});
 ```
 
-#### package.json
+Multiple sources can be passed into this option, and they will be parsed in the
+order they are received. JavaScript files, JSON files, functions, and objects
+will use different namespaces to import different kinds of variables.
 
-```json
-{
-  "postcss": {
-    "postcss-preset-env": {
-      "stage": 3,
-      "browsers": ["last 2 versions", "> 5%"]
+```js
+postcssPresetEnv({
+  importFrom: [
+    /*
+      @custom-media --small-viewport (max-width: 30em);
+      @custom-selector :--heading h1, h2, h3;
+      :root { --color: red; }
+    */
+    'path/to/file.css',
+
+    /* module.exports = {
+      customMedia: { '--small-viewport': '(max-width: 30em)' },
+      customProperties: { '--color': 'red' },
+      customSelectors: { ':--heading': 'h1, h2, h3' },
+      environmentVariables: { '--branding-padding': '20px' }
+    } */
+    'and/then/this.js',
+
+    /* {
+      "custom-media": { "--small-viewport": "(max-width: 30em)" }
+      "custom-properties": { "--color": "red" },
+      "custom-selectors": { ":--heading": "h1, h2, h3" },
+      "environment-variables": { "--branding-padding": "20px" }
+    } */
+    'and/then/that.json',
+
+    {
+      customMedia: { '--small-viewport': '(max-width: 30em)' },
+      customProperties: { '--color': 'red' },
+      customSelectors: { ':--heading': 'h1, h2, h3' },
+      environmentVariables: { '--branding-padding': '20px' }
+    },
+    () => {
+      const customMedia = { '--small-viewport': '(max-width: 30em)' };
+      const customProperties = { '--color': 'red' };
+      const customSelectors = { ':--heading': 'h1, h2, h3' };
+      const environmentVariables = { '--branding-padding': '20px' };
+
+      return { customMedia, customProperties, customSelectors, environmentVariables };
     }
-  }
-}
+  ]
+});
 ```
 
-### autoprefixer
+### exportTo
 
-[PostCSS Preset Env] includes [autoprefixer] and [`browsers`](#browsers) option will be passed to it automatically.
+The `exportTo` option specifies destinations where variables like Custom Media,
+Custom Properties, Custom Selectors, and Environment Variables can be exported
+to, which might be CSS, JS, and JSON files, functions, and directly passed
+objects.
 
-Specifying `autoprefixer` option enables passing
-[additional options](https://github.com/postcss/autoprefixer#options)
-into [autoprefixer].
+```js
+postcssPresetEnv({
+  /*
+    @custom-media --small-viewport (max-width: 30em);
+    @custom-selector :--heading h1, h2, h3;
+    :root { --color: red; }
+  */
+  exportTo: 'path/to/file.css'
+});
+```
+
+Multiple destinations can be passed into this option as well, and they will be
+parsed in the order they are received. JavaScript files, JSON files, and
+objects will use different namespaces to import different kinds of variables.
 
 ```js
+const cachedObject = {};
+
 postcssPresetEnv({
-  autoprefixer: {
-    grid: true
-  }
-})
+  exportTo: [
+    /*
+      @custom-media --small-viewport (max-width: 30em);
+      @custom-selector :--heading h1, h2, h3;
+      :root { --color: red; }
+    */
+    'path/to/file.css',
+
+    /* module.exports = {
+      customMedia: { '--small-viewport': '(max-width: 30em)' },
+      customProperties: { '--color': 'red' },
+      customSelectors: { ':--heading': 'h1, h2, h3' },
+      environmentVariables: { '--branding-padding': '20px' }
+    } */
+    'and/then/this.js',
+
+    /* {
+      "custom-media": { "--small-viewport": "(max-width: 30em)" }
+      "custom-properties": { "--color": "red" },
+      "custom-selectors": { ":--heading": "h1, h2, h3" },
+      "environment-variables": { "--branding-padding": "20px" }
+    } */
+    'and/then/that.json',
+
+    cachedObject,
+    variables => {
+      if ('customProperties' in variables) {
+        // do something special with customProperties
+      }
+
+      Object.assign(cachedObject, variables);
+    }
+  ]
+});
 ```
 
 [cli-img]: https://img.shields.io/travis/csstools/postcss-preset-env.svg
@@ -389,11 +376,6 @@ postcssPresetEnv({
 [cssdb]: https://cssdb.org/
 [PostCSS]: https://github.com/postcss/postcss
 [PostCSS Preset Env]: https://github.com/csstools/postcss-preset-env
-[PostCSS Loader]: https://github.com/postcss/postcss-loader
-[Gulp PostCSS]: https://github.com/postcss/gulp-postcss
-[Grunt PostCSS]: https://github.com/nDmitry/grunt-postcss
-[React App Rewire PostCSS]: https://github.com/csstools/react-app-rewire-postcss
-[React App Rewired]: https://github.com/timarney/react-app-rewired
 [readme-style-with-preset-env-img]: https://csstools.github.io/postcss-preset-env/readme-style-with-preset-env.svg
 [readme-style-with-preset-env-url]: https://codepen.io/pen?template=OZRovK
 [readme-transform-with-preset-env-img]: https://csstools.github.io/postcss-preset-env/readme-transform-with-preset-env.svg
diff --git a/index.js b/index.js
index c2d89d1..0dc108a 100644
--- a/index.js
+++ b/index.js
@@ -19,6 +19,7 @@ export default postcss.plugin('postcss-preset-env', opts => {
 		: parseInt(opts.stage) || 0
 	: 2;
 	const autoprefixerOptions = Object(opts).autoprefixer;
+	const sharedOpts = initializeSharedOpts(Object(opts));
 
 	const stagedAutoprefixer = autoprefixer(Object.assign({ browsers }, autoprefixerOptions));
 
@@ -64,8 +65,17 @@ export default postcss.plugin('postcss-preset-env', opts => {
 			browsers: feature.browsers,
 			plugin: typeof feature.plugin.process === 'function'
 				? features[feature.id] === true
-					? feature.plugin()
-				: feature.plugin(features[feature.id])
+					? sharedOpts
+						// if the plugin is enabled and has shared options
+						? feature.plugin(Object.assign({}, sharedOpts))
+					// otherwise, if the plugin is enabled
+					: feature.plugin()
+				: sharedOpts
+					// if the plugin has shared options and individual options
+					? feature.plugin(Object.assign({}, sharedOpts, features[feature.id]))
+				// if the plugin has individual options
+				: feature.plugin(Object.assign({}, features[feature.id]))
+			// if the plugin is already initialized
 			: feature.plugin,
 			id: feature.id
 		})
@@ -102,3 +112,25 @@ export default postcss.plugin('postcss-preset-env', opts => {
 		return polyfills;
 	};
 });
+
+const initializeSharedOpts = opts => {
+	if ('importFrom' in opts || 'exportTo' in opts || 'preserve' in opts) {
+		const sharedOpts = {};
+
+		if ('importFrom' in opts) {
+			sharedOpts.importFrom = opts.importFrom;
+		}
+
+		if ('exportTo' in opts) {
+			sharedOpts.exportTo = opts.exportTo;
+		}
+
+		if ('preserve' in opts) {
+			sharedOpts.preserve = opts.preserve;
+		}
+
+		return sharedOpts;
+	}
+
+	return false;
+}
diff --git a/lib/ids-by-execution-order.js b/lib/ids-by-execution-order.js
index 53857f0..b8c2c08 100644
--- a/lib/ids-by-execution-order.js
+++ b/lib/ids-by-execution-order.js
@@ -3,8 +3,8 @@ export default [
 	'custom-properties',
 	'custom-property-sets',
 	'image-set-function',
-	'logical-properties-and-values',
 	'nesting-rules',
+	'logical-properties-and-values',
 	'custom-media-queries',
 	'media-query-ranges',
 	'custom-selectors',
diff --git a/package.json b/package.json
index b574c7f..660e225 100644
--- a/package.json
+++ b/package.json
@@ -1,6 +1,6 @@
 {
   "name": "postcss-preset-env",
-  "version": "5.3.0",
+  "version": "6.0.0",
   "description": "Convert modern CSS into something browsers understand",
   "author": "Jonathan Neal <jonathantneal@hotmail.com>",
   "license": "CC0-1.0",
@@ -8,11 +8,12 @@
   "homepage": "https://github.com/csstools/postcss-preset-env#readme",
   "bugs": "https://github.com/csstools/postcss-preset-env/issues",
   "main": "index.cjs.js",
-  "module": "index.es.js",
+  "module": "index.es.mjs",
   "files": [
     "index.cjs.js",
-    "index.es.js",
-    "lib"
+    "index.cjs.js.map",
+    "index.es.mjs",
+    "index.es.mjs.map"
   ],
   "scripts": {
     "prepublishOnly": "npm test",
@@ -22,54 +23,54 @@
     "test:tape": "postcss-tape"
   },
   "engines": {
-    "node": ">=4.0.0"
+    "node": ">=6.0.0"
   },
   "dependencies": {
-    "autoprefixer": "^8.6.5",
-    "browserslist": "^3.2.8",
-    "caniuse-lite": "^1.0.30000865",
-    "cssdb": "^3.1.0",
-    "postcss": "^6.0.23",
-    "postcss-attribute-case-insensitive": "^3.0.1",
-    "postcss-color-functional-notation": "^1.0.2",
-    "postcss-color-hex-alpha": "^3.0.0",
-    "postcss-color-mod-function": "^2.4.3",
-    "postcss-color-rebeccapurple": "^3.1.0",
-    "postcss-custom-media": "^6.0.0",
-    "postcss-custom-properties": "^7.0.0",
-    "postcss-custom-selectors": "^4.0.1",
-    "postcss-dir-pseudo-class": "^4.0.0",
-    "postcss-env-function": "^1.0.0",
-    "postcss-focus-visible": "^3.0.0",
-    "postcss-focus-within": "^2.0.0",
-    "postcss-font-family-system-ui": "^3.0.0",
-    "postcss-font-variant": "^3.0.0",
-    "postcss-gap-properties": "^1.0.0",
-    "postcss-image-set-function": "^2.0.0",
-    "postcss-initial": "^2.0.0",
-    "postcss-lab-function": "^1.1.0",
-    "postcss-logical": "^1.1.1",
-    "postcss-media-minmax": "^3.0.0",
-    "postcss-nesting": "^6.0.0",
-    "postcss-overflow-shorthand": "^1.0.1",
-    "postcss-page-break": "^1.0.0",
-    "postcss-place": "^3.0.1",
-    "postcss-pseudo-class-any-link": "^5.0.0",
-    "postcss-replace-overflow-wrap": "^2.0.0",
-    "postcss-selector-matches": "^3.0.1",
-    "postcss-selector-not": "^3.0.1"
+    "autoprefixer": "^9.1.5",
+    "browserslist": "^4.1.1",
+    "caniuse-lite": "^1.0.30000885",
+    "cssdb": "^3.2.1",
+    "postcss": "^7.0.2",
+    "postcss-attribute-case-insensitive": "^4.0.0",
+    "postcss-color-functional-notation": "^2.0.1",
+    "postcss-color-hex-alpha": "^5.0.2",
+    "postcss-color-mod-function": "^3.0.1",
+    "postcss-color-rebeccapurple": "^4.0.1",
+    "postcss-custom-media": "^7.0.2",
+    "postcss-custom-properties": "^8.0.3",
+    "postcss-custom-selectors": "^5.1.1",
+    "postcss-dir-pseudo-class": "^5.0.0",
+    "postcss-env-function": "^2.0.1",
+    "postcss-focus-visible": "^4.0.0",
+    "postcss-focus-within": "^3.0.0",
+    "postcss-font-family-system-ui": "^4.1.0",
+    "postcss-font-variant": "^4.0.0",
+    "postcss-gap-properties": "^2.0.0",
+    "postcss-image-set-function": "^3.0.1",
+    "postcss-initial": "^3.0.0",
+    "postcss-lab-function": "^2.0.1",
+    "postcss-logical": "^3.0.0",
+    "postcss-media-minmax": "^4.0.0",
+    "postcss-nesting": "^7.0.0",
+    "postcss-overflow-shorthand": "^2.0.0",
+    "postcss-page-break": "^2.0.0",
+    "postcss-place": "^4.0.1",
+    "postcss-pseudo-class-any-link": "^6.0.0",
+    "postcss-replace-overflow-wrap": "^3.0.0",
+    "postcss-selector-matches": "^4.0.0",
+    "postcss-selector-not": "^4.0.0"
   },
   "devDependencies": {
-    "babel-core": "^6.26.3",
-    "babel-eslint": "^8.2.6",
-    "babel-preset-env": "^1.7.0",
-    "eslint": "^5.2.0",
+    "@babel/core": "^7.1.0",
+    "@babel/preset-env": "^7.1.0",
+    "babel-eslint": "^9.0.0",
+    "eslint": "^5.6.0",
     "eslint-config-dev": "^2.0.0",
-    "postcss-simple-vars": "^4.1.0",
+    "postcss-simple-vars": "^5.0.1",
     "postcss-tape": "^2.2.0",
     "pre-commit": "^1.2.2",
-    "rollup": "^0.63.4",
-    "rollup-plugin-babel": "^3.0.7"
+    "rollup": "^0.66.1",
+    "rollup-plugin-babel": "^4.0.3"
   },
   "eslintConfig": {
     "extends": "dev",
diff --git a/test/basic.autoprefixer.expect.css b/test/basic.autoprefixer.expect.css
index a8248bb..bd711da 100644
--- a/test/basic.autoprefixer.expect.css
+++ b/test/basic.autoprefixer.expect.css
@@ -23,13 +23,15 @@
 	order: 2;
 }
 
-.test-logical-properties-and-values {
-	[dir="ltr"] & {
+[dir="ltr"] .test-logical-properties-and-values {
 	margin: 1px 4px 3px 2px;
-	}
-	[dir="rtl"] & {
+}
+
+[dir="rtl"] .test-logical-properties-and-values {
 	margin: 1px 2px 3px 4px;
-	}
+}
+
+.test-logical-properties-and-values {
 	order: 3;
 	padding-top: 5px;
 	padding-bottom: 5px;
@@ -59,7 +61,7 @@
 	}
 }
 
-@custom-selector :--heading h1, h2, h3, h4, h5, h6
+@custom-selector :--heading h1, h2, h3, h4, h5, h6;
 
 .test-custom-selectors:--heading {
 	order: 9;
@@ -75,36 +77,31 @@
 }
 
 .test-hexadecimal-alpha-notation {
-	background-color: rgba(243, 243, 243, 0.95294);
-	color: rgba(0, 0, 0, 0.2);
+	background-color: rgba(243,243,243,0.95294);
+	color: rgba(0,0,0,0.2);
 	order: 12;
 }
 
-.test-color-mod-function {
-	color: rgba(0, 0, 0, 0.5);
-	order: 13;
-}
-
 .test-color-functional-notation {
 	color: rgb(70% 13.5% 13.5% / 50%);
-	order: 14;
+	order: 13;
 }
 
 .test-lab-function {
 	background-color: rgb(178, 34, 34);
 	color: rgba(178, 34, 34, 0.5);
-	order: 15;
+	order: 14;
 }
 
 .test-system-ui-font-family {
-	font-family: system-ui, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Oxygen, Ubuntu, Cantarell, Droid Sans, Helvetica Neue;
-	order: 16;
+	font-family: system-ui, -apple-system, Segoe UI, Roboto, Noto Sans, Ubuntu, Cantarell, Helvetica Neue;
+	order: 15;
 }
 
 .test-font-variant-property {
 	font-feature-settings: "c2sc";
 	font-variant-caps: small-caps;
-	order: 17;
+	order: 16;
 }
 
 .test-all-property {
@@ -192,38 +189,38 @@
 	word-spacing: normal;
 	z-index: auto;
 	all: initial;
-	order: 18;
+	order: 17;
 }
 
 .test-matches-pseudo-class:first-child, .test-matches-pseudo-class.special {
-	order: 19;
+	order: 18;
 }
 
 .test-not-pseudo-class:not(:first-child):not(.special) {
-	order: 20;
+	order: 19;
 }
 
 .test-any-link-pseudo-class:link,.test-any-link-pseudo-class:visited {
-	order: 21;
+	order: 20;
 }
 
 .test-any-link-pseudo-class:any-link {
-	order: 21;
+	order: 20;
 }
 
 [dir="rtl"] .test-dir-pseudo-class {
-	order: 22;
+	order: 21;
 }
 
 .test-overflow-wrap-property {
-	order: 23;
+	order: 22;
 	word-wrap: break-word;
 }
 
 .test-focus-visible-pseudo-class.focus-visible {
-	order: 24;
+	order: 23;
 }
 
 .test-focus-visible-pseudo-class:focus-visible {
-	order: 24;
+	order: 23;
 }
diff --git a/test/basic.ch38.expect.css b/test/basic.ch38.expect.css
index c7fcda5..a7e8b4d 100644
--- a/test/basic.ch38.expect.css
+++ b/test/basic.ch38.expect.css
@@ -13,13 +13,15 @@
 	order: 2;
 }
 
-.test-logical-properties-and-values {
-	[dir="ltr"] & {
+[dir="ltr"] .test-logical-properties-and-values {
 	margin: 1px 4px 3px 2px;
-	}
-	[dir="rtl"] & {
+}
+
+[dir="rtl"] .test-logical-properties-and-values {
 	margin: 1px 2px 3px 4px;
-	}
+}
+
+.test-logical-properties-and-values {
 	order: 3;
 	padding-top: 5px;
 	padding-bottom: 5px;
@@ -49,7 +51,7 @@
 	}
 }
 
-@custom-selector :--heading h1, h2, h3, h4, h5, h6
+@custom-selector :--heading h1, h2, h3, h4, h5, h6;
 
 .test-custom-selectors:--heading {
 	order: 9;
@@ -65,73 +67,68 @@
 }
 
 .test-hexadecimal-alpha-notation {
-	background-color: rgba(243, 243, 243, 0.95294);
-	color: rgba(0, 0, 0, 0.2);
+	background-color: rgba(243,243,243,0.95294);
+	color: rgba(0,0,0,0.2);
 	order: 12;
 }
 
-.test-color-mod-function {
-	color: rgba(0, 0, 0, 0.5);
-	order: 13;
-}
-
 .test-color-functional-notation {
 	color: rgb(70% 13.5% 13.5% / 50%);
-	order: 14;
+	order: 13;
 }
 
 .test-lab-function {
 	background-color: rgb(178, 34, 34);
 	color: rgba(178, 34, 34, 0.5);
-	order: 15;
+	order: 14;
 }
 
 .test-system-ui-font-family {
-	font-family: system-ui, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Oxygen, Ubuntu, Cantarell, Droid Sans, Helvetica Neue;
-	order: 16;
+	font-family: system-ui, -apple-system, Segoe UI, Roboto, Noto Sans, Ubuntu, Cantarell, Helvetica Neue;
+	order: 15;
 }
 
 .test-font-variant-property {
 	-webkit-font-feature-settings: "c2sc";
 	        font-feature-settings: "c2sc";
 	font-variant-caps: small-caps;
-	order: 17;
+	order: 16;
 }
 
 .test-all-property {
 	all: initial;
-	order: 18;
+	order: 17;
 }
 
 .test-matches-pseudo-class:first-child, .test-matches-pseudo-class.special {
-	order: 19;
+	order: 18;
 }
 
 .test-not-pseudo-class:not(:first-child):not(.special) {
-	order: 20;
+	order: 19;
 }
 
 .test-any-link-pseudo-class:-webkit-any-link {
-	order: 21;
+	order: 20;
 }
 
 .test-any-link-pseudo-class:any-link {
-	order: 21;
+	order: 20;
 }
 
 [dir="rtl"] .test-dir-pseudo-class {
-	order: 22;
+	order: 21;
 }
 
 .test-overflow-wrap-property {
-	order: 23;
+	order: 22;
 	overflow-wrap: break-word;
 }
 
 .test-focus-visible-pseudo-class.focus-visible {
-	order: 24;
+	order: 23;
 }
 
 .test-focus-visible-pseudo-class:focus-visible {
-	order: 24;
+	order: 23;
 }
diff --git a/test/basic.css b/test/basic.css
index 2e855fd..3f7f4bb 100644
--- a/test/basic.css
+++ b/test/basic.css
@@ -41,7 +41,7 @@
 	}
 }
 
-@custom-selector :--heading h1, h2, h3, h4, h5, h6
+@custom-selector :--heading h1, h2, h3, h4, h5, h6;
 
 .test-custom-selectors:--heading {
 	order: 9;
@@ -62,58 +62,53 @@
 	order: 12;
 }
 
-.test-color-mod-function {
-	color: color-mod(black alpha(50%));
-	order: 13;
-}
-
 .test-color-functional-notation {
 	color: rgb(70% 13.5% 13.5% / 50%);
-	order: 14;
+	order: 13;
 }
 
 .test-lab-function {
 	background-color: lab(40 56.6 39);
 	color: lch(40 68.8 34.5 / 50%);
-	order: 15;
+	order: 14;
 }
 
 .test-system-ui-font-family {
 	font-family: system-ui;
-	order: 16;
+	order: 15;
 }
 
 .test-font-variant-property {
 	font-variant-caps: small-caps;
-	order: 17;
+	order: 16;
 }
 
 .test-all-property {
 	all: initial;
-	order: 18;
+	order: 17;
 }
 
 .test-matches-pseudo-class:matches(:first-child, .special) {
-	order: 19;
+	order: 18;
 }
 
 .test-not-pseudo-class:not(:first-child, .special) {
-	order: 20;
+	order: 19;
 }
 
 .test-any-link-pseudo-class:any-link {
-	order: 21;
+	order: 20;
 }
 
 .test-dir-pseudo-class:dir(rtl) {
-	order: 22;
+	order: 21;
 }
 
 .test-overflow-wrap-property {
-	order: 23;
+	order: 22;
 	overflow-wrap: break-word;
 }
 
 .test-focus-visible-pseudo-class:focus-visible {
-	order: 24;
+	order: 23;
 }
diff --git a/test/basic.expect.css b/test/basic.expect.css
index 011e8c7..0e935b4 100644
--- a/test/basic.expect.css
+++ b/test/basic.expect.css
@@ -24,13 +24,15 @@
 	order: 2;
 }
 
-.test-logical-properties-and-values {
-	[dir="ltr"] & {
+[dir="ltr"] .test-logical-properties-and-values {
 	margin: 1px 4px 3px 2px;
-	}
-	[dir="rtl"] & {
+}
+
+[dir="rtl"] .test-logical-properties-and-values {
 	margin: 1px 2px 3px 4px;
-	}
+}
+
+.test-logical-properties-and-values {
 	order: 3;
 	padding-top: 5px;
 	padding-bottom: 5px;
@@ -60,7 +62,7 @@
 	}
 }
 
-@custom-selector :--heading h1, h2, h3, h4, h5, h6
+@custom-selector :--heading h1, h2, h3, h4, h5, h6;
 
 .test-custom-selectors:--heading {
 	order: 9;
@@ -76,37 +78,32 @@
 }
 
 .test-hexadecimal-alpha-notation {
-	background-color: rgba(243, 243, 243, 0.95294);
-	color: rgba(0, 0, 0, 0.2);
+	background-color: rgba(243,243,243,0.95294);
+	color: rgba(0,0,0,0.2);
 	order: 12;
 }
 
-.test-color-mod-function {
-	color: rgba(0, 0, 0, 0.5);
-	order: 13;
-}
-
 .test-color-functional-notation {
 	color: rgb(70% 13.5% 13.5% / 50%);
-	order: 14;
+	order: 13;
 }
 
 .test-lab-function {
 	background-color: rgb(178, 34, 34);
 	color: rgba(178, 34, 34, 0.5);
-	order: 15;
+	order: 14;
 }
 
 .test-system-ui-font-family {
-	font-family: system-ui, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Oxygen, Ubuntu, Cantarell, Droid Sans, Helvetica Neue;
-	order: 16;
+	font-family: system-ui, -apple-system, Segoe UI, Roboto, Noto Sans, Ubuntu, Cantarell, Helvetica Neue;
+	order: 15;
 }
 
 .test-font-variant-property {
 	-webkit-font-feature-settings: "c2sc";
 	        font-feature-settings: "c2sc";
 	font-variant-caps: small-caps;
-	order: 17;
+	order: 16;
 }
 
 .test-all-property {
@@ -213,46 +210,46 @@
 	word-spacing: normal;
 	z-index: auto;
 	all: initial;
-	order: 18;
+	order: 17;
 }
 
 .test-matches-pseudo-class:first-child, .test-matches-pseudo-class.special {
-	order: 19;
+	order: 18;
 }
 
 .test-not-pseudo-class:not(:first-child):not(.special) {
-	order: 20;
+	order: 19;
 }
 
 .test-any-link-pseudo-class:link,.test-any-link-pseudo-class:visited {
-	order: 21;
+	order: 20;
 }
 
 .test-any-link-pseudo-class:-webkit-any-link {
-	order: 21;
+	order: 20;
 }
 
 .test-any-link-pseudo-class:-moz-any-link {
-	order: 21;
+	order: 20;
 }
 
 .test-any-link-pseudo-class:any-link {
-	order: 21;
+	order: 20;
 }
 
 [dir="rtl"] .test-dir-pseudo-class {
-	order: 22;
+	order: 21;
 }
 
 .test-overflow-wrap-property {
-	order: 23;
+	order: 22;
 	word-wrap: break-word;
 }
 
 .test-focus-visible-pseudo-class.focus-visible {
-	order: 24;
+	order: 23;
 }
 
 .test-focus-visible-pseudo-class:focus-visible {
-	order: 24;
+	order: 23;
 }
diff --git a/test/basic.ff49.expect.css b/test/basic.ff49.expect.css
index 17c2e4f..97877ed 100644
--- a/test/basic.ff49.expect.css
+++ b/test/basic.ff49.expect.css
@@ -52,7 +52,7 @@
 	}
 }
 
-@custom-selector :--heading h1, h2, h3, h4, h5, h6
+@custom-selector :--heading h1, h2, h3, h4, h5, h6;
 
 .test-custom-selectors:--heading {
 	order: 9;
@@ -73,62 +73,57 @@
 	order: 12;
 }
 
-.test-color-mod-function {
-	color: rgba(0, 0, 0, 0.5);
-	order: 13;
-}
-
 .test-color-functional-notation {
 	color: rgb(70% 13.5% 13.5% / 50%);
-	order: 14;
+	order: 13;
 }
 
 .test-lab-function {
 	background-color: rgb(178, 34, 34);
 	color: rgba(178, 34, 34, 0.5);
-	order: 15;
+	order: 14;
 }
 
 .test-system-ui-font-family {
-	font-family: system-ui, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Oxygen, Ubuntu, Cantarell, Droid Sans, Helvetica Neue;
-	order: 16;
+	font-family: system-ui, -apple-system, Segoe UI, Roboto, Noto Sans, Ubuntu, Cantarell, Helvetica Neue;
+	order: 15;
 }
 
 .test-font-variant-property {
 	font-variant-caps: small-caps;
-	order: 17;
+	order: 16;
 }
 
 .test-all-property {
 	all: initial;
-	order: 18;
+	order: 17;
 }
 
 .test-matches-pseudo-class:first-child, .test-matches-pseudo-class.special {
-	order: 19;
+	order: 18;
 }
 
 .test-not-pseudo-class:not(:first-child):not(.special) {
-	order: 20;
+	order: 19;
 }
 
 .test-any-link-pseudo-class:-moz-any-link {
-	order: 21;
+	order: 20;
 }
 
 .test-any-link-pseudo-class:any-link {
-	order: 21;
+	order: 20;
 }
 
 .test-dir-pseudo-class:dir(rtl) {
-	order: 22;
+	order: 21;
 }
 
 .test-overflow-wrap-property {
-	order: 23;
+	order: 22;
 	overflow-wrap: break-word;
 }
 
 .test-focus-visible-pseudo-class:focus-visible {
-	order: 24;
+	order: 23;
 }
diff --git a/test/basic.nesting.expect.css b/test/basic.nesting.expect.css
index b5fc301..868e1dc 100644
--- a/test/basic.nesting.expect.css
+++ b/test/basic.nesting.expect.css
@@ -45,7 +45,7 @@
 	}
 }
 
-@custom-selector :--heading h1, h2, h3, h4, h5, h6
+@custom-selector :--heading h1, h2, h3, h4, h5, h6;
 
 .test-custom-selectors:--heading {
 	order: 9;
@@ -66,66 +66,61 @@
 	order: 12;
 }
 
-.test-color-mod-function {
-	color: color-mod(black alpha(50%));
-	order: 13;
-}
-
 .test-color-functional-notation {
 	color: rgb(70% 13.5% 13.5% / 50%);
-	order: 14;
+	order: 13;
 }
 
 .test-lab-function {
 	background-color: lab(40 56.6 39);
 	color: lch(40 68.8 34.5 / 50%);
-	order: 15;
+	order: 14;
 }
 
 .test-system-ui-font-family {
 	font-family: system-ui;
-	order: 16;
+	order: 15;
 }
 
 .test-font-variant-property {
 	font-variant-caps: small-caps;
-	order: 17;
+	order: 16;
 }
 
 .test-all-property {
 	all: initial;
-	order: 18;
+	order: 17;
 }
 
 .test-matches-pseudo-class:matches(:first-child, .special) {
-	order: 19;
+	order: 18;
 }
 
 .test-not-pseudo-class:not(:first-child, .special) {
-	order: 20;
+	order: 19;
 }
 
 .test-any-link-pseudo-class:-webkit-any-link {
-	order: 21;
+	order: 20;
 }
 
 .test-any-link-pseudo-class:-moz-any-link {
-	order: 21;
+	order: 20;
 }
 
 .test-any-link-pseudo-class:any-link {
-	order: 21;
+	order: 20;
 }
 
 .test-dir-pseudo-class:dir(rtl) {
-	order: 22;
+	order: 21;
 }
 
 .test-overflow-wrap-property {
-	order: 23;
+	order: 22;
 	overflow-wrap: break-word;
 }
 
 .test-focus-visible-pseudo-class:focus-visible {
-	order: 24;
+	order: 23;
 }
diff --git a/test/basic.stage0-ff49.expect.css b/test/basic.stage0-ff49.expect.css
index 4c564ef..8f43f8c 100644
--- a/test/basic.stage0-ff49.expect.css
+++ b/test/basic.stage0-ff49.expect.css
@@ -53,6 +53,10 @@
 	}
 }
 
+h1.test-custom-selectors,h2.test-custom-selectors,h3.test-custom-selectors,h4.test-custom-selectors,h5.test-custom-selectors,h6.test-custom-selectors {
+	order: 9;
+}
+
 .test-case-insensitive-attributes[frame=hsides i] {
 	order: 10;
 }
@@ -68,62 +72,57 @@
 	order: 12;
 }
 
-.test-color-mod-function {
-	color: rgba(0, 0, 0, 0.5);
-	order: 13;
-}
-
 .test-color-functional-notation {
 	color: rgba(178, 34, 34, 0.5);
-	order: 14;
+	order: 13;
 }
 
 .test-lab-function {
 	background-color: rgb(178, 34, 34);
 	color: rgba(178, 34, 34, 0.5);
-	order: 15;
+	order: 14;
 }
 
 .test-system-ui-font-family {
-	font-family: system-ui, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Oxygen, Ubuntu, Cantarell, Droid Sans, Helvetica Neue;
-	order: 16;
+	font-family: system-ui, -apple-system, Segoe UI, Roboto, Noto Sans, Ubuntu, Cantarell, Helvetica Neue;
+	order: 15;
 }
 
 .test-font-variant-property {
 	font-variant-caps: small-caps;
-	order: 17;
+	order: 16;
 }
 
 .test-all-property {
 	all: initial;
-	order: 18;
+	order: 17;
 }
 
 .test-matches-pseudo-class:first-child, .test-matches-pseudo-class.special {
-	order: 19;
+	order: 18;
 }
 
 .test-not-pseudo-class:not(:first-child):not(.special) {
-	order: 20;
+	order: 19;
 }
 
 .test-any-link-pseudo-class:-moz-any-link {
-	order: 21;
+	order: 20;
 }
 
 .test-any-link-pseudo-class:any-link {
-	order: 21;
+	order: 20;
 }
 
 .test-dir-pseudo-class:dir(rtl) {
-	order: 22;
+	order: 21;
 }
 
 .test-overflow-wrap-property {
-	order: 23;
+	order: 22;
 	overflow-wrap: break-word;
 }
 
 .test-focus-visible-pseudo-class:focus-visible {
-	order: 24;
+	order: 23;
 }
diff --git a/test/basic.stage0.expect.css b/test/basic.stage0.expect.css
index 6b87f70..d2d8cae 100644
--- a/test/basic.stage0.expect.css
+++ b/test/basic.stage0.expect.css
@@ -63,6 +63,10 @@
 	}
 }
 
+h1.test-custom-selectors,h2.test-custom-selectors,h3.test-custom-selectors,h4.test-custom-selectors,h5.test-custom-selectors,h6.test-custom-selectors {
+	order: 9;
+}
+
 .test-case-insensitive-attributes[frame=hsides],.test-case-insensitive-attributes[frame=Hsides],.test-case-insensitive-attributes[frame=hSides],.test-case-insensitive-attributes[frame=HSides],.test-case-insensitive-attributes[frame=hsIdes],.test-case-insensitive-attributes[frame=HsIdes],.test-case-insensitive-attributes[frame=hSIdes],.test-case-insensitive-attributes[frame=HSIdes],.test-case-insensitive-attributes[frame=hsiDes],.test-case-insensitive-attributes[frame=HsiDes],.test-case-insensitive-attributes[frame=hSiDes],.test-case-insensitive-attributes[frame=HSiDes],.test-case-insensitive-attributes[frame=hsIDes],.test-case-insensitive-attributes[frame=HsIDes],.test-case-insensitive-attributes[frame=hSIDes],.test-case-insensitive-attributes[frame=HSIDes],.test-case-insensitive-attributes[frame=hsidEs],.test-case-insensitive-attributes[frame=HsidEs],.test-case-insensitive-attributes[frame=hSidEs],.test-case-insensitive-attributes[frame=HSidEs],.test-case-insensitive-attributes[frame=hsIdEs],.test-case-insensitive-attributes[frame=HsIdEs],.test-case-insensitive-attributes[frame=hSIdEs],.test-case-insensitive-attributes[frame=HSIdEs],.test-case-insensitive-attributes[frame=hsiDEs],.test-case-insensitive-attributes[frame=HsiDEs],.test-case-insensitive-attributes[frame=hSiDEs],.test-case-insensitive-attributes[frame=HSiDEs],.test-case-insensitive-attributes[frame=hsIDEs],.test-case-insensitive-attributes[frame=HsIDEs],.test-case-insensitive-attributes[frame=hSIDEs],.test-case-insensitive-attributes[frame=HSIDEs],.test-case-insensitive-attributes[frame=hsideS],.test-case-insensitive-attributes[frame=HsideS],.test-case-insensitive-attributes[frame=hSideS],.test-case-insensitive-attributes[frame=HSideS],.test-case-insensitive-attributes[frame=hsIdeS],.test-case-insensitive-attributes[frame=HsIdeS],.test-case-insensitive-attributes[frame=hSIdeS],.test-case-insensitive-attributes[frame=HSIdeS],.test-case-insensitive-attributes[frame=hsiDeS],.test-case-insensitive-attributes[frame=HsiDeS],.test-case-insensitive-attributes[frame=hSiDeS],.test-case-insensitive-attributes[frame=HSiDeS],.test-case-insensitive-attributes[frame=hsIDeS],.test-case-insensitive-attributes[frame=HsIDeS],.test-case-insensitive-attributes[frame=hSIDeS],.test-case-insensitive-attributes[frame=HSIDeS],.test-case-insensitive-attributes[frame=hsidES],.test-case-insensitive-attributes[frame=HsidES],.test-case-insensitive-attributes[frame=hSidES],.test-case-insensitive-attributes[frame=HSidES],.test-case-insensitive-attributes[frame=hsIdES],.test-case-insensitive-attributes[frame=HsIdES],.test-case-insensitive-attributes[frame=hSIdES],.test-case-insensitive-attributes[frame=HSIdES],.test-case-insensitive-attributes[frame=hsiDES],.test-case-insensitive-attributes[frame=HsiDES],.test-case-insensitive-attributes[frame=hSiDES],.test-case-insensitive-attributes[frame=HSiDES],.test-case-insensitive-attributes[frame=hsIDES],.test-case-insensitive-attributes[frame=HsIDES],.test-case-insensitive-attributes[frame=hSIDES],.test-case-insensitive-attributes[frame=HSIDES] {
 	order: 10;
 }
@@ -73,37 +77,32 @@
 }
 
 .test-hexadecimal-alpha-notation {
-	background-color: rgba(243, 243, 243, 0.95294);
-	color: rgba(0, 0, 0, 0.2);
+	background-color: rgba(243,243,243,0.95294);
+	color: rgba(0,0,0,0.2);
 	order: 12;
 }
 
-.test-color-mod-function {
-	color: rgba(0, 0, 0, 0.5);
-	order: 13;
-}
-
 .test-color-functional-notation {
 	color: rgba(178, 34, 34, 0.5);
-	order: 14;
+	order: 13;
 }
 
 .test-lab-function {
 	background-color: rgb(178, 34, 34);
 	color: rgba(178, 34, 34, 0.5);
-	order: 15;
+	order: 14;
 }
 
 .test-system-ui-font-family {
-	font-family: system-ui, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Oxygen, Ubuntu, Cantarell, Droid Sans, Helvetica Neue;
-	order: 16;
+	font-family: system-ui, -apple-system, Segoe UI, Roboto, Noto Sans, Ubuntu, Cantarell, Helvetica Neue;
+	order: 15;
 }
 
 .test-font-variant-property {
 	-webkit-font-feature-settings: "c2sc";
 	        font-feature-settings: "c2sc";
 	font-variant-caps: small-caps;
-	order: 17;
+	order: 16;
 }
 
 .test-all-property {
@@ -210,46 +209,46 @@
 	word-spacing: normal;
 	z-index: auto;
 	all: initial;
-	order: 18;
+	order: 17;
 }
 
 .test-matches-pseudo-class:first-child, .test-matches-pseudo-class.special {
-	order: 19;
+	order: 18;
 }
 
 .test-not-pseudo-class:not(:first-child):not(.special) {
-	order: 20;
+	order: 19;
 }
 
 .test-any-link-pseudo-class:link,.test-any-link-pseudo-class:visited {
-	order: 21;
+	order: 20;
 }
 
 .test-any-link-pseudo-class:-webkit-any-link {
-	order: 21;
+	order: 20;
 }
 
 .test-any-link-pseudo-class:-moz-any-link {
-	order: 21;
+	order: 20;
 }
 
 .test-any-link-pseudo-class:any-link {
-	order: 21;
+	order: 20;
 }
 
 [dir="rtl"] .test-dir-pseudo-class {
-	order: 22;
+	order: 21;
 }
 
 .test-overflow-wrap-property {
-	order: 23;
+	order: 22;
 	word-wrap: break-word;
 }
 
 .test-focus-visible-pseudo-class.focus-visible {
-	order: 24;
+	order: 23;
 }
 
 .test-focus-visible-pseudo-class:focus-visible {
-	order: 24;
+	order: 23;
 }
diff --git a/test/import.css b/test/import.css
new file mode 100644
index 0000000..0289426
--- /dev/null
+++ b/test/import.css
@@ -0,0 +1,16 @@
+.test-custom-properties {
+	order: var(--order);
+}
+
+@media (--narrow-window) {
+	.test-custom-media-queries {
+		order: 7;
+	}
+}
+
+.test-custom-selectors {
+	&:--heading {
+		order: 9;
+	}
+}
+
diff --git a/test/import.expect.css b/test/import.expect.css
new file mode 100644
index 0000000..1567ce9
--- /dev/null
+++ b/test/import.expect.css
@@ -0,0 +1,15 @@
+.test-custom-properties {
+	order: 1;
+	order: var(--order);
+}
+
+@media (max-width: 30em) {
+	.test-custom-media-queries {
+		order: 7;
+	}
+}
+
+h1.test-custom-selectors,h2.test-custom-selectors,h3.test-custom-selectors,h4.test-custom-selectors,h5.test-custom-selectors,h6.test-custom-selectors {
+		order: 9;
+	}
+
-- 
2.33.1

