From eb98c9d837086bf5f0c2b27169f6afaa4be4de58 Mon Sep 17 00:00:00 2001
From: Jonathan Neal <jonathantneal@hotmail.com>
Date: Thu, 2 Nov 2017 23:52:19 -0400
Subject: [PATCH 15/38] Document features

---
 README.md | 188 +++++++++++++++++++++++++++++++++++++++++++++++++++++-
 1 file changed, 185 insertions(+), 3 deletions(-)

diff --git a/README.md b/README.md
index 5eb8fc9..35c664b 100644
--- a/README.md
+++ b/README.md
@@ -9,13 +9,11 @@
 [PostCSS Tape] lets you quickly test [PostCSS] plugins.
 
 1. Install this dependency to your project:
-
    ```sh
    npm install postcss-tape --save-dev
    ```
 
 2. Add the `postcss-tape` task to your `package.json`:
-
    ```json
    {
       "scripts": {
@@ -25,7 +23,6 @@
    ```
 
 3. Add tests to your `.tape.js` file:
-
    ```js
    module.exports = {
      'postcss-my-plugin': {
@@ -62,6 +59,191 @@ Options may be passed through arguments:
 postcss-tape --plugin=path/to/plugin.js --config=path/to/.tape.js
 ```
 
+## Test Options
+
+### message
+
+The message provided to the console to identify the test being run.
+
+```js
+{
+  'some-test': {
+    message: 'supports some test usage'
+  }
+}
+```
+
+### options
+
+The options passed into the PostCSS plugin for the test.
+
+```js
+{
+  'some-test': {
+    options: {
+      someOption: true,
+      anotherOption: 5,
+      etc: 'etc'
+    }
+  }
+}
+```
+
+### processOptions
+
+The process options passed into PostCSS for the test. Read the
+[PostCSS documentation](http://api.postcss.org/global.html#processOptions) for
+more details.
+
+```js
+{
+  'some-test': {
+    processOptions: {
+      map: {
+        inline: true,
+        sourcesContent: true
+      }
+    }
+  }
+}
+```
+
+### warning
+
+The number of warnings expected to be generated by the test.
+
+```js
+{
+  'some-test': {
+    warnings: 3
+  }
+}
+```
+
+### error
+
+An identifying feature of an error expected to be thrown by the test.
+
+```js
+{
+  'some-test': {
+    error: {
+      message: 'You should not have done that'
+    }
+  }
+}
+```
+
+In that example, the error expects a field of `message` to be the string
+`You should not have done that`. In order that errors can be inspecific,
+regular expressions may also be used, so that something like
+`message: /^You should not have done/` would also match
+`You should not have done this`.
+
+### source
+
+The location of the source CSS file, relative to the `fixtures` directory. This
+file is passed through the PostCSS plugin.
+
+```js
+{
+  'some-test': {
+    source: 'alterate-source.css'
+  }
+}
+```
+
+In that example, a `some-test` field would automatically populate the
+`source` as `some-test.css` unless it was overridden. In order that multiple
+tests may use the same source file, a `some-test:modifier` field would still
+populate the `source` as `some-test.css`.
+
+### expect
+
+The location of the expected CSS file, relative to the `fixtures` directory.
+This file is represents the expected CSS result of `source` after being passed
+through the PostCSS plugin.
+
+```js
+{
+  'some-test': {
+    expect: 'alterate-expect.css'
+  }
+}
+```
+
+In that example, a `some-test` field would automatically populate the
+`expect` as `some-test.expect.css` unless it was overridden. In order that
+multiple tests may use the same source file, a `some-test:modifier` field would
+still populate the `source` as `some-test.css`, but alter the `expect` to be
+`some-test.modifier.expect.css`.
+
+### result
+
+The location of the resulting CSS file, relative to the `fixtures` directory.
+This file is the CSS result of `source` after being passed through the PostCSS
+plugin.
+
+```js
+{
+  'some-test': {
+    result: 'alterate-result.css'
+  }
+}
+```
+
+In that example, a `some-test` field would automatically populate the
+`result` as `some-test.result.css` unless it was overridden. In order that
+multiple tests may use the same source file, a `some-test:modifier` field would
+still populate the `source` as `some-test.css`, but alter the `result` to be
+`some-test.modifier.result.css`.
+
+### before
+
+A function to be run before the particular test. This is helpful for generating
+variables, content, or files that will be used by the plugin.
+
+```js
+{
+  'some-test': {
+    before: () => {
+      /* do something before the plugin runs */
+    }
+  }
+}
+```
+
+### after
+
+A function to be run after the particular test. This is helpful for cleaning up
+variables, content, or files that were used by the plugin.
+
+```js
+{
+  'some-test': {
+    after: () => {
+      /* do something after the plugin runs */
+    }
+  }
+}
+```
+
+### plugin
+
+A plugin or array of plugins that will specifying alternative plugin
+
+```js
+{
+  'some-test': {
+    plugin: () => require('postcss')(
+      require('some-plugin-that-runs-before'),
+      require('.'),
+      require('some-plugin-that-runs-after')
+    )
+  }
+}
+```
+
 [npm-url]: https://www.npmjs.com/package/postcss-tape
 [npm-img]: https://img.shields.io/npm/v/postcss-tape.svg
 [cli-url]: https://travis-ci.org/jonathantneal/postcss-tape
-- 
2.33.1

