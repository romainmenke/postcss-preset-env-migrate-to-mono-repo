From f042e7831ca1ab2b9f47392cb97bedd1916b81a7 Mon Sep 17 00:00:00 2001
From: Jonathan Neal <jonathantneal@hotmail.com>
Date: Tue, 16 Mar 2021 08:42:40 -0400
Subject: [PATCH 37/38] Update project conventions

---
 .gitignore                            |  1 +
 README.md                             |  2 +-
 package.json                          |  2 +-
 src/index.js                          | 25 ++++++-----
 src/lib/color.js                      | 10 +++--
 src/lib/exit.js                       |  6 ++-
 src/lib/get-error-message.js          |  7 +--
 src/lib/get-options-from-arguments.js | 47 ++++++++++----------
 src/lib/get-options.js                |  8 ++--
 src/lib/log.js                        | 12 ++---
 src/lib/utils.js                      | 63 ++++++++++++---------------
 11 files changed, 94 insertions(+), 89 deletions(-)

diff --git a/.gitignore b/.gitignore
index 606c1c5..ffc4416 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1,6 +1,7 @@
 dist
 node_modules
 package-lock.json
+yarn.lock
 .*
 !.editorconfig
 !.gitignore
diff --git a/README.md b/README.md
index 6bb14fd..3ade2ed 100644
--- a/README.md
+++ b/README.md
@@ -1,7 +1,7 @@
 # PostCSS Tape [<img src="http://postcss.github.io/postcss/logo.svg" alt="PostCSS" width="90" height="90" align="right">][PostCSS]
 
 [<img alt="NPM Version" src="https://img.shields.io/npm/v/postcss-tape.svg" height="20">][npm-url]
-[<img alt="Build Status" src="https://img.shields.io/travis/csstools/postcss-tape/master.svg" height="20">][cli-url]
+[<img alt="Build Status" src="https://img.shields.io/travis/csstools/postcss-tape/main.svg" height="20">][cli-url]
 [<img alt="Support Chat" src="https://img.shields.io/badge/support-chat-blue.svg" height="20">][git-url]
 
 [PostCSS Tape] lets you quickly test [PostCSS] plugins.
diff --git a/package.json b/package.json
index 3f77ff3..ce274e5 100644
--- a/package.json
+++ b/package.json
@@ -27,7 +27,7 @@
     "test:tape:ci": "npm run test:tape:7 -- --ci true && npm run test:tape:8 -- --ci true"
   },
   "engines": {
-    "node": "^10 || ^12 || ^14"
+    "node": ">=10.0.0"
   },
   "peerDependencies": {
     "postcss": "^7 || ^8"
diff --git a/src/index.js b/src/index.js
index 7a0fdeb..ef868a5 100644
--- a/src/index.js
+++ b/src/index.js
@@ -1,12 +1,13 @@
-import { exitFail, exitPass } from './lib/exit'
-import { readOrWriteFile, safelyReadFile, writeFile } from './lib/utils'
-import * as log from './lib/log'
-import getErrorMessage from './lib/get-error-message'
-import getOptions from './lib/get-options'
+import * as exit from './lib/exit.js'
+import { readOrWriteFile, safelyReadFile, writeFile } from './lib/utils.js'
+import { getErrorMessage } from './lib/get-error-message.js'
+import { getOptions } from './lib/get-options.js'
+import * as log from './lib/log.js'
 import path from 'path'
 
-async function postcss8(plugins) {
+const postcss8 = async (plugins) => {
 	const pkg = await import('postcss/package.json')
+
 	if (pkg.version[0] === '8') {
 		const m = await import('postcss')
 		return m.default(plugins)
@@ -15,9 +16,7 @@ async function postcss8(plugins) {
 	}
 }
 
-function isPostcss8Plugin(plugin) {
-	return typeof plugin === 'function' && Object(plugin).postcss === true
-}
+const isPostcss8Plugin = (plugin) => typeof plugin === 'function' && Object(plugin).postcss === true
 
 getOptions().then(
 	async options => {
@@ -39,9 +38,11 @@ getOptions().then(
 			const pluginOptions = test.options
 
 			let rawPlugin = test.plugin || options.plugin
+
 			if (rawPlugin.default) {
 				rawPlugin = rawPlugin.default
 			}
+
 			const plugin = isPostcss8Plugin(rawPlugin)
 				? rawPlugin(pluginOptions)
 			: typeof Object(rawPlugin).process === 'function'
@@ -63,12 +64,15 @@ getOptions().then(
 				const sourceCSS = await readOrWriteFile(sourcePath, expectCSS)
 
 				let result
+
 				if (isPostcss8Plugin(rawPlugin)) {
 					const postcss = await postcss8([ plugin ])
+
 					result = await postcss.process(sourceCSS, processOptions)
 				} else {
 					result = await plugin.process(sourceCSS, processOptions, pluginOptions)
 				}
+
 				const resultCSS = result.css
 
 				if (options.fix) {
@@ -168,6 +172,5 @@ getOptions().then(
 			throw hadError
 		}
 	}
-).then(exitPass, exitFail)
-
+).then(exit.pass, exit.fail)
 
diff --git a/src/lib/color.js b/src/lib/color.js
index dadf489..17095c9 100644
--- a/src/lib/color.js
+++ b/src/lib/color.js
@@ -1,3 +1,4 @@
+/** Color keys. */
 const colors = {
 	reset: '\x1b[0m',
 	bold: '\x1b[1m',
@@ -24,6 +25,9 @@ const colors = {
 	bgWhite: '\x1b[47m'
 }
 
-export default function color (name, string) {
-	return colors[name] + string.replace(colors.reset, colors.reset + colors[name]) + colors.reset
-}
+/** Return a string wrapped in a CLI color. */
+export const color = (/** @type {keyof colors} */ name, /** @type {string} */ string) => (
+	colors[name] +
+	string.replace(colors.reset, colors.reset + colors[name]) +
+	colors.reset
+)
diff --git a/src/lib/exit.js b/src/lib/exit.js
index 69556f2..57cb124 100644
--- a/src/lib/exit.js
+++ b/src/lib/exit.js
@@ -1,9 +1,11 @@
-export function exitFail (error) {
+/** Exit the process logging an error and with a failing exit code. */
+export const fail = (error) => {
 	console.log(error)
 
 	process.exit(1)
 }
 
-export function exitPass () {
+/** Exit the process with a passing exit code. */
+export const pass = () => {
 	process.exit(0)
 }
diff --git a/src/lib/get-error-message.js b/src/lib/get-error-message.js
index abce20e..f66c8ca 100644
--- a/src/lib/get-error-message.js
+++ b/src/lib/get-error-message.js
@@ -1,3 +1,4 @@
-export default function getErrorMessage (error) {
-	return Object(error).message || error
-}
+/** Return the error message. */
+export const getErrorMessage = (/** @type {Error | string} */ error) => String(
+	Object(error).message || error
+)
diff --git a/src/lib/get-options-from-arguments.js b/src/lib/get-options-from-arguments.js
index 21bbdee..51189cb 100644
--- a/src/lib/get-options-from-arguments.js
+++ b/src/lib/get-options-from-arguments.js
@@ -3,31 +3,30 @@ const primativeRegExp = /^(false|null|true|undefined|(\d+\.)?\d+|\{.*\}|\[.*\])$
 const relaxedJsonPropRegExp = /(['"])?([a-z0-9A-Z_]+)\1:/g
 const relaxedJsonValueRegExp = /("[a-z0-9A-Z_]+":\s*)(?!true|false|null|\d+)'?([A-z0-9]+)'?([,}])/g
 
-export default function getOptionsFromArguments (defaultOptions) {
-	return process.argv.slice(2).reduce(
-		(args, arg, index, argv) => {
-			const nextIndex = index + 1
-			const nextArg = argv[nextIndex]
-			const argMatch = arg.match(argRegExp)
+/** Return an object of options from a CLI array of arguments. */
+export const getOptionsFromArguments = (/** @type {object} */ defaultOptions) => process.argv.slice(2).reduce(
+	(/** @type {object} */ args, /** @type {string} */ arg, /** @type {number} */ index, /** @type {object} */ argv) => {
+		const nextIndex = index + 1
+		const nextArg = argv[nextIndex]
+		const argMatch = arg.match(argRegExp)
 
-			if (argMatch) {
-				const [, name] = argMatch
+		if (argMatch) {
+			const [, name] = argMatch
 
-				if (!nextArg || argRegExp.test(nextArg)) {
-					args[name] = true
-				} else {
-					args[name] = primativeRegExp.test(nextArg)
-						? JSON.parse(
-							nextArg
-							.replace(relaxedJsonPropRegExp, '"$2": ')
-							.replace(relaxedJsonValueRegExp, '$1"$2"$3')
-						)
-					: nextArg
-				}
+			if (!nextArg || argRegExp.test(nextArg)) {
+				args[name] = true
+			} else {
+				args[name] = primativeRegExp.test(nextArg)
+					? JSON.parse(
+						nextArg
+						.replace(relaxedJsonPropRegExp, '"$2": ')
+						.replace(relaxedJsonValueRegExp, '$1"$2"$3')
+					)
+				: nextArg
 			}
+		}
 
-			return args
-		},
-		Object.assign({}, defaultOptions)
-	)
-}
+		return args
+	},
+	Object.assign({}, defaultOptions)
+)
diff --git a/src/lib/get-options.js b/src/lib/get-options.js
index 39faed0..2c5c8da 100644
--- a/src/lib/get-options.js
+++ b/src/lib/get-options.js
@@ -1,8 +1,9 @@
-import getOptionsFromArguments from './get-options-from-arguments'
-import { readJSON } from './utils'
+import { getOptionsFromArguments } from './get-options-from-arguments.js'
+import { readJSON } from './utils.js'
 import path from 'path'
 
-export default async function getOptions() {
+/** Asynchronously return the options from the project. */
+export const getOptions = async () => {
 	const cwd = process.cwd()
 
 	// default options
@@ -34,6 +35,7 @@ export default async function getOptions() {
 			'.tape.mjs',
 			'.tape.cjs'
 		]
+
 		let returnError
 
 		while (postcssTapeConfigFiles.length) {
diff --git a/src/lib/log.js b/src/lib/log.js
index d8cc637..8a11098 100644
--- a/src/lib/log.js
+++ b/src/lib/log.js
@@ -1,4 +1,4 @@
-import color from './color'
+import { color } from './color.js'
 import readline from 'readline'
 
 // symbols
@@ -9,7 +9,8 @@ const stdout  = process.stdout
 
 let interval
 
-export function pass (name, message, ci) {
+/** Log as a passing state. */
+export const pass = (/** @type {string} */ name, /** @type {string} */ message, /** @type {boolean} */ ci) => {
 	clearInterval(interval)
 
 	if (ci) {
@@ -23,7 +24,8 @@ export function pass (name, message, ci) {
 	}
 }
 
-export function fail (name, message, details, ci) {
+/** Log as a failing state. */
+export const fail = (/** @type {string} */ name, /** @type {string} */ message, /** @type {string} */ details, /** @type {boolean} */ ci) => {
 	clearInterval(interval)
 
 	if (ci) {
@@ -37,8 +39,8 @@ export function fail (name, message, details, ci) {
 	}
 }
 
-// log with a waiting appearance
-export function wait (name, message, ci) {
+/** Log as a waiting state. */
+export const wait = (/** @type {string} */ name, /** @type {string} */ message, /** @type {boolean} */ ci) => {
 	if (ci) {
 		stdout.write(`${name} ${color('dim', message)}`)
 	} else {
diff --git a/src/lib/utils.js b/src/lib/utils.js
index b0bfffe..9f6c7b4 100644
--- a/src/lib/utils.js
+++ b/src/lib/utils.js
@@ -1,7 +1,8 @@
 import fs from 'fs'
 
-export function readFile (pathname) {
-	return new Promise((resolve, reject) => {
+/** Reads a file and returns its string content */
+export const readFile = (/** @type {string} */ pathname) => /** @type {Promise<string>} */ (
+	new Promise((resolve, reject) => {
 		fs.readFile(pathname, 'utf8', (error, data) => {
 			if (error) {
 				reject(error)
@@ -10,44 +11,34 @@ export function readFile (pathname) {
 			}
 		})
 	})
-}
+)
 
-export function readJSON (pathname, ...keys) {
-	return readFile(pathname).then(
-		data => JSON.parse(data)
-	).then(
-		options => keys.length ?
-			options[
-				Object.keys(options).find(key => keys.includes(key))
+/** Returns a value from a JSON file. */
+export const readJSON = (/** @type {string} */ pathname, /** @type {string[]} */ ...keys) => readFile(pathname).then(JSON.parse).then(
+	opts => (
+		keys.length
+			? opts[
+				Object.keys(opts).find(key => keys.includes(key))
 			]
-		: options
-	).catch(
-		() => ({})
+		: opts
 	)
-}
+)
 
-export function readOrWriteFile (pathname, data) {
-	return readFile(pathname).catch(
-		() => writeFile(pathname, data || '').then(
-			() => ''
-		)
-	)
-}
+/** Returns the string content of a file if it exists, and otherwise creates the file and returns an empty string. */
+export const readOrWriteFile = (/** @type {string} */ pathname, /** @type {string} */ data) => readFile(pathname).catch(
+	() => writeFile(pathname, data || '').then(() => '')
+)
 
-export function safelyReadFile (pathname) {
-	return readFile(pathname).catch(
-		() => ''
-	)
-}
+/** Reads a file without throwing for any reason. */
+export const safelyReadFile = (/** @type {string} */ pathname) => readFile(pathname).catch(() => '')
 
-export function writeFile (pathname, data) {
-	return new Promise((resolve, reject) => {
-		fs.writeFile(pathname, data, (error) => {
-			if (error) {
-				reject(error)
-			} else {
-				resolve()
-			}
-		})
+/** Writes a file. */
+export const writeFile = (/** @type {string} */ pathname, /** @type {string} */ data) => new Promise((resolve, reject) => {
+	fs.writeFile(pathname, data, (error) => {
+		if (error) {
+			reject(error)
+		} else {
+			resolve()
+		}
 	})
-}
+})
-- 
2.33.1

