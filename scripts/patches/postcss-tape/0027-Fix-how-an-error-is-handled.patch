From 9708d7f39d0ce47d0d87326b249dd3117b086706 Mon Sep 17 00:00:00 2001
From: Jonathan Neal <jonathantneal@hotmail.com>
Date: Mon, 29 Jul 2019 07:06:43 -0400
Subject: [PATCH 27/38] Fix how an error is handled

---
 README.md                                     |  8 +--
 src/index.js                                  | 72 +++++++++++++------
 src/lib/exit.js                               |  9 +++
 src/lib/get-error-message.js                  |  3 +
 src/lib/log.js                                |  6 +-
 ...rors.expect.css => basic.error.expect.css} |  0
 test/postcss-tape.config.js                   |  4 +-
 7 files changed, 70 insertions(+), 32 deletions(-)
 create mode 100644 src/lib/exit.js
 create mode 100644 src/lib/get-error-message.js
 rename test/{basic.errors.expect.css => basic.error.expect.css} (100%)

diff --git a/README.md b/README.md
index f07679c..c36627d 100644
--- a/README.md
+++ b/README.md
@@ -129,12 +129,12 @@ object used to match warnings given by the test.
 
 ### error
 
-An object used to match errors thrown by the test.
+An object used to match an error thrown by the test.
 
 ```js
 {
   'some-test': {
-    errors: {
+    error: {
       message: 'You should not have done that'
     }
   }
@@ -142,8 +142,8 @@ An object used to match errors thrown by the test.
 ```
 
 In that example, the error expects a field of `message` to be the string
-`You should not have done that`. In order that errors can be inspecific,
-regular expressions may also be used, so that something like
+`You should not have done that`. So that an error can be inspecific, regular
+expressions may also be used, so that something like
 `message: /^You should not have done/` would also match
 `You should not have done this`.
 
diff --git a/src/index.js b/src/index.js
index 30dc1be..88bc0f6 100644
--- a/src/index.js
+++ b/src/index.js
@@ -1,11 +1,13 @@
-import getOptions from './lib/get-options';
-import path from 'path';
+import { exitFail, exitPass } from './lib/exit';
 import { readOrWriteFile, safelyReadFile, writeFile } from './lib/utils';
 import * as log from './lib/log';
+import getErrorMessage from './lib/get-error-message';
+import getOptions from './lib/get-options';
+import path from 'path';
 
 getOptions().then(
 	async options => {
-		let hadErrors = false;
+		let hadError = false;
 
 		// runner
 		for (const name in options.config) {
@@ -87,31 +89,55 @@ getOptions().then(
 
 				log.pass(pluginName, test.message, options.ci);
 			} catch (error) {
-				const areExpectedErrors = test.errors === Object(test.errors) && Object.keys(test.errors).every(
-					key => test.errors[key] instanceof RegExp
-						? test.errors[key].test(error[key])
-					: test.errors[key] === error[key]
-				);
-
-				if (!areExpectedErrors) {
-					log.fail(pluginName, test.message, error, options.ci);
-
-					hadErrors = true;
-
-					if (options.ci) {
-						break;
+				if ('error' in test) {
+					const isObjectError = test.error === Object(test.error);
+
+					if (isObjectError) {
+						const isExpectedError = Object.keys(test.error).every(
+							key => test.error[key] instanceof RegExp
+								? test.error[key].test(Object(error)[key])
+							: test.error[key] === Object(error)[key]
+						);
+
+						if (isExpectedError) {
+							log.pass(pluginName, test.message, options.ci);
+						} else {
+							const reportedError = Object.keys(test.error).reduce(
+								(reportedError, key) => Object.assign(reportedError, { [key]: Object(error)[key] }),
+								{}
+							);
+
+							hadError = error;
+
+							log.fail(pluginName, test.message, `  Expected Error: ${JSON.stringify(test.error)}\n  Received Error: ${JSON.stringify(reportedError)}`, options.ci);
+						}
+					} else {
+						const isExpectedError = typeof test.error === 'boolean' && test.error;
+
+						if (isExpectedError) {
+							log.pass(pluginName, test.message, options.ci);
+						} else {
+							hadError = error;
+
+							log.fail(pluginName, test.message, `  Expected Error`, options.ci);
+						}
+
+						if (options.ci) {
+							break;
+						}
 					}
 				} else {
-					log.pass(pluginName, test.message, options.ci);
+					hadError = error;
+
+					log.fail(pluginName, test.message, getErrorMessage(error), options.ci);
 				}
 			}
 		}
 
-		if (hadErrors) {
-			throw new Error();
+		if (hadError) {
+			throw hadError;
 		}
 	}
-).then(
-	process.exit.bind(process, 0),
-	process.exit.bind(process, 1)
-)
+).then(exitPass, exitFail);
+
+
diff --git a/src/lib/exit.js b/src/lib/exit.js
new file mode 100644
index 0000000..d801abc
--- /dev/null
+++ b/src/lib/exit.js
@@ -0,0 +1,9 @@
+export function exitFail (error) {
+	console.log(error);
+
+	process.exit(1);
+}
+
+export function exitPass () {
+	process.exit(0);
+}
diff --git a/src/lib/get-error-message.js b/src/lib/get-error-message.js
new file mode 100644
index 0000000..b2bbf6d
--- /dev/null
+++ b/src/lib/get-error-message.js
@@ -0,0 +1,3 @@
+export default function getErrorMessage (error) {
+	return Object(error).message || error;
+}
diff --git a/src/lib/log.js b/src/lib/log.js
index 9169190..bce7867 100644
--- a/src/lib/log.js
+++ b/src/lib/log.js
@@ -23,17 +23,17 @@ export function pass (name, message, ci) {
 	}
 }
 
-export function fail (name, message, error, ci) {
+export function fail (name, message, details, ci) {
 	clearInterval(interval);
 
 	if (ci) {
-		stdout.write(` ${color('red', cross)}\n${error}\n`);
+		stdout.write(` ${color('red', cross)}\n${details}\n`);
 	} else {
 		// reset current stream line
 		readline.clearLine(stdout, 0);
 		readline.cursorTo(stdout, 0);
 
-		stdout.write(`${color('red', cross)} ${name} ${color('dim', message)}\n${error}\n`);
+		stdout.write(`${color('red', cross)} ${name} ${color('dim', message)}\n${details}\n`);
 	}
 }
 
diff --git a/test/basic.errors.expect.css b/test/basic.error.expect.css
similarity index 100%
rename from test/basic.errors.expect.css
rename to test/basic.error.expect.css
diff --git a/test/postcss-tape.config.js b/test/postcss-tape.config.js
index e5de5de..9c03071 100644
--- a/test/postcss-tape.config.js
+++ b/test/postcss-tape.config.js
@@ -17,12 +17,12 @@ module.exports = {
 			require('fs').unlinkSync('test/basic.custom-result.css');
 		}
 	},
-	'basic:errors': {
+	'basic:error': {
 		message: 'supports failing',
 		options: {
 			shouldFail: true
 		},
-		errors: {
+		error: {
 			message: /should fail/
 		}
 	},
-- 
2.33.1

