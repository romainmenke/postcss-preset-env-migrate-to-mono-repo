From 76a261322f7667681a3d32591f48524d98f9c18c Mon Sep 17 00:00:00 2001
From: Jonathan Neal <jonathantneal@hotmail.com>
Date: Thu, 25 Jan 2018 20:39:58 -0500
Subject: [PATCH 07/11] 1.3.0

---
 .tape.js       |  42 +++-
 CHANGELOG.md   |   6 +
 index.js       | 584 +++++++++++--------------------------------------
 lib/hsl-hsv.js |  23 ++
 lib/hwb-hsv.js |  24 ++
 lib/lab-xyz.js |  61 ++++++
 lib/rgb-hsl.js |  43 ++++
 lib/rgb-hsv.js |  36 +++
 lib/rgb-hwb.js |  25 +++
 lib/rgb-xyz.js |  32 +++
 lib/util.js    |  85 +++++++
 package.json   |   5 +-
 12 files changed, 501 insertions(+), 465 deletions(-)
 create mode 100644 lib/hsl-hsv.js
 create mode 100644 lib/hwb-hsv.js
 create mode 100644 lib/lab-xyz.js
 create mode 100644 lib/rgb-hsl.js
 create mode 100644 lib/rgb-hsv.js
 create mode 100644 lib/rgb-hwb.js
 create mode 100644 lib/rgb-xyz.js
 create mode 100644 lib/util.js

diff --git a/.tape.js b/.tape.js
index 99f12fe..7f88031 100644
--- a/.tape.js
+++ b/.tape.js
@@ -33,7 +33,7 @@ function test(opts) {
 					source2.map(Math.round).join(',') !== result2.map(Math.round).join(',')
 				) {
 					// log the faulty color conversion
-					console.log({ [from]: source1, 'became': result1 });
+					console.log({ [from]: source1, [to]: source2, 'became': result1 });
 
 					// exit with failure
 					process.exit(1);
@@ -91,5 +91,45 @@ test({
 	channel3: { start: 0, stop: 100, increment: 4 }
 }, 10);
 
+// test RGB to XYZ conversion
+test({
+	from: 'rgb', to: 'xyz',
+	channel1: { start: 0, stop: 100, increment: 4 },
+	channel2: { start: 0, stop: 100, increment: 4 },
+	channel3: { start: 0, stop: 100, increment: 4 }
+});
+
+// test RGB to LAB conversion
+test({
+	from: 'rgb', to: 'lab',
+	channel1: { start: 0, stop: 100, increment: 4 },
+	channel2: { start: 0, stop: 100, increment: 4 },
+	channel3: { start: 0, stop: 100, increment: 4 }
+});
+
+// test HSL to XYZ conversion
+test({
+	from: 'hsl', to: 'xyz',
+	channel1: { start: 0, stop: 359, increment: 1 },
+	channel2: { start: 0, stop: 100, increment: 4 },
+	channel3: { start: 0, stop: 100, increment: 4 }
+});
+
+// test HSL to LAB conversion
+test({
+	from: 'hsl', to: 'lab',
+	channel1: { start: 0, stop: 359, increment: 1 },
+	channel2: { start: 0, stop: 100, increment: 4 },
+	channel3: { start: 0, stop: 100, increment: 4 }
+});
+
+// test HWB to XYZ conversion
+test({
+	from: 'hwb', to: 'xyz',
+	channel1: { start: 0, stop: 359, increment: 1 },
+	channel2: { start: 0, stop: 100, increment: 4 },
+	channel3: { start: 0, stop: 100, increment: 4 }
+});
+
 // exit with success
 process.exit(0);
diff --git a/CHANGELOG.md b/CHANGELOG.md
index 5763b89..23ba347 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,5 +1,11 @@
 # Changes to Convert Colors
 
+### 1.3.0 (January 25, 2018)
+
+- Export all converter combinations of `rgb`, `hsl`, `hwb`, `lab`, `hsv`,
+  `xyz`, and also the `rgb2hue` converter
+- Organize library into files
+
 ### 1.2.0 (January 24, 2018)
 
 - Export `rgb2lab`, `lab2rgb`, `hsl2lab`, etc. converters
diff --git a/index.js b/index.js
index 550b6f3..de9bcfd 100644
--- a/index.js
+++ b/index.js
@@ -1,533 +1,193 @@
-/* Colorspace Conversions
-/* ========================================================================== */
-
-/* Convert Red/Green/Blue to Hue/Saturation/Lightness
-/* ========================================================================== */
-
-function convertRGBtoHSL(red, green, blue, fallbackhue = 0) {
-	const hue        = convertRGBtoH(red, green, blue, fallbackhue);
-	const whiteness  = convertRGBtoW(red, green, blue);
-	const value      = convertRGBtoV(red, green, blue);
-	const lightness  = convertWVtoL(whiteness, value);
-	const saturation = convertLVWtoS(lightness, value, whiteness);
-
-	return [ hue, saturation, lightness ];
-}
-
-/* Convert Red/Green/Blue to Hue/Whiteness/Blackness
-/* ========================================================================== */
-
-function convertRGBtoHWB(red, green, blue, fallbackhue = 0) {
-	const hue       = convertRGBtoH(red, green, blue, fallbackhue);
-	const whiteness = convertRGBtoW(red, green, blue);
-	const value     = convertRGBtoV(red, green, blue);
-	const blackness = invert(value);
-
-	return [ hue, whiteness, blackness ];
-}
-
-/* Convert Red/Green/Blue to Hue/Saturation/Value
-/* ========================================================================== */
-
-function convertRGBtoHSV(red, green, blue, fallbackhue = 0) {
-	const hue        = convertRGBtoH(red, green, blue, fallbackhue);
-	const whiteness  = convertRGBtoW(red, green, blue);
-	const value      = convertRGBtoV(red, green, blue);
-	const lightness  = convertWVtoL(whiteness, value);
-	const saturation = convertLVWtoS(lightness, value, whiteness);
-
-	return [ hue, saturation, value ];
-}
-
-/* Convert Hue/Saturation/Lightness to Red/Green/Blue
-/* ========================================================================== */
-
-function convertHSLtoRGB(hue, saturation, lightness) {
-	const hexagon = hue / 60;
-
-	const t2 = lightness <= 50
-		? lightness * (saturation + 100) / 10000
-	: (lightness + saturation) / 100 - lightness * saturation / 10000;
-
-	const t1 = lightness * 0.02 - t2;
-
-	const red   = convertTTHtoChannel(t1, t2, hexagon + 2) * 100;
-	const green = convertTTHtoChannel(t1, t2, hexagon) * 100;
-	const blue  = convertTTHtoChannel(t1, t2, hexagon - 2) * 100;
-
-	return [red, green, blue];
-}
-
-/* Convert Hue/Saturation/Lightness to Hue/Whiteness/Blackness
-/* ========================================================================== */
-
-function convertHSLtoHWB(hue, saturationHSL, lightnessHSL) {
-	const t          = convertSLtoT(saturationHSL, lightnessHSL);
-	const value      = convertLTtoV(lightnessHSL, t);
-	const saturation = convertLTVtoS(lightnessHSL, t, value);
-	const whiteness  = convertSVtoW(saturation, value);
-	const blackness  = invert(value);
-
-	return [hue, whiteness, blackness];
-}
-
-/* Convert Hue/Whiteness/Blackness to Red/Green/Blue
-/* ========================================================================== */
-
-function convertHWBtoRGB(hue, whiteness, blackness) {
-	const [ , saturationHSV, value ] = convertHWBtoHSV(hue, whiteness, blackness);
-	const lightness = convertSVtoL(saturationHSV, value);
-	const saturation = convertSVLtoS(saturationHSV, value, lightness);
-	const hexagon = hue / 60;
-
-	const t2 = lightness <= 50
-		? lightness * (saturation + 100) / 10000
-	: (lightness + saturation) / 100 - lightness * saturation / 10000;
-
-	const t1 = lightness * 0.02 - t2;
-
-	const red   = convertTTHtoChannel(t1, t2, hexagon + 2) * 100;
-	const green = convertTTHtoChannel(t1, t2, hexagon) * 100;
-	const blue  = convertTTHtoChannel(t1, t2, hexagon - 2) * 100;
-
-	return [red, green, blue];
-}
-
-/* Convert Hue/Whiteness/Blackness to Hue/Saturation/Lightness
-/* ========================================================================== */
+import { rgb2hsl, hsl2rgb } from './lib/rgb-hsl';
+import { rgb2hwb, hwb2rgb } from './lib/rgb-hwb';
+import { rgb2hsv, hsv2rgb } from './lib/rgb-hsv';
+import { rgb2xyz, xyz2rgb } from './lib/rgb-xyz';
+import { hsl2hsv, hsv2hsl } from './lib/hsl-hsv';
+import { hwb2hsv, hsv2hwb } from './lib/hwb-hsv';
+import { lab2xyz, xyz2lab } from './lib/lab-xyz';
+import { rgb2hue } from './lib/util';
 
-function convertHWBtoHSL(hue, whiteness, blackness) {
-	const saturationHSV = convertWBtoS(whiteness, blackness);
-	const value = invert(blackness);
-	const lightness = convertSVtoL(saturationHSV, value);
-	const saturation = convertSVLtoS(saturationHSV, value, lightness);
-
-	return [hue, saturation, lightness];
-}
-
-/* Convert between Red/Green/Blue and Linear-Light RGB
-/* ========================================================================== */
-
-function convertRGBtoLRGB(sr, sg, sb) {
-	const [ lr, lg, lb ] = [ sr, sg, sb ].map(convertRGBVtoLRGBV);
-
-	return [ lr, lg, lb ];
-}
-
-function convertLRGBtoRGB(lr, lg, lb) {
-	const [ sr, sg, sb ] = [ lr, lg, lb ].map(convertLRGBVtoRGBV);
-
-	return [ sr, sg, sb ];
-}
-
-function convertRGBVtoLRGBV(v) {
-	return v <= 4.045
-		? v / 12.92
-	: Math.pow((v + 5.5) / 105.5, 2.4) * 100;
-}
-
-function convertLRGBVtoRGBV(v) {
-	return v > 0.31308
-		? 1.055 * Math.pow(v / 100, 1 / 2.4) * 100 - 5.5
-	: 12.92 * v;
-}
-
-/* Convert between Linear-Light Red/Green/Blue and CIE XYZ
+/* Convert between RGB and LAB
 /* ========================================================================== */
 
-function convertLRGBtoXYZ(lr, lg, lb) {
-	const [ x, y, z ] = matrix([ lr, lg, lb ], [
-		[0.4124564, 0.3575761, 0.1804375],
-		[0.2126729, 0.7151522, 0.0721750],
-		[0.0193339, 0.1191920, 0.9503041]
-	]);
-
-	return [ x, y, z ];
-}
-
-function convertXYZtoLRGB(x, y, z) {
-	const [ lr, lg, lb ] = matrix([ x, y, z ], [
-		[ 3.2404542, -1.5371385, -0.4985314],
-		[-0.9692660,  1.8760108,  0.0415560],
-		[ 0.0556434, -0.2040259,  1.0572252]
-	]);
-
-	return [ lr, lg, lb ];
-}
-
-/* Convert between CIE XYZ and D50 XYZ
-/* ========================================================================== */
-
-function convertXYZtoD50XYZ(x, y, z) {
-	const [ d50x, d50y, d50z ] = matrix([ x, y, z ], [
-		[ 1.0478112, 0.0228866, -0.0501270],
-		[ 0.0295424, 0.9904844, -0.0170491],
-		[-0.0092345, 0.0150436,  0.7521316]
-	]);
-
-	return [ d50x, d50y, d50z ];
-}
-
-function convertD50XYZtoXYZ(d50x, d50y, d50z) {
-	const [ x, y, z ] = [
-		d50x *  0.9555766 + d50y * -0.0230393 + d50z *  0.0631636,
-		d50x * -0.0282895 + d50y *  1.0099416 + d50z *  0.0210077,
-		d50z *  0.0122982 + d50y * -0.0204830 + d50z *  1.3299098
-	];
-
-	return [ x, y, z ];
-}
-
-/* Convert between D50 XYZ and LAB
-/* ========================================================================== */
-
-function convertD50XYZtoLAB(d50x, d50y, d50z) {
-	const [ f1, f2, f3 ] = [
-		d50x / wX,
-		d50y / wY,
-		d50z / wZ
-	].map(
-		value => value > epsilon
-			? Math.cbrt(value)
-		: (kappa * value + 16) / 116
-	);
-
-	const [ l, a, b ] = [
-		116 * f2 - 16,
-		500 * (f1 - f2),
-		200 * (f2 - f3)
-	];
-
-	return [ l, a, b ];
-}
-
-function convertLABtoD50XYZ(l, a, b) {
-	const f2 = (l + 16) / 116;
-	const f1 = a / 500 + f2;
-	const f3 = f2 - b / 200;
-
-	const [ wx, wy, wz ] = [
-		Math.pow(f1, 3) > epsilon ? Math.pow(f1, 3)             : (116 * f1 - 16) / kappa,
-		l > kappa * epsilon       ? Math.pow((l + 16) / 116, 3) : l / kappa,
-		Math.pow(f3, 3) > epsilon ? Math.pow(f3, 3)            : (116 * f3 - 16) / kappa
-	];
-
-	const [ d50x, d50y, d50z ] = [
-		wx * wX,
-		wy * wY,
-		wz * wZ
-	];
-
-	return [ d50x, d50y, d50z ];
-}
-
-/* Combination Conversions
-/* ========================================================================== */
-
-function convertRGBtoXYZ(rgbR, rgbG, rgbB) {
-	const [ lrgbR, lrgbG, lrgbB ] = convertRGBtoLRGB(rgbR, rgbG, rgbB);
-	const [ d65x,  d65y,  d65z  ] = convertLRGBtoXYZ(lrgbR, lrgbG, lrgbB);
-
-	return [ d65x, d65y, d65z ];
-}
-
-function convertXYZtoRGB(xyzX, xyzY, xyzZ) {
-	const [ lrgbR, lrgbG, lrgbB ] = convertXYZtoLRGB(xyzX, xyzY, xyzZ);
-	const [ rgbR,  rgbG,  rgbB  ] = convertLRGBtoRGB(lrgbR, lrgbG, lrgbB);
-
-	return [ rgbR, rgbG, rgbB ];
-}
-
-function convertRGBtoLAB(rgbR, rgbG, rgbB) {
-	const [ lrgbR, lrgbG, lrgbB ] = convertRGBtoLRGB(rgbR, rgbG, rgbB);
-	const [ xyzX,  xyzY,  xyzZ  ] = convertLRGBtoXYZ(lrgbR, lrgbG, lrgbB);
-	const [ d50x,  d50y,  d50z  ] = convertXYZtoD50XYZ(xyzX, xyzY, xyzZ);
-	const [ labL,  labA,  labB  ] = convertD50XYZtoLAB(d50x, d50y, d50z);
+function rgb2lab(rgbR, rgbG, rgbB) {
+	const [ xyzX, xyzY, xyzZ ] = rgb2xyz(rgbR, rgbG, rgbB);
+	const [ labL, labA, labB ] = xyz2lab(xyzX, xyzY, xyzZ);
 
 	return [ labL, labA, labB ];
 }
 
-function convertLABtoRGB(labL, labA, labB) {
-	const [ d50x,  d50y,  d50z  ] = convertLABtoD50XYZ(labL, labA, labB);
-	const [ xyzX,  xyzY,  xyzZ  ] = convertD50XYZtoXYZ(d50x, d50y, d50z);
-	const [ lrgbR, lrgbG, lrgbB ] = convertXYZtoLRGB(xyzX, xyzY, xyzZ);
-	const [ rgbR,  rgbG,  rgbB  ] = convertLRGBtoRGB(lrgbR, lrgbG, lrgbB);
+function lab2rgb(labL, labA, labB) {
+	const [ xyzX, xyzY, xyzZ ] = lab2xyz(labL, labA, labB);
+	const [ rgbR, rgbG, rgbB ] = xyz2rgb(xyzX, xyzY, xyzZ);
 
 	return [ rgbR, rgbG, rgbB ];
 }
 
-function convertHSLtoLAB(hslH, hslS, hslL) {
-	const [ rgbR, rgbG, rgbB ] = convertHSLtoRGB(hslH, hslS, hslL);
-	const [ labL, labA, labB ] = convertRGBtoLAB(rgbR, rgbG, rgbB);
-
-	return [ labL, labA, labB ];
-}
-
-function convertLABtoHSL(labL, labA, labB) {
-	const [ rgbR, rgbG, rgbB ] = convertLABtoRGB(labL, labA, labB);
-	const [ hslH, hslS, hslL ] = convertRGBtoLAB(rgbR, rgbG, rgbB);
-
-	return [ hslH, hslS, hslL ];
-}
-
-function convertHWBtoLAB(hwbH, hwbW, hwbB) {
-	const [ rgbR, rgbG, rgbB ] = convertHWBtoRGB(hwbH, hwbW, hwbB);
-	const [ labL, labA, labB ] = convertRGBtoLAB(rgbR, rgbG, rgbB);
-
-	return [ labL, labA, labB ];
-}
-
-function convertLABtoHWB(labL, labA, labB) {
-	const [ rgbR, rgbG, rgbB ] = convertLABtoRGB(labL, labA, labB);
-	const [ hslH, hslS, hslL ] = convertRGBtoHSL(rgbR, rgbG, rgbB);
-
-	return [ hslH, hslS, hslL ];
-}
-
-function convertLABtoHSV(labL, labA, labB) {
-	const [ hwbH, hwbW, hwbB ] = convertLABtoHWB(labL, labA, labB);
-	const [ hsvH, hsvS, hsvV ] = convertHWBtoHSV(hwbH, hwbW, hwbB);
-
-	return [ hsvH, hsvS, hsvV ];
-}
-
-/* Conversion Tooling
+/* Convert between HWB and HSL
 /* ========================================================================== */
 
-/* Convert Red/Green/Blue to Hue
-/* ========================================================================== */
+function hwb2hsl(hwbH, hwbW, hwbB) {
+	const [ hsvH, hsvS, hsvV ] = hwb2hsv(hwbH, hwbW, hwbB);
+	const [ hslH, hslS, hslL ] = hsv2hsl(hsvH, hsvS, hsvV);
 
-function convertRGBtoH(red, green, blue, fallbackhue = 0) {
-	const whiteness = convertRGBtoW(red, green, blue);
-	const value     = convertRGBtoV(red, green, blue);
-	const chroma    = convertVWtoC(value, whiteness);
-
-	if (chroma === 0) {
-		return fallbackhue;
-	} else {
-		const segment = value === red
-			? (green - blue) / chroma
-		: value === green
-			? (blue - red) / chroma
-		: (red - green) / chroma;
-
-		const shift = value === red
-			? segment < 0
-				? 360 / 60
-				: 0 / 60
-		: value === green
-			? 120 / 60
-		: 240 / 60;
-
-		const hue = (segment + shift) * 60;
-
-		return hue;
-	}
-}
-
-/* Convert Red/Green/Blue to Whiteness
-/* ========================================================================== */
-
-function convertRGBtoW(red, green, blue) {
-	return Math.min(red, green, blue);
+	return [ hslH, hslS, hslL ];
 }
 
-/* Convert Red/Green/Blue to Value
-/* ========================================================================== */
+function hsl2hwb(hslH, hslS, hslL) {
+	const [ , hsvS, hsvV ] = hsl2hsv(hslH, hslS, hslL);
+	const [ , hwbW, hwbB ] = hsv2hwb(hslH, hsvS, hsvV);
 
-function convertRGBtoV(red, green, blue) {
-	return Math.max(red, green, blue);
+	return [ hslH, hwbW, hwbB ];
 }
 
-/* Convert Value/Whiteness to Chroma
+/* Convert between HSL and LAB
 /* ========================================================================== */
 
-function convertVWtoC(value, whiteness) {
-	return value - whiteness;
-}
-
-/* Convert Whiteness/Value to Lightness
-/* ========================================================================== */
+function hsl2lab(hslH, hslS, hslL) {
+	const [ rgbR, rgbG, rgbB ] = hsl2rgb(hslH, hslS, hslL);
+	const [ xyzX, xyzY, xyzZ ] = rgb2xyz(rgbR, rgbG, rgbB);
+	const [ labL, labA, labB ] = xyz2lab(xyzX, xyzY, xyzZ);
 
-function convertWVtoL(whiteness, value) {
-	return (whiteness + value) / 2;
-}
-
-/* Convert Lightness/Value/Whiteness to Saturation
-/* ========================================================================== */
-
-function convertLVWtoS(lightness, value, whiteness) {
-	return whiteness === value
-		? 0
-	: lightness < 50
-		? (value - whiteness) / (value + whiteness) * 100
-	: (value - whiteness) / (200 - value - whiteness) * 100;
+	return [ labL, labA, labB ];
 }
 
-/* Convert T1/T2/Hexagon to Channel
-/* ========================================================================== */
+function lab2hsl(labL, labA, labB) {
+	const [ xyzX, xyzY, xyzZ ] = lab2xyz(labL, labA, labB);
+	const [ rgbR, rgbG, rgbB ] = xyz2rgb(xyzX, xyzY, xyzZ);
+	const [ hslH, hslS, hslL ] = rgb2hsl(rgbR, rgbG, rgbB);
 
-function convertTTHtoChannel(t1, t2, hexagon) {
-	const althexagon = hexagon < 0
-		? hexagon + 6
-	: hexagon >= 6
-		? hexagon - 6
-	: hexagon;
-
-	return althexagon < 1
-		? (t2 - t1) * althexagon + t1
-	: althexagon < 3
-		? t2
-	: althexagon < 4
-		? (t2 - t1) * (4 - althexagon) + t1
-	: t1;
+	return [ hslH, hslS, hslL ];
 }
 
-/* Convert Hue/Whiteness/Blackness to Hue/Saturation/Value
+/* Convert between HSL and XYZ
 /* ========================================================================== */
 
-function convertHWBtoHSV(hue, whiteness, blackness) {
-	const saturation = convertWBtoS(whiteness, blackness);
-	const value = invert(blackness);
+function hsl2xyz(hslH, hslS, hslL) {
+	const [ rgbR, rgbG, rgbB ] = hsl2rgb(hslH, hslS, hslL);
+	const [ xyzX, xyzY, xyzZ ] = rgb2xyz(rgbR, rgbG, rgbB);
 
-	return [ hue, saturation, value ];
+	return [ xyzX, xyzY, xyzZ ];
 }
 
-/* Convert Hue/Saturation/Lightness to Hue/Saturation/Value
-/* ========================================================================== */
-
-function convertHSLtoHSV(hue, saturationHSL, lightness) {
-	const t          = convertSLtoT(saturationHSL, lightness);
-	const value      = convertLTtoV(lightness, t);
-	const saturation = convertLTVtoS(lightness, t, value);
+function xyz2hsl(xyzX, xyzY, xyzZ) {
+	const [ rgbR, rgbG, rgbB ] = xyz2rgb(xyzX, xyzY, xyzZ);
+	const [ hslH, hslS, hslL ] = rgb2hsl(rgbR, rgbG, rgbB);
 
-	return [hue, saturation, value]
+	return [ hslH, hslS, hslL ];
 }
 
-/* Convert Hue/Saturation/Value to Hue/Saturation/Lightness
+/* Convert between HWB and LAB
 /* ========================================================================== */
 
-function convertHSVtoHSL(hue, saturationHSV, value) {
-	const lightness = convertSVtoL(saturationHSV, value);
-	const saturation = convertSVLtoS(saturationHSV, value, lightness);
+function hwb2lab(hwbH, hwbW, hwbB) {
+	const [ rgbR, rgbG, rgbB ] = hwb2rgb(hwbH, hwbW, hwbB);
+	const [ xyzX, xyzY, xyzZ ] = rgb2xyz(rgbR, rgbG, rgbB);
+	const [ labL, labA, labB ] = xyz2lab(xyzX, xyzY, xyzZ);
 
-	return [hue, saturation, lightness]
+	return [ labL, labA, labB ];
 }
 
-/* Convert Hue/Saturation/Value to Hue/Whiteness/Blackness
-/* ========================================================================== */
-
-function convertHSVtoHWB(hue, saturationHSV, valueHSV) {
-	const whiteness = convertSVtoW(saturationHSV, valueHSV);
-	const blackness = invert(valueHSV);
+function lab2hwb(labL, labA, labB) {
+	const [ xyzX, xyzY, xyzZ ] = lab2xyz(labL, labA, labB);
+	const [ rgbR, rgbG, rgbB ] = xyz2rgb(xyzX, xyzY, xyzZ);
+	const [ hwbH, hwbW, hwbB ] = rgb2hwb(rgbR, rgbG, rgbB);
 
-	return [hue, whiteness, blackness];
+	return [ hwbH, hwbW, hwbB ];
 }
 
-/* Convert Whiteness/Blackness to Saturation
+/* Convert between HWB and XYZ
 /* ========================================================================== */
 
-function convertWBtoS(whiteness, blackness) {
-	return blackness === 100 ? 0 : Math.max(0, invert(whiteness / invert(blackness) * 100) || 0);
-}
-
-/* Convert Saturation/Value to Whiteness
-/* ========================================================================== */
+function hwb2xyz(hwbH, hwbW, hwbB) {
+	const [ rgbR, rgbG, rgbB ] = hwb2rgb(hwbH, hwbW, hwbB);
+	const [ xyzX, xyzY, xyzZ ] = rgb2xyz(rgbR, rgbG, rgbB);
 
-function convertSVtoW(saturationHSV, valueHSV) {
-	return invert(saturationHSV) * valueHSV / 100;
+	return [ xyzX, xyzY, xyzZ ];
 }
 
-/* Convert Saturation/Value to Lightness
-/* ========================================================================== */
+function xyz2hwb(xyzX, xyzY, xyzZ) {
+	const [ rgbR, rgbG, rgbB ] = xyz2rgb(xyzX, xyzY, xyzZ);
+	const [ hwbH, hwbW, hwbB ] = rgb2hwb(rgbR, rgbG, rgbB);
 
-function convertSVtoL(saturation, value) {
-	return (200 - saturation) * value / 200;
+	return [ hwbH, hwbW, hwbB ];
 }
 
-/* Convert Saturation/Value/Lightness to Saturation
+/* Convert between HSV and LAB
 /* ========================================================================== */
 
-function convertSVLtoS(saturation, value, lightness) {
-	return saturation * value / (lightness === 100 || lightness === 0 ? 1 : lightness < 50 ? lightness * 2 : 200 - lightness * 2);
-}
-
-/* Convert Saturation/Lightness to T
-/* ========================================================================== */
+function hsv2lab(hsvH, hsvS, hsvV) {
+	const [ rgbR, rgbG, rgbB ] = hsv2rgb(hsvH, hsvS, hsvV);
+	const [ xyzX, xyzY, xyzZ ] = rgb2xyz(rgbR, rgbG, rgbB);
+	const [ labL, labA, labB ] = xyz2lab(xyzX, xyzY, xyzZ);
 
-function convertSLtoT(saturation, lightness) {
-	return saturation * (lightness < 50 ? lightness : invert(lightness)) / 100;
+	return [ labL, labA, labB ];
 }
 
-/* Convert Lightness/T to Value
-/* ========================================================================== */
+function lab2hsv(labL, labA, labB) {
+	const [ xyzX, xyzY, xyzZ ] = lab2xyz(labL, labA, labB);
+	const [ rgbR, rgbG, rgbB ] = xyz2rgb(xyzX, xyzY, xyzZ);
+	const [ hsvH, hsvS, hsvV ] = rgb2hsv(rgbR, rgbG, rgbB);
 
-function convertLTtoV(lightness, t) {
-	return lightness + t;
+	return [ hsvH, hsvS, hsvV ];
 }
 
-/* Convert Lightness/T/Value to Saturation
+/* Convert between HSV and XYZ
 /* ========================================================================== */
 
-function convertLTVtoS(lightness, t, value) {
-	return lightness > 0 ? 2 * t / value * 100 : 0;
-}
-
-/* Invert a Percentage
-/* ========================================================================== */
+function hsv2xyz(hsvH, hsvS, hsvV) {
+	const [ rgbR, rgbG, rgbB ] = hsv2rgb(hsvH, hsvS, hsvV);
+	const [ xyzX, xyzY, xyzZ ] = rgb2xyz(rgbR, rgbG, rgbB);
 
-function invert(percentage) {
-	return 100 - percentage;
+	return [ xyzX, xyzY, xyzZ ];
 }
 
-/* Calculate a Matrix
-/* ========================================================================== */
+function xyz2hsv(xyzX, xyzY, xyzZ) {
+	const [ rgbR, rgbG, rgbB ] = xyz2rgb(xyzX, xyzY, xyzZ);
+	const [ hsvH, hsvS, hsvV ] = rgb2hsv(rgbR, rgbG, rgbB);
 
-function matrix(params, mats) {
-	return mats.map(mat => mat.reduce((acc, value, index) => acc + params[index] * value, 0));
+	return [ hsvH, hsvS, hsvV ];
 }
 
-/* Variables
-/* ========================================================================== */
-
-// epsilon
-const epsilon = Math.pow(6, 3) / Math.pow(29, 3);
-
-// kappa
-const kappa = Math.pow(29, 3) / Math.pow(3, 3);
-
-// reference white (D50 XYZ)
-const [ wX, wY, wZ ] = [ 96.42, 100, 82.49 ];
-
-/* Export Conversions
+/* All Conversions
 /* ========================================================================== */
 
 export default {
-	rgb2hsl: convertRGBtoHSL,
-	rgb2hwb: convertRGBtoHWB,
-	rgb2lab: convertRGBtoLAB,
-	rgb2hsv: convertRGBtoHSV,
-
-	hsl2rgb: convertHSLtoRGB,
-	hsl2hwb: convertHSLtoHWB,
-	hsl2lab: convertHSLtoLAB,
-	hsl2hsv: convertHSLtoHSV,
-
-	hwb2rgb: convertHWBtoRGB,
-	hwb2hsl: convertHWBtoHSL,
-	hwb2lab: convertHWBtoLAB,
-	hwb2hsv: convertHWBtoHSV,
-
-	lab2rgb: convertLABtoRGB,
-	lab2hsl: convertLABtoHSL,
-	lab2hwb: convertLABtoHWB,
-	lab2hsv: convertLABtoHSV,
-
-	hsv2hsl: convertHSVtoHSL,
-	hsv2hwb: convertHSVtoHWB,
-
-	rgb2xyz: convertRGBtoXYZ,
-	xyz2rgb: convertXYZtoRGB,
-
-	rgb2hue: convertRGBtoH
+	rgb2hsl,
+	rgb2hwb,
+	rgb2lab,
+	rgb2hsv,
+	rgb2xyz,
+
+	hsl2rgb,
+	hsl2hwb,
+	hsl2lab,
+	hsl2hsv,
+	hsl2xyz,
+
+	hwb2rgb,
+	hwb2hsl,
+	hwb2lab,
+	hwb2hsv,
+	hwb2xyz,
+
+	lab2rgb,
+	lab2hsl,
+	lab2hwb,
+	lab2hsv,
+	lab2xyz,
+
+	hsv2rgb,
+	hsv2hsl,
+	hsv2hwb,
+	hsv2lab,
+	hsv2xyz,
+
+	xyz2rgb,
+	xyz2hsl,
+	xyz2hwb,
+	xyz2lab,
+	xyz2hsv,
+
+	rgb2hue
 };
diff --git a/lib/hsl-hsv.js b/lib/hsl-hsv.js
new file mode 100644
index 0000000..ce4708d
--- /dev/null
+++ b/lib/hsl-hsv.js
@@ -0,0 +1,23 @@
+/* Convert between HSL and HSV
+/* ========================================================================== */
+
+// https://gist.github.com/defims/0ca2ef8832833186ed396a2f8a204117
+
+export function hsl2hsv(hslH, hslS, hslL) {
+	const hsv1 = hslS * (hslL < 50 ? hslL : 100 - hslL) / 100;
+	const hsvS = hsv1 === 0 ? 0 : 2 * hsv1 / (hslL + hsv1) * 100;
+	const hsvV = hslL + hsv1;
+
+	return [ hslH, hsvS, hsvV ];
+}
+
+export function hsv2hsl(hsvH, hsvS, hsvV) {
+	const hslL = (200 - hsvS) * hsvV / 100;
+
+	const [ hslS, hslV ] = [
+		hslL === 0 || hslL === 200 ? 0 : hsvS * hsvV / 100 / (hslL <= 100 ? hslL : 200 - hslL) * 100,
+		hslL * 5 / 10
+	];
+
+	return [ hsvH, hslS, hslV ];
+}
diff --git a/lib/hwb-hsv.js b/lib/hwb-hsv.js
new file mode 100644
index 0000000..25cb9ee
--- /dev/null
+++ b/lib/hwb-hsv.js
@@ -0,0 +1,24 @@
+/* Convert between HWB and HSV
+/* ========================================================================== */
+
+// https://en.wikipedia.org/wiki/HWB_color_model#Converting_to_and_from_HSV
+
+export function hwb2hsv(hwbH, hwbW, hwbB) {
+	const [ hsvH, hsvS, hsvV ] = [
+		hwbH,
+		hwbB === 100 ? 0 : 100 - hwbW / (100 - hwbB) * 100,
+		100 - hwbB
+	];
+
+	return [ hsvH, hsvS, hsvV ];
+}
+
+export function hsv2hwb(hsvH, hsvS, hsvV) {
+	const [ hwbH, hwbW, hwbB ] = [
+		hsvH,
+		(100 - hsvS) * hsvV / 100,
+		100 - hsvV
+	];
+
+	return [ hwbH, hwbW, hwbB ];
+}
diff --git a/lib/lab-xyz.js b/lib/lab-xyz.js
new file mode 100644
index 0000000..eddec82
--- /dev/null
+++ b/lib/lab-xyz.js
@@ -0,0 +1,61 @@
+import { epsilon, kappa, wd50X, wd50Y, wd50Z, matrix } from './util';
+
+/* Convert between LAB and XYZ
+/* ========================================================================== */
+
+// https://www.w3.org/TR/css-color-4/#rgb-to-lab
+// https://www.w3.org/TR/css-color-4/#color-conversion-code
+// https://www.easyrgb.com/en/math.php
+
+export function lab2xyz(labL, labA, labB) {
+	// compute f, starting with the luminance-related term
+	const f2 = (labL + 16) / 116;
+	const f1 = labA / 500 + f2;
+	const f3 = f2 - labB / 200;
+
+	// compute pre-scaled XYZ
+	const [ initX, initY, initZ ] = [
+		Math.pow(f1, 3) > epsilon ? Math.pow(f1, 3)                : (116 * f1 - 16) / kappa,
+		labL > kappa * epsilon    ? Math.pow((labL + 16) / 116, 3) : labL / kappa,
+		Math.pow(f3, 3) > epsilon ? Math.pow(f3, 3)                : (116 * f3 - 16) / kappa
+	];
+
+	const [ xyzX, xyzY, xyzZ ] = matrix(
+		// compute XYZ by scaling pre-scaled XYZ by reference white
+		[ initX * wd50X, initY * wd50Y, initZ * wd50Z ],
+		// calculate D65 XYZ from D50 XYZ
+		[
+			[ 0.9555766, -0.0230393,  0.0631636],
+			[-0.0282895,  1.0099416,  0.0210077],
+			[ 0.0122982, -0.0204830,  1.3299098]
+		]
+	);
+
+	return [ xyzX, xyzY, xyzZ ];
+}
+
+export function xyz2lab(xyzX, xyzY, xyzZ) {
+	// calculate D50 XYZ from D65 XYZ
+	const [ d50X, d50Y, d50Z ] = matrix([ xyzX, xyzY, xyzZ ], [
+		[ 1.0478112,  0.0228866, -0.0501270],
+		[ 0.0295424,  0.9904844, -0.0170491],
+		[-0.0092345,  0.0150436,  0.7521316]
+	]);
+
+	// calculate f
+	const [ f1, f2, f3 ] = [
+		d50X / wd50X,
+		d50Y / wd50Y,
+		d50Z / wd50Z
+	].map(
+		value => value > epsilon ? Math.cbrt(value) : (kappa * value + 16) / 116
+	);
+
+	const [ labL, labA, labB ] = [
+		116 * f2 - 16,
+		500 * (f1 - f2),
+		200 * (f2 - f3)
+	];
+
+	return [ labL, labA, labB ];
+}
diff --git a/lib/rgb-hsl.js b/lib/rgb-hsl.js
new file mode 100644
index 0000000..1c169d6
--- /dev/null
+++ b/lib/rgb-hsl.js
@@ -0,0 +1,43 @@
+import { rgb2hue, rgb2value, rgb2whiteness, hue2rgb } from './util';
+
+/* Convert between RGB and HSL
+/* ========================================================================== */
+
+// https://www.w3.org/TR/css-color-3/#hsl-color
+// https://www.w3.org/TR/css-color-4/#hsl-to-rgb
+// https://www.rapidtables.com/convert/color/rgb-to-hsl.html
+// https://www.rapidtables.com/convert/color/hsl-to-rgb.html
+
+export function rgb2hsl(rgbR, rgbG, rgbB) {
+	const hslH = rgb2hue(rgbR, rgbG, rgbB);
+	const hslV = rgb2value(rgbR, rgbG, rgbB);
+	const hslW = rgb2whiteness(rgbR, rgbG, rgbB);
+
+	// calculate value/whiteness delta
+	const hslD = hslV - hslW;
+
+	// calculate lightness
+	const hslL = (hslV + hslW) / 2;
+
+	// calculate saturation
+	const hslS = hslD === 0 ? 0 : hslD / (100 - Math.abs(2 * hslL - 100)) * 100;
+
+	return [ hslH, hslS, hslL ];
+}
+
+export function hsl2rgb(hslH, hslS, hslL) {
+	// calcuate t2
+	const t2 = hslL <= 50 ? hslL * (hslS + 100) / 100 : hslL + hslS - hslL * hslS / 100;
+
+	// calcuate t1
+	const t1 = hslL * 2 - t2;
+
+	// calculate rgb
+	const [ rgbR, rgbG, rgbB ] = [
+		hue2rgb(t1, t2, hslH + 120),
+		hue2rgb(t1, t2, hslH),
+		hue2rgb(t1, t2, hslH - 120)
+	];
+
+	return [ rgbR, rgbG, rgbB ];
+}
diff --git a/lib/rgb-hsv.js b/lib/rgb-hsv.js
new file mode 100644
index 0000000..4b93c23
--- /dev/null
+++ b/lib/rgb-hsv.js
@@ -0,0 +1,36 @@
+import { rgb2value, rgb2whiteness, rgb2hue } from './util';
+
+/* Convert between RGB and HSV
+/* ========================================================================== */
+
+// http://alvyray.com/Papers/CG/hsv2rgb.htm
+
+export function rgb2hsv(rgbR, rgbG, rgbB) {
+	const hsvV = rgb2value(rgbR, rgbG, rgbB);
+	const hsvW = rgb2whiteness(rgbR, rgbG, rgbB);
+	const hsvH = rgb2hue(rgbR, rgbG, rgbB);
+
+	// calculate saturation
+	const hsvS = hsvV === hsvW ? 0 : (hsvV - hsvW) / hsvV * 100;
+
+	return [ hsvH, hsvS, hsvV ];
+}
+
+export function hsv2rgb(hsvH, hsvS, hsvV) {
+	const rgbI = Math.floor(hsvH / 60);
+
+	// calculate rgb parts
+	const rgbF = (hsvH / 60 - rgbI) & 1 ? hsvH / 60 - rgbI : 1 - hsvH / 60 - rgbI;
+	const rgbM = hsvV * (100 - hsvS) / 100;
+	const rgbN = hsvV * (100 - hsvS * rgbF) / 100;
+
+	switch (rgbI) {
+		case 6:
+		case 0: return [hsvV, rgbN, rgbM];
+		case 1: return [rgbN, hsvV, rgbM];
+		case 2: return [rgbM, hsvV, rgbN];
+		case 3: return [rgbM, rgbN, hsvV];
+		case 4: return [rgbN, rgbM, hsvV];
+		case 5: return [hsvV, rgbM, rgbN];
+	}
+}
diff --git a/lib/rgb-hwb.js b/lib/rgb-hwb.js
new file mode 100644
index 0000000..9f68490
--- /dev/null
+++ b/lib/rgb-hwb.js
@@ -0,0 +1,25 @@
+import { rgb2hue, rgb2whiteness, rgb2value } from './util';
+import { hsl2rgb } from './rgb-hsl';
+
+/* Convert between RGB and HWB
+/* ========================================================================== */
+
+// https://www.w3.org/TR/css-color-4/#hwb-to-rgb
+// http://alvyray.com/Papers/CG/hwb2rgb.htm
+
+export function rgb2hwb(rgbR, rgbG, rgbB) {
+	const hwbH = rgb2hue(rgbR, rgbG, rgbB);
+	const hwbW = rgb2whiteness(rgbR, rgbG, rgbB);
+	const hwbV = rgb2value(rgbR, rgbG, rgbB);
+	const hwbB = 100 - hwbV;
+
+	return [hwbH, hwbW, hwbB];
+}
+
+export function hwb2rgb(hwbH, hwbW, hwbB) {
+	const [ rgbR, rgbG, rgbB ] = hsl2rgb(hwbH, 100, 50).map(
+		v => v * (100 - hwbW - hwbB) / 100 + hwbW
+	);
+
+	return [ rgbR, rgbG, rgbB ];
+}
diff --git a/lib/rgb-xyz.js b/lib/rgb-xyz.js
new file mode 100644
index 0000000..43fe61b
--- /dev/null
+++ b/lib/rgb-xyz.js
@@ -0,0 +1,32 @@
+import { matrix } from './util';
+
+/* Convert between RGB and XYZ
+/* ========================================================================== */
+
+export function rgb2xyz(rgbR, rgbG, rgbB) {
+	const [ lrgbR, lrgbB, lrgbG ] = [ rgbR, rgbG, rgbB ].map(
+		v => v > 4.045 ? Math.pow((v + 5.5) / 105.5, 2.4) * 100 : v / 12.92
+	);
+
+	const [ xyzX, xyzY, xyzZ ] = matrix([ lrgbR, lrgbB, lrgbG ], [
+		[0.4124564, 0.3575761, 0.1804375],
+		[0.2126729, 0.7151522, 0.0721750],
+		[0.0193339, 0.1191920, 0.9503041]
+	]);
+
+	return [ xyzX, xyzY, xyzZ ];
+}
+
+export function xyz2rgb(xyzX, xyzY, xyzZ) {
+	const [ lrgbR, lrgbB, lrgbG ] = matrix([ xyzX, xyzY, xyzZ ], [
+		[ 3.2404542, -1.5371385, -0.4985314],
+		[-0.9692660,  1.8760108,  0.0415560],
+		[ 0.0556434, -0.2040259,  1.0572252]
+	]);
+
+	const [ rgbR, rgbG, rgbB ] = [ lrgbR, lrgbB, lrgbG ].map(
+		v => v > 0.31308 ? 1.055 * Math.pow(v / 100, 1 / 2.4) * 100 - 5.5 : 12.92 * v
+	);
+
+	return [ rgbR, rgbG, rgbB ];
+}
diff --git a/lib/util.js b/lib/util.js
new file mode 100644
index 0000000..ad66b0f
--- /dev/null
+++ b/lib/util.js
@@ -0,0 +1,85 @@
+/* Convert between RGB and Hue
+/* ========================================================================== */
+
+export function rgb2hue(rgbR, rgbG, rgbB) {
+	const value     = rgb2value(rgbR, rgbG, rgbB);
+	const whiteness = rgb2whiteness(rgbR, rgbG, rgbB);
+	const delta = value - whiteness;
+
+	// calculate segment
+	const segment = value === rgbR
+		? (rgbG - rgbB) / delta
+	: value === rgbG
+		? (rgbB - rgbR) / delta
+	: (rgbR - rgbG) / delta;
+
+	// calculate shift
+	const shift = value === rgbR
+		? segment < 0
+			? 360 / 60
+			: 0 / 60
+	: value === rgbG
+		? 120 / 60
+	: 240 / 60;
+
+	// calculate hue
+	const hue = (segment + shift) * 60 || 0;
+
+	return hue;
+}
+
+export function hue2rgb(t1, t2, hue) {
+	// calculate ranged hue
+	const rhue = hue < 0 ? hue + 360 : hue > 360 ? hue - 360 : hue;
+
+	if (rhue * 6 < 360) {
+		return t1 + (t2 - t1) * rhue / 60;
+	}
+
+	if (rhue * 2 < 360) {
+		return t2;
+	}
+
+	if (rhue * 3 < 720) {
+		return t1 + (t2 - t1) * (240 - rhue) / 60;
+	}
+
+	return t1;
+}
+
+/* RGB tooling
+/* ========================================================================== */
+
+export function rgb2value(rgbR, rgbG, rgbB) {
+	const value = Math.max(rgbR, rgbG, rgbB);
+
+	return value;
+}
+
+export function rgb2whiteness(rgbR, rgbG, rgbB) {
+	const whiteness = Math.min(rgbR, rgbG, rgbB);
+
+	return whiteness;
+}
+
+/* Math matrix
+/* ========================================================================== */
+
+export function matrix(params, mats) {
+	return mats.map(mat => mat.reduce((acc, value, index) => acc + params[index] * value, 0));
+}
+
+/* D50 reference white
+/* ========================================================================== */
+
+export const [ wd50X, wd50Y, wd50Z ] = [ 96.42, 100, 82.49 ];
+
+/* Epsilon
+/* ========================================================================== */
+
+export const epsilon = Math.pow(6, 3) / Math.pow(29, 3);
+
+/* Kappa
+/* ========================================================================== */
+
+export const kappa = Math.pow(29, 3) / Math.pow(3, 3);
diff --git a/package.json b/package.json
index 8791d9a..fed1de8 100644
--- a/package.json
+++ b/package.json
@@ -1,6 +1,6 @@
 {
   "name": "@csstools/convert-colors",
-  "version": "1.2.0",
+  "version": "1.3.0",
   "description": "Convert colors between RGB, HSL, and HWB",
   "author": "Jonathan Neal <jonathantneal@hotmail.com>",
   "license": "CC0-1.0",
@@ -11,7 +11,8 @@
   "module": "index.js",
   "files": [
     "index.js",
-    "index.bundle.js"
+    "index.bundle.js",
+    "lib"
   ],
   "scripts": {
     "prepublishOnly": "npm test",
-- 
2.33.1

