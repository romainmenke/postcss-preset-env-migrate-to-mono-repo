From 0609a4c5e82a9bfc3c7ade32cba936c9386f5800 Mon Sep 17 00:00:00 2001
From: Jonathan Neal <jonathantneal@hotmail.com>
Date: Wed, 24 Jan 2018 23:46:31 -0500
Subject: [PATCH 05/11] Add LAB conversion

Also, XYZ
---
 index.js | 234 +++++++++++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 234 insertions(+)

diff --git a/index.js b/index.js
index 570d4a3..550b6f3 100644
--- a/index.js
+++ b/index.js
@@ -26,6 +26,19 @@ function convertRGBtoHWB(red, green, blue, fallbackhue = 0) {
 	return [ hue, whiteness, blackness ];
 }
 
+/* Convert Red/Green/Blue to Hue/Saturation/Value
+/* ========================================================================== */
+
+function convertRGBtoHSV(red, green, blue, fallbackhue = 0) {
+	const hue        = convertRGBtoH(red, green, blue, fallbackhue);
+	const whiteness  = convertRGBtoW(red, green, blue);
+	const value      = convertRGBtoV(red, green, blue);
+	const lightness  = convertWVtoL(whiteness, value);
+	const saturation = convertLVWtoS(lightness, value, whiteness);
+
+	return [ hue, saturation, value ];
+}
+
 /* Convert Hue/Saturation/Lightness to Red/Green/Blue
 /* ========================================================================== */
 
@@ -92,6 +105,192 @@ function convertHWBtoHSL(hue, whiteness, blackness) {
 	return [hue, saturation, lightness];
 }
 
+/* Convert between Red/Green/Blue and Linear-Light RGB
+/* ========================================================================== */
+
+function convertRGBtoLRGB(sr, sg, sb) {
+	const [ lr, lg, lb ] = [ sr, sg, sb ].map(convertRGBVtoLRGBV);
+
+	return [ lr, lg, lb ];
+}
+
+function convertLRGBtoRGB(lr, lg, lb) {
+	const [ sr, sg, sb ] = [ lr, lg, lb ].map(convertLRGBVtoRGBV);
+
+	return [ sr, sg, sb ];
+}
+
+function convertRGBVtoLRGBV(v) {
+	return v <= 4.045
+		? v / 12.92
+	: Math.pow((v + 5.5) / 105.5, 2.4) * 100;
+}
+
+function convertLRGBVtoRGBV(v) {
+	return v > 0.31308
+		? 1.055 * Math.pow(v / 100, 1 / 2.4) * 100 - 5.5
+	: 12.92 * v;
+}
+
+/* Convert between Linear-Light Red/Green/Blue and CIE XYZ
+/* ========================================================================== */
+
+function convertLRGBtoXYZ(lr, lg, lb) {
+	const [ x, y, z ] = matrix([ lr, lg, lb ], [
+		[0.4124564, 0.3575761, 0.1804375],
+		[0.2126729, 0.7151522, 0.0721750],
+		[0.0193339, 0.1191920, 0.9503041]
+	]);
+
+	return [ x, y, z ];
+}
+
+function convertXYZtoLRGB(x, y, z) {
+	const [ lr, lg, lb ] = matrix([ x, y, z ], [
+		[ 3.2404542, -1.5371385, -0.4985314],
+		[-0.9692660,  1.8760108,  0.0415560],
+		[ 0.0556434, -0.2040259,  1.0572252]
+	]);
+
+	return [ lr, lg, lb ];
+}
+
+/* Convert between CIE XYZ and D50 XYZ
+/* ========================================================================== */
+
+function convertXYZtoD50XYZ(x, y, z) {
+	const [ d50x, d50y, d50z ] = matrix([ x, y, z ], [
+		[ 1.0478112, 0.0228866, -0.0501270],
+		[ 0.0295424, 0.9904844, -0.0170491],
+		[-0.0092345, 0.0150436,  0.7521316]
+	]);
+
+	return [ d50x, d50y, d50z ];
+}
+
+function convertD50XYZtoXYZ(d50x, d50y, d50z) {
+	const [ x, y, z ] = [
+		d50x *  0.9555766 + d50y * -0.0230393 + d50z *  0.0631636,
+		d50x * -0.0282895 + d50y *  1.0099416 + d50z *  0.0210077,
+		d50z *  0.0122982 + d50y * -0.0204830 + d50z *  1.3299098
+	];
+
+	return [ x, y, z ];
+}
+
+/* Convert between D50 XYZ and LAB
+/* ========================================================================== */
+
+function convertD50XYZtoLAB(d50x, d50y, d50z) {
+	const [ f1, f2, f3 ] = [
+		d50x / wX,
+		d50y / wY,
+		d50z / wZ
+	].map(
+		value => value > epsilon
+			? Math.cbrt(value)
+		: (kappa * value + 16) / 116
+	);
+
+	const [ l, a, b ] = [
+		116 * f2 - 16,
+		500 * (f1 - f2),
+		200 * (f2 - f3)
+	];
+
+	return [ l, a, b ];
+}
+
+function convertLABtoD50XYZ(l, a, b) {
+	const f2 = (l + 16) / 116;
+	const f1 = a / 500 + f2;
+	const f3 = f2 - b / 200;
+
+	const [ wx, wy, wz ] = [
+		Math.pow(f1, 3) > epsilon ? Math.pow(f1, 3)             : (116 * f1 - 16) / kappa,
+		l > kappa * epsilon       ? Math.pow((l + 16) / 116, 3) : l / kappa,
+		Math.pow(f3, 3) > epsilon ? Math.pow(f3, 3)            : (116 * f3 - 16) / kappa
+	];
+
+	const [ d50x, d50y, d50z ] = [
+		wx * wX,
+		wy * wY,
+		wz * wZ
+	];
+
+	return [ d50x, d50y, d50z ];
+}
+
+/* Combination Conversions
+/* ========================================================================== */
+
+function convertRGBtoXYZ(rgbR, rgbG, rgbB) {
+	const [ lrgbR, lrgbG, lrgbB ] = convertRGBtoLRGB(rgbR, rgbG, rgbB);
+	const [ d65x,  d65y,  d65z  ] = convertLRGBtoXYZ(lrgbR, lrgbG, lrgbB);
+
+	return [ d65x, d65y, d65z ];
+}
+
+function convertXYZtoRGB(xyzX, xyzY, xyzZ) {
+	const [ lrgbR, lrgbG, lrgbB ] = convertXYZtoLRGB(xyzX, xyzY, xyzZ);
+	const [ rgbR,  rgbG,  rgbB  ] = convertLRGBtoRGB(lrgbR, lrgbG, lrgbB);
+
+	return [ rgbR, rgbG, rgbB ];
+}
+
+function convertRGBtoLAB(rgbR, rgbG, rgbB) {
+	const [ lrgbR, lrgbG, lrgbB ] = convertRGBtoLRGB(rgbR, rgbG, rgbB);
+	const [ xyzX,  xyzY,  xyzZ  ] = convertLRGBtoXYZ(lrgbR, lrgbG, lrgbB);
+	const [ d50x,  d50y,  d50z  ] = convertXYZtoD50XYZ(xyzX, xyzY, xyzZ);
+	const [ labL,  labA,  labB  ] = convertD50XYZtoLAB(d50x, d50y, d50z);
+
+	return [ labL, labA, labB ];
+}
+
+function convertLABtoRGB(labL, labA, labB) {
+	const [ d50x,  d50y,  d50z  ] = convertLABtoD50XYZ(labL, labA, labB);
+	const [ xyzX,  xyzY,  xyzZ  ] = convertD50XYZtoXYZ(d50x, d50y, d50z);
+	const [ lrgbR, lrgbG, lrgbB ] = convertXYZtoLRGB(xyzX, xyzY, xyzZ);
+	const [ rgbR,  rgbG,  rgbB  ] = convertLRGBtoRGB(lrgbR, lrgbG, lrgbB);
+
+	return [ rgbR, rgbG, rgbB ];
+}
+
+function convertHSLtoLAB(hslH, hslS, hslL) {
+	const [ rgbR, rgbG, rgbB ] = convertHSLtoRGB(hslH, hslS, hslL);
+	const [ labL, labA, labB ] = convertRGBtoLAB(rgbR, rgbG, rgbB);
+
+	return [ labL, labA, labB ];
+}
+
+function convertLABtoHSL(labL, labA, labB) {
+	const [ rgbR, rgbG, rgbB ] = convertLABtoRGB(labL, labA, labB);
+	const [ hslH, hslS, hslL ] = convertRGBtoLAB(rgbR, rgbG, rgbB);
+
+	return [ hslH, hslS, hslL ];
+}
+
+function convertHWBtoLAB(hwbH, hwbW, hwbB) {
+	const [ rgbR, rgbG, rgbB ] = convertHWBtoRGB(hwbH, hwbW, hwbB);
+	const [ labL, labA, labB ] = convertRGBtoLAB(rgbR, rgbG, rgbB);
+
+	return [ labL, labA, labB ];
+}
+
+function convertLABtoHWB(labL, labA, labB) {
+	const [ rgbR, rgbG, rgbB ] = convertLABtoRGB(labL, labA, labB);
+	const [ hslH, hslS, hslL ] = convertRGBtoHSL(rgbR, rgbG, rgbB);
+
+	return [ hslH, hslS, hslL ];
+}
+
+function convertLABtoHSV(labL, labA, labB) {
+	const [ hwbH, hwbW, hwbB ] = convertLABtoHWB(labL, labA, labB);
+	const [ hsvH, hsvS, hsvV ] = convertHWBtoHSV(hwbH, hwbW, hwbB);
+
+	return [ hsvH, hsvS, hsvV ];
+}
+
 /* Conversion Tooling
 /* ========================================================================== */
 
@@ -281,19 +480,54 @@ function invert(percentage) {
 	return 100 - percentage;
 }
 
+/* Calculate a Matrix
+/* ========================================================================== */
+
+function matrix(params, mats) {
+	return mats.map(mat => mat.reduce((acc, value, index) => acc + params[index] * value, 0));
+}
+
+/* Variables
+/* ========================================================================== */
+
+// epsilon
+const epsilon = Math.pow(6, 3) / Math.pow(29, 3);
+
+// kappa
+const kappa = Math.pow(29, 3) / Math.pow(3, 3);
+
+// reference white (D50 XYZ)
+const [ wX, wY, wZ ] = [ 96.42, 100, 82.49 ];
+
 /* Export Conversions
 /* ========================================================================== */
 
 export default {
 	rgb2hsl: convertRGBtoHSL,
 	rgb2hwb: convertRGBtoHWB,
+	rgb2lab: convertRGBtoLAB,
+	rgb2hsv: convertRGBtoHSV,
+
 	hsl2rgb: convertHSLtoRGB,
 	hsl2hwb: convertHSLtoHWB,
+	hsl2lab: convertHSLtoLAB,
 	hsl2hsv: convertHSLtoHSV,
+
 	hwb2rgb: convertHWBtoRGB,
 	hwb2hsl: convertHWBtoHSL,
+	hwb2lab: convertHWBtoLAB,
 	hwb2hsv: convertHWBtoHSV,
+
+	lab2rgb: convertLABtoRGB,
+	lab2hsl: convertLABtoHSL,
+	lab2hwb: convertLABtoHWB,
+	lab2hsv: convertLABtoHSV,
+
 	hsv2hsl: convertHSVtoHSL,
 	hsv2hwb: convertHSVtoHWB,
+
+	rgb2xyz: convertRGBtoXYZ,
+	xyz2rgb: convertXYZtoRGB,
+
 	rgb2hue: convertRGBtoH
 };
-- 
2.33.1

