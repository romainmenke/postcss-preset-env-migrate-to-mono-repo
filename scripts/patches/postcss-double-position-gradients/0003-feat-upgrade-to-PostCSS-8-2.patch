From b9ca23cebaf0ae4454b189530842ae83eff11ad1 Mon Sep 17 00:00:00 2001
From: Armano <armano2@users.noreply.github.com>
Date: Mon, 5 Jul 2021 16:05:23 +0200
Subject: [PATCH 3/4] feat: upgrade to PostCSS 8 (csstools/postcss-double-position-gradients#2)

---
 .gitignore                     |  2 --
 .rollup.js                     |  9 -----
 .travis.yml                    |  1 +
 index.js                       | 64 ++++++++++++++++++++++++++++++++++
 package.json                   | 63 +++++++--------------------------
 src/index.js                   | 18 ----------
 src/onCSSDeclaration.js        | 31 ----------------
 src/onCSSFunction.js           | 36 -------------------
 src/options.js                 |  4 ---
 test/basic.css                 | 12 +++++++
 test/basic.expect.css          | 12 +++++++
 test/basic.preserve.expect.css | 12 +++++++
 12 files changed, 114 insertions(+), 150 deletions(-)
 delete mode 100644 .rollup.js
 create mode 100644 index.js
 delete mode 100644 src/index.js
 delete mode 100644 src/onCSSDeclaration.js
 delete mode 100644 src/onCSSFunction.js
 delete mode 100644 src/options.js

diff --git a/.gitignore b/.gitignore
index 5bd3ef6..5431bb3 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1,4 +1,3 @@
-dist
 node_modules
 package-lock.json
 *.log*
@@ -7,6 +6,5 @@ package-lock.json
 !.editorconfig
 !.gitattributes
 !.gitignore
-!.rollup.js
 !.tape.js
 !.travis.yml
diff --git a/.rollup.js b/.rollup.js
deleted file mode 100644
index 1fb0d87..0000000
--- a/.rollup.js
+++ /dev/null
@@ -1,9 +0,0 @@
-import pkg from './package.json'
-
-export default {
-	...pkg.rollup,
-	plugins: pkg.rollup.plugins.map(plugin => require(plugin)()),
-	onwarn(warning, warn) {
-		if (warning.code !== 'UNRESOLVED_IMPORT') warn(warning)
-	}
-}
diff --git a/.travis.yml b/.travis.yml
index a9e32cd..6b7feec 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -4,6 +4,7 @@ language: node_js
 
 node_js:
   - 10
+  - 12
 
 install:
   - npm install --ignore-scripts
diff --git a/index.js b/index.js
new file mode 100644
index 0000000..569546c
--- /dev/null
+++ b/index.js
@@ -0,0 +1,64 @@
+const {parse} = require("postcss-values-parser");
+const Punctuation = require("postcss-values-parser/lib/nodes/Punctuation");
+
+// whether the value has a lab() or lch() matcher
+const gradientRegExp = /(repeating-)?(conic|linear|radial)-gradient\([\W\w]*\)/i;
+const gradientPartsRegExp = /^(repeating-)?(conic|linear|radial)-gradient$/i;
+
+/**
+ * Transform double-position gradients in CSS.
+ * @param {{preserve?: boolean}} opts
+ * @returns {import('postcss').Plugin}
+ */
+module.exports = function creator(opts) {
+	const preserve = 'preserve' in Object(opts) ? Boolean(opts.preserve) : true;
+
+	return {
+		postcssPlugin: 'postcss-double-position-gradients',
+		Declaration(decl) {
+			if (!gradientRegExp.test(decl.value)) {
+				return;
+			}
+
+			const valueAST = parse(decl.value, { ignoreUnknownWords: true });
+
+			valueAST.walkFuncs((func) => {
+				if (!gradientPartsRegExp.test(func.name)) {
+					return;
+				}
+
+				func.walkNumerics((node, index) => {
+					/** @type {import('postcss-values-parser').ChildNode} */
+					const node1back = Object(func.nodes[index - 1]);
+					/** @type {import('postcss-values-parser').ChildNode} */
+					const node2back = Object(func.nodes[index - 2]);
+					/** @type {import('postcss-values-parser').ChildNode} */
+					const node1next = Object(func.nodes[index + 1]);
+
+					// if the argument concludes a double-position gradient
+					if (node2back.type && node1back.type === 'numeric') {
+						// insert the fallback colors
+						const color = node2back.clone();
+						const comma = new Punctuation({
+							value: ',',
+							raws: node1next.type === 'punctuation' && node1next.value === ','
+								? Object.assign({}, node1next.clone().raws)
+								: { before: '', after: '' }
+						});
+
+						func.insertBefore(node, [comma, color]);
+					}
+				})
+			})
+
+			const modifiedValue = String(valueAST);
+
+			if (modifiedValue !== decl.value) {
+				if (preserve) decl.cloneBefore({ value: modifiedValue });
+				else decl.value = modifiedValue;
+			}
+		}
+	}
+}
+
+module.exports.postcss = true;
diff --git a/package.json b/package.json
index 78ba280..49241a8 100644
--- a/package.json
+++ b/package.json
@@ -7,71 +7,34 @@
   "repository": "csstools/postcss-double-position-gradients",
   "homepage": "https://github.com/csstools/postcss-double-position-gradients#readme",
   "bugs": "https://github.com/csstools/postcss-double-position-gradients/issues",
-  "main": "dist/index.js",
-  "module": "dist/index.mjs",
-  "files": [
-    "dist"
-  ],
+  "main": "index.js",
   "scripts": {
-    "build": "npx rollup -c .rollup.js",
-    "build:watch": "npx rollup -c .rollup.js --watch",
-    "lint": "npx eslint --cache src",
-    "lint:fix": "npx eslint --cache --fix",
-    "pretest": "npm install && npm run build",
+    "prepublishOnly": "npm test",
+    "lint": "eslint *.js --cache",
+    "lint:fix": "eslint *.js --cache --fix",
     "test": "npm run lint && npm run tape",
-    "tape": "npx postcss-tape",
-    "prepublishOnly": "npm test"
+    "tape": "postcss-tape"
   },
   "engines": {
     "node": ">=10.0.0"
   },
   "dependencies": {
-    "postcss": "^7.0.27",
-    "postcss-values-parser": "^3.2.1"
+    "postcss-values-parser": "^5.0.0"
   },
-  "devDependencies": {
-    "@babel/core": "^7.9.0",
-    "@babel/preset-env": "^7.9.5",
-    "babel-eslint": "^10.1.0",
-    "eslint": "^6.8.0",
-    "postcss-tape": "^5.0.2",
-    "pre-commit": "^1.2.2",
-    "rollup": "^2.7.2",
-    "rollup-plugin-babel": "^4.4.0"
+  "peerDependencies": {
+    "postcss": "^8.0.0"
   },
-  "babel": {
-    "presets": [
-      [
-        "@babel/env",
-        {
-          "targets": "maintained node versions"
-        }
-      ]
-    ]
+  "devDependencies": {
+    "eslint": "^7.21.0",
+    "postcss-tape": "^6.0.0",
+    "postcss": "^8.2.8"
   },
   "eslintConfig": {
     "env": {
       "es6": true,
       "node": true
     },
-    "extends": "eslint:recommended",
-    "parser": "babel-eslint"
-  },
-  "rollup": {
-    "input": "src/index.js",
-    "plugins": [
-      "rollup-plugin-babel"
-    ],
-    "output": [
-      {
-        "file": "dist/index.js",
-        "format": "cjs"
-      },
-      {
-        "file": "dist/index.mjs",
-        "format": "esm"
-      }
-    ]
+    "extends": "eslint:recommended"
   },
   "keywords": [
     "postcss",
diff --git a/src/index.js b/src/index.js
deleted file mode 100644
index dcea23f..0000000
--- a/src/index.js
+++ /dev/null
@@ -1,18 +0,0 @@
-import postcss from 'postcss'
-import onCSSDeclaration from './onCSSDeclaration'
-import options from './options'
-
-/** Transform double-position gradients in CSS. */
-const postcssPlugin = postcss.plugin('postcss-double-position-gradients', /** @type {PostCSSPluginInitializer} */ opts => {
-	if ('preserve' in Object(opts)) options.preserve = Boolean(opts.preserve)
-
-	return root => {
-		root.walkDecls(onCSSDeclaration)
-	}
-})
-
-export default postcssPlugin
-
-/** @typedef {import('postcss').Root} CSSRoot */ 
-/** @typedef {(root: CSSRoot) => void} PostCSSTransformCallback */ 
-/** @typedef {(opts: options) => PostCSSTransformCallback} PostCSSPluginInitializer */ 
diff --git a/src/onCSSDeclaration.js b/src/onCSSDeclaration.js
deleted file mode 100644
index 4f11a8e..0000000
--- a/src/onCSSDeclaration.js
+++ /dev/null
@@ -1,31 +0,0 @@
-import { parse } from 'postcss-values-parser'
-import onCSSFunction from './onCSSFunction'
-import options from './options'
-
-/** @type {(decl: CSSDeclaration) => void} Transform double-position gradients in CSS Declarations. */
-const onCSSDeclaration = decl => {
-	const { value: originalValue } = decl
-
-	if (hasGradientFunction(originalValue)) {
-		const valueAST = parse(originalValue, { ignoreUnknownWords: true })
-
-		valueAST.walkType('func', onCSSFunction)
-
-		const modifiedValue = String(valueAST)
-
-		if (modifiedValue !== originalValue) {
-			if (options.preserve) decl.cloneBefore({ value: modifiedValue })
-			else decl.value = modifiedValue
-		}
-	}
-}
-
-export default onCSSDeclaration
-
-/** @type {(value: RegExp) => (value: string) => boolean} Return a function that checks whether the expression exists in a value. */
-const createRegExpTest = Function.bind.bind(RegExp.prototype.test)
-
-/** Return whether the value has a lab() or lch() function. */
-const hasGradientFunction = createRegExpTest(/(repeating-)?(conic|linear|radial)-gradient\([\W\w]*\)/i)
-
-/** @typedef {import('postcss').Declaration} CSSDeclaration */
diff --git a/src/onCSSFunction.js b/src/onCSSFunction.js
deleted file mode 100644
index 61fd4aa..0000000
--- a/src/onCSSFunction.js
+++ /dev/null
@@ -1,36 +0,0 @@
-import Punctuation from 'postcss-values-parser/lib/nodes/Punctuation';
-
-/** @type {(decl: CSSFunction) => void} Transform lab() and lch() functions. */
-const onCSSFunction = func => {
-	/** @type {{ name: string, nodes: CSSNode[] }} */
-	const { name, nodes } = func
-	
-	if (isGradientFunctionName(name)) {
-		nodes.slice(0).forEach((node, index, nodes) => {
-			const node1back = Object(nodes[index - 1]);
-			const node2back = Object(nodes[index - 2]);
-			const node1next = Object(nodes[index + 1]);
-
-			const isDoublePositionLength = node2back.type && node1back.type === 'numeric' && node.type === 'numeric';
-
-			// if the argument concludes a double-position gradient
-			if (isDoublePositionLength) {
-				// insert the fallback colors
-				const color = node2back.clone();
-				const comma = new Punctuation({ value: ',', raws: isPunctuationCommaNode(node1next) ? { ...node1next.clone().raws } : { before: '', after: '' } })
-
-				func.insertBefore(node, [comma, color]);
-			}
-		})
-	}
-}
-
-export default onCSSFunction
-
-/** @type {(value: RegExp) => (value: string) => boolean} Return a function that checks whether the expression exists in a value. */
-const createRegExpTest = Function.bind.bind(RegExp.prototype.test)
-
-/** Return whether the function name is `lab` or `lch`. */
-const isGradientFunctionName = createRegExpTest(/^(repeating-)?(conic|linear|radial)-gradient$/i)
-
-const isPunctuationCommaNode = node => node.type === 'punctuation' && node.value === ','
diff --git a/src/options.js b/src/options.js
deleted file mode 100644
index eadf617..0000000
--- a/src/options.js
+++ /dev/null
@@ -1,4 +0,0 @@
-export default {
-	/** Whether to preserve the original hexa. */
-	preserve: true
-}
diff --git a/test/basic.css b/test/basic.css
index 411bc7f..0d53b4b 100644
--- a/test/basic.css
+++ b/test/basic.css
@@ -5,3 +5,15 @@
 .test-conic-gradient {
 	background-image: conic-gradient(yellowgreen 40%, gold 0deg 75% , #f06 0deg);
 }
+
+.test-invalid-function {
+	background-image: some-func(yellowgreen 40%, gold 0deg 75% , #f06 0deg);
+}
+
+.test-linear-gradient-ignored {
+	background-image: linear-gradient(90deg, black 25%, black 50%, blue 50%, blue 75%);
+}
+
+.test-conic-gradient-ignored {
+	background-image: conic-gradient(yellowgreen 40%, gold 0deg , gold 75% , #f06 0deg);
+}
diff --git a/test/basic.expect.css b/test/basic.expect.css
index 7be528e..6bf5163 100644
--- a/test/basic.expect.css
+++ b/test/basic.expect.css
@@ -7,3 +7,15 @@
 	background-image: conic-gradient(yellowgreen 40%, gold 0deg , gold 75% , #f06 0deg);
 	background-image: conic-gradient(yellowgreen 40%, gold 0deg 75% , #f06 0deg);
 }
+
+.test-invalid-function {
+	background-image: some-func(yellowgreen 40%, gold 0deg 75% , #f06 0deg);
+}
+
+.test-linear-gradient-ignored {
+	background-image: linear-gradient(90deg, black 25%, black 50%, blue 50%, blue 75%);
+}
+
+.test-conic-gradient-ignored {
+	background-image: conic-gradient(yellowgreen 40%, gold 0deg , gold 75% , #f06 0deg);
+}
diff --git a/test/basic.preserve.expect.css b/test/basic.preserve.expect.css
index f1f4664..9c5363b 100644
--- a/test/basic.preserve.expect.css
+++ b/test/basic.preserve.expect.css
@@ -5,3 +5,15 @@
 .test-conic-gradient {
 	background-image: conic-gradient(yellowgreen 40%, gold 0deg , gold 75% , #f06 0deg);
 }
+
+.test-invalid-function {
+	background-image: some-func(yellowgreen 40%, gold 0deg 75% , #f06 0deg);
+}
+
+.test-linear-gradient-ignored {
+	background-image: linear-gradient(90deg, black 25%, black 50%, blue 50%, blue 75%);
+}
+
+.test-conic-gradient-ignored {
+	background-image: conic-gradient(yellowgreen 40%, gold 0deg , gold 75% , #f06 0deg);
+}
-- 
2.33.1

