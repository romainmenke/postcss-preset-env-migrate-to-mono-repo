From 65e50dfeec52c0f293d70589d4717f773811c733 Mon Sep 17 00:00:00 2001
From: romainmenke <romainmenke@gmail.com>
Date: Wed, 17 Nov 2021 19:33:06 +0100
Subject: [PATCH 08/18] revert to previous algorithm

---
 index.js                       | 34 ++++++++++++++--------------------
 test/basic.expect.css          |  4 ++++
 test/basic.preserve.expect.css |  4 ++++
 3 files changed, 22 insertions(+), 20 deletions(-)

diff --git a/index.js b/index.js
index 569546c..1db1683 100644
--- a/index.js
+++ b/index.js
@@ -3,7 +3,7 @@ const Punctuation = require("postcss-values-parser/lib/nodes/Punctuation");
 
 // whether the value has a lab() or lch() matcher
 const gradientRegExp = /(repeating-)?(conic|linear|radial)-gradient\([\W\w]*\)/i;
-const gradientPartsRegExp = /^(repeating-)?(conic|linear|radial)-gradient$/i;
+// const gradientPartsRegExp = /^(repeating-)?(conic|linear|radial)-gradient$/i;
 
 /**
  * Transform double-position gradients in CSS.
@@ -22,34 +22,26 @@ module.exports = function creator(opts) {
 
 			const valueAST = parse(decl.value, { ignoreUnknownWords: true });
 
-			valueAST.walkFuncs((func) => {
-				if (!gradientPartsRegExp.test(func.name)) {
-					return;
-				}
+			valueAST.walkType('func', (func) => {
+				const nodes = func.nodes;
 
-				func.walkNumerics((node, index) => {
-					/** @type {import('postcss-values-parser').ChildNode} */
-					const node1back = Object(func.nodes[index - 1]);
-					/** @type {import('postcss-values-parser').ChildNode} */
-					const node2back = Object(func.nodes[index - 2]);
-					/** @type {import('postcss-values-parser').ChildNode} */
-					const node1next = Object(func.nodes[index + 1]);
+				nodes.slice(0).forEach((node, index, nodes) => {
+					const node1back = Object(nodes[index - 1]);
+					const node2back = Object(nodes[index - 2]);
+					const node1next = Object(nodes[index + 1]);
+
+					const isDoublePositionLength = node2back.type && node1back.type === 'numeric' && node.type === 'numeric';
 
 					// if the argument concludes a double-position gradient
-					if (node2back.type && node1back.type === 'numeric') {
+					if (isDoublePositionLength) {
 						// insert the fallback colors
 						const color = node2back.clone();
-						const comma = new Punctuation({
-							value: ',',
-							raws: node1next.type === 'punctuation' && node1next.value === ','
-								? Object.assign({}, node1next.clone().raws)
-								: { before: '', after: '' }
-						});
+						const comma = new Punctuation({ value: ',', raws: isPunctuationCommaNode(node1next) ? node1next.clone().raws : { before: '', after: '' } })
 
 						func.insertBefore(node, [comma, color]);
 					}
 				})
-			})
+			});
 
 			const modifiedValue = String(valueAST);
 
@@ -62,3 +54,5 @@ module.exports = function creator(opts) {
 }
 
 module.exports.postcss = true;
+
+const isPunctuationCommaNode = node => node.type === 'punctuation' && node.value === ','
diff --git a/test/basic.expect.css b/test/basic.expect.css
index 6bf5163..34a118a 100644
--- a/test/basic.expect.css
+++ b/test/basic.expect.css
@@ -19,3 +19,7 @@
 .test-conic-gradient-ignored {
 	background-image: conic-gradient(yellowgreen 40%, gold 0deg , gold 75% , #f06 0deg);
 }
+
+.test-linear-gradient-loop {
+	background-image: linear-gradient(135deg, rgba(255, 255, 255, 0.25) 25%, transparent);
+}
diff --git a/test/basic.preserve.expect.css b/test/basic.preserve.expect.css
index 9c5363b..afebbf2 100644
--- a/test/basic.preserve.expect.css
+++ b/test/basic.preserve.expect.css
@@ -17,3 +17,7 @@
 .test-conic-gradient-ignored {
 	background-image: conic-gradient(yellowgreen 40%, gold 0deg , gold 75% , #f06 0deg);
 }
+
+.test-linear-gradient-loop {
+	background-image: linear-gradient(135deg, rgba(255, 255, 255, 0.25) 25%, transparent);
+}
-- 
2.33.1

