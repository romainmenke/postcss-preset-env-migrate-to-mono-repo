From 5684177a527724a174c5c35a6bd42704942aba5d Mon Sep 17 00:00:00 2001
From: Jonathan Neal <jonathantneal@hotmail.com>
Date: Mon, 15 Jun 2015 23:40:12 -0400
Subject: [PATCH 13/30] Update plugin

Added: Support for complex uses
Added: Code documentation
Changed: Coding conventions
---
 .eslintrc    |  2 --
 index.js     | 62 +++++++++++++++++++++++++++++++++-------------------
 test/test.js | 40 ++++++++++++++++++++++++++++-----
 3 files changed, 73 insertions(+), 31 deletions(-)

diff --git a/.eslintrc b/.eslintrc
index 1031b9d..45b5afc 100644
--- a/.eslintrc
+++ b/.eslintrc
@@ -4,11 +4,9 @@
 		"no-underscore-dangle":  [0],
 		"no-reserved-keys":      [2],
 		"no-multi-spaces":       [0],
-		"no-extra-parens":       [2],
 		"no-unused-vars":        [2],
 		"no-loop-func":          [0],
 		"key-spacing":           [0],
-		"max-len":               [2],
 		"strict":                [0],
 		"indent":                [1, "tab"],
 		"quotes":                [2, "single", "avoid-escape"],
diff --git a/index.js b/index.js
index 6f17ba6..36bf789 100644
--- a/index.js
+++ b/index.js
@@ -2,34 +2,50 @@ var postcss = require('postcss');
 var postcssSelectorParser = require('postcss-selector-parser');
 
 module.exports = postcss.plugin('postcss-pseudo-class-any-link', function (opts) {
-	var pseudoValue = ':' + (opts && opts.prefix ? '-' + opts.prefix + '-' : '') + 'any-link';
-	var pseudoFallbackValues = [':link', ':visited'];
+	// cache the any-link value
+	var valueAnyLink = ':' + (opts && opts.prefix ? '-' + opts.prefix + '-' : '') + 'any-link';
 
-	function eachRule(rule) {
-		rule.selector = postcssSelectorParser(function (selectors) {
-			selectors.each(function (selector, index) {
-				var originalIndex = index;
+	return function (css) {
+		// for each rule
+		css.eachRule(function (rule) {
+			// update the selector
+			rule.selector = postcssSelectorParser(function (selectors) {
+				// cache variables
+				var node;
+				var nodeIndex;
+				var selector;
+				var selectorLink;
+				var selectorVisited;
 
-				pseudoFallbackValues.forEach(function (pseudoFallbackValue) {
-					var clone = selector.clone();
+				// cache the selector index
+				var selectorIndex = -1;
 
-					clone.eachPseudo(function (pseudo) {
-						if (pseudo.value === pseudoValue) {
-							pseudo.value = pseudoFallbackValue;
+				// for each selector
+				while ((selector = selectors.nodes[++selectorIndex])) {
+					// reset the node index
+					nodeIndex = -1;
 
-							selectors.nodes.splice(++index, 0, clone);
-						}
-					});
-				});
+					// for each node
+					while ((node = selector.nodes[++nodeIndex])) {
+						// if the node value matches the any-link value
+						if (node.value === valueAnyLink) {
+							// clone the selector
+							selectorLink = selector.clone();
+							selectorVisited = selector.clone();
 
-				if (originalIndex !== index) {
-					selector.removeSelf();
-				}
-			});
-		}).process(rule.selector).result;
-	}
+							// update the matching clone values
+							selectorLink.nodes[nodeIndex].value = ':link';
+							selectorVisited.nodes[nodeIndex].value = ':visited';
 
-	return function (css) {
-		css.eachRule(eachRule);
+							// replace the selector with the clones and roll back the selector index
+							selectors.nodes.splice(selectorIndex--, 1, selectorLink, selectorVisited);
+
+							// stop updating the selector
+							break;
+						}
+					}
+				}
+			}).process(rule.selector).result;
+		});
 	};
 });
diff --git a/test/test.js b/test/test.js
index ae93d07..a0d1b78 100644
--- a/test/test.js
+++ b/test/test.js
@@ -14,6 +14,40 @@ var test = function (input, output, opts, done) {
 };
 
 describe('postcss-pseudo-class-any-link', function () {
+	// standard tests
+	it(':any-link', function (done) {
+		test(':any-link { background: blue; }', ':link,:visited { background: blue; }', {}, done);
+	});
+
+	it(':any-link, ul a:any-link > span', function (done) {
+		test(':any-link, ul a:any-link > span { background: blue; }', ':link,:visited, ul a:link > span, ul a:visited > span { background: blue; }', {}, done);
+	});
+
+	it(':any-link :any-link', function (done) {
+		test(':any-link :any-link { background: blue; }', ':link :link,:link :visited,:visited :link,:visited :visited { background: blue; }', {}, done);
+	});
+
+	// custom prefix tests
+	it(':any-link (with "foo" prefix)', function (done) {
+		test(':any-link { background: blue; }', ':any-link { background: blue; }', { prefix: 'foo' }, done);
+	});
+
+	it(':-foo-any-link (with no prefix)', function (done) {
+		test(':-foo-any-link { background: blue; }', ':-foo-any-link { background: blue; }', {}, done);
+	});
+
+	it(':-foo-any-link (with "foo" prefix)', function (done) {
+		test(':-foo-any-link { background: blue; }', ':link,:visited { background: blue; }', { prefix: 'foo' }, done);
+	});
+
+	it(':-foo-any-link, ul a:-foo-any-link > span (with "foo" prefix)', function (done) {
+		test(':-foo-any-link, ul a:-foo-any-link > span { background: blue; }', ':link,:visited, ul a:link > span, ul a:visited > span { background: blue; }', { prefix: 'foo' }, done);
+	});
+
+	it(':-foo-any-link :-foo-any-link (with "foo" prefix)', function (done) {
+		test(':-foo-any-link :-foo-any-link { background: blue; }', ':link :link,:link :visited,:visited :link,:visited :visited { background: blue; }', { prefix: 'foo' }, done);
+	});
+
 	it(':any-link transforms to :link and :visited', function (done) {
 		test('ul a:any-link > span { background: yellow; }', 'ul a:link > span,ul a:visited > span { background: yellow; }', {}, done);
 	});
@@ -23,10 +57,4 @@ describe('postcss-pseudo-class-any-link', function () {
 			prefix: 'foo'
 		}, done);
 	});
-
-	it(':-foo-any-link transforms to :link and :visited { prefix: "foo" }', function (done) {
-		test('ul a:-foo-any-link > span { background: yellow; }', 'ul a:link > span,ul a:visited > span { background: yellow; }', {
-			prefix: 'foo'
-		}, done);
-	});
 });
-- 
2.33.1

