From 3c97d97d5d173728ba242a4e1495fcf943553aca Mon Sep 17 00:00:00 2001
From: Jonathan Neal <jonathantneal@hotmail.com>
Date: Mon, 7 May 2018 23:58:17 -0400
Subject: [PATCH 25/30] 5.0.0

---
 .appveyor.yml                        |  18 +++
 .gitignore                           |   6 +-
 .rollup.js                           |  16 +++
 .tape.js                             |   6 +
 .travis.yml                          |   6 +
 CHANGELOG.md                         |   8 +-
 CONTRIBUTING.md                      |  79 ++++++-------
 LICENSE.md                           | 138 ++++++++++++-----------
 README.md                            | 163 +++++++++++++++++----------
 index.js                             | 114 ++++++++++---------
 package.json                         |  38 ++++---
 test/basic.expect.css                |  13 +++
 test/basic.preserve-false.expect.css |  13 +++
 13 files changed, 384 insertions(+), 234 deletions(-)
 create mode 100644 .appveyor.yml
 create mode 100644 .rollup.js
 create mode 100644 test/basic.preserve-false.expect.css

diff --git a/.appveyor.yml b/.appveyor.yml
new file mode 100644
index 0000000..acbf8a5
--- /dev/null
+++ b/.appveyor.yml
@@ -0,0 +1,18 @@
+# https://www.appveyor.com/docs/appveyor-yml
+
+environment:
+  matrix:
+    - nodejs_version: 4
+
+version: "{build}"
+build: off
+deploy: off
+
+install:
+  - ps: Install-Product node $env:nodejs_version
+  - npm install --ignore-scripts
+
+test_script:
+  - node --version
+  - npm --version
+  - cmd: "npm test"
diff --git a/.gitignore b/.gitignore
index 995098a..de73e5a 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1,10 +1,12 @@
 node_modules
+index.*.js
 package-lock.json
+*.log*
+*.result.css
 .*
 !.appveyor.yml
 !.editorconfig
 !.gitignore
+!.rollup.js
 !.tape.js
 !.travis.yml
-*.log*
-*.result.css
diff --git a/.rollup.js b/.rollup.js
new file mode 100644
index 0000000..0436758
--- /dev/null
+++ b/.rollup.js
@@ -0,0 +1,16 @@
+import babel from 'rollup-plugin-babel';
+
+export default {
+	input: 'index.js',
+	output: [
+		{ file: 'index.cjs.js', format: 'cjs' },
+		{ file: 'index.es.js', format: 'es' }
+	],
+	plugins: [
+		babel({
+			presets: [
+				['env', { modules: false, targets: { node: 4 } }]
+			]
+		})
+	]
+};
diff --git a/.tape.js b/.tape.js
index 15007b9..6d365d8 100644
--- a/.tape.js
+++ b/.tape.js
@@ -2,6 +2,12 @@ module.exports = {
 	'postcss-pseudo-class-any-link': {
 		'basic': {
 			message: 'supports basic usage'
+		},
+		'basic:preserve-false': {
+			message: 'supports { preserve: false } usage',
+			options: {
+				preserve: false
+			}
 		}
 	}
 };
diff --git a/.travis.yml b/.travis.yml
index 8524235..c564664 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -1,3 +1,9 @@
+# https://docs.travis-ci.com/user/travis-lint
+
 language: node_js
+
 node_js:
   - 4
+
+install:
+  - npm install --ignore-scripts
diff --git a/CHANGELOG.md b/CHANGELOG.md
index 24f5a6d..2f24843 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,4 +1,10 @@
-# Changes to :any-link
+# Changes to PostCSS Pseudo Class Any Link
+
+### 5.0.0 (May 7, 2018)
+
+- Updated: `postcss-selector-parser` to v4.0.0 (major)
+- Updated: `postcss` to v6.0.22 (patch)
+- Changed: Preserves `:any-link` by default
 
 ### 4.0.0 (May 10, 2017)
 
diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md
index d245cc3..fb2eebb 100644
--- a/CONTRIBUTING.md
+++ b/CONTRIBUTING.md
@@ -1,4 +1,4 @@
-# Contributing to :any-link
+# Contributing to PostCSS Pseudo Class Any Link
 
 You want to help? You rock! Now, take a moment to be sure your contributions
 make sense to everyone else.
@@ -14,51 +14,52 @@ Remember, a bug is a _demonstrable problem_ caused by _our_ code.
 
 ## Submitting Pull Requests
 
-Pull requests are the greatest contributions, so be sure they are focused in 
-scope, and do avoid unrelated commits.
+Pull requests are the greatest contributions, so be sure they are focused in
+scope and avoid unrelated commits.
 
-1. To begin, [fork this project], clone your fork, and add our upstream.
-	```bash
-	# Clone your fork of the repo into the current directory
-	git clone https://github.com/<your-user>/postcss-pseudo-class-any-link
-	# Navigate to the newly cloned directory
-	cd postcss-pseudo-class-any-link
-	# Assign the original repo to a remote called "upstream"
-	git remote add upstream https://github.com/jonathantneal/postcss-pseudo-class-any-link
-	# Install the tools necessary for development
-	npm install
-	```
+1. To begin; [fork this project], clone your fork, and add our upstream.
+   ```bash
+   # Clone your fork of the repo into the current directory
+   git clone git@github.com:YOUR_USER/postcss-pseudo-class-any-link.git
 
-2. Create a branch for your feature or fix:
-	```bash
-	# Move into a new branch for a feature
-	git checkout -b feature/thing
-	```
-	```bash
-	# Move into a new branch for a fix
-	git checkout -b fix/something
-	```
+   # Navigate to the newly cloned directory
+   cd postcss-pseudo-class-any-link
+
+   # Assign the original repo to a remote called "upstream"
+   git remote add upstream git@github.com:jonathantneal/postcss-pseudo-class-any-link.git
 
-3. Be sure your code follows our practices.
-	```bash
-	# Test current code
-	npm run test
-	```
+   # Install the tools necessary for testing
+   npm install
+   ```
+
+2. Create a branch for your feature or fix:
+   ```bash
+   # Move into a new branch for your feature
+   git checkout -b feature/thing
+   ```
+   ```bash
+   # Move into a new branch for your fix
+   git checkout -b fix/something
+   ```
 
-4. Push your branch up to your fork:
-	```bash
-	# Push a feature branch
-	git push origin feature/thing
-	```
-	```bash
-	# Push a fix branch
-	git push origin fix/something
-	```
+3. If your code follows our practices, then push your feature branch:
+   ```bash
+   # Test current code
+   npm test
+   ```
+   ```bash
+   # Push the branch for your new feature
+   git push origin feature/thing
+   ```
+   ```bash
+   # Or, push the branch for your update
+   git push origin update/something
+   ```
 
-5. Now [open a pull request] with a clear title and description.
+That’s it! Now [open a pull request] with a clear title and description.
 
 [already been reported]: issues
 [fork this project]:     fork
-[live example]:          http://codepen.io/pen
+[live example]:          https://codepen.io/pen
 [open a pull request]:   https://help.github.com/articles/using-pull-requests/
 [reduced test case]:     https://css-tricks.com/reduced-test-cases/
diff --git a/LICENSE.md b/LICENSE.md
index 34f902f..0bc1fa7 100644
--- a/LICENSE.md
+++ b/LICENSE.md
@@ -27,80 +27,82 @@ Copyright and Related Rights in the Work and the meaning and intended legal
 effect of CC0 on those rights.
 
 1. Copyright and Related Rights. A Work made available under CC0 may be
-	 protected by copyright and related or neighboring rights (“Copyright and
-	 Related Rights”). Copyright and Related Rights include, but are not limited
-	 to, the following:
-	1. the right to reproduce, adapt, distribute, perform, display,
-		 communicate, and translate a Work;
-	2. moral rights retained by the original author(s) and/or performer(s);
-	3. publicity and privacy rights pertaining to a person’s image or likeness
-		 depicted in a Work;
-	4. rights protecting against unfair competition in regards to a Work,
-		 subject to the limitations in paragraph 4(i), below;
-	5. rights protecting the extraction, dissemination, use and reuse of data
-		 in a Work;
-	6. database rights (such as those arising under Directive 96/9/EC of the
-		 European Parliament and of the Council of 11 March 1996 on the legal
-		 protection of databases, and under any national implementation thereof,
-		 including any amended or successor version of such directive); and
-	7. other similar, equivalent or corresponding rights throughout the world
-		 based on applicable law or treaty, and any national implementations
-		 thereof.
+   protected by copyright and related or neighboring rights (“Copyright and
+   Related Rights”). Copyright and Related Rights include, but are not limited
+   to, the following:
+   1. the right to reproduce, adapt, distribute, perform, display, communicate,
+      and translate a Work;
+   2. moral rights retained by the original author(s) and/or performer(s);
+   3. publicity and privacy rights pertaining to a person’s image or likeness
+      depicted in a Work;
+   4. rights protecting against unfair competition in regards to a Work,
+      subject to the limitations in paragraph 4(i), below;
+   5. rights protecting the extraction, dissemination, use and reuse of data in
+      a Work;
+   6. database rights (such as those arising under Directive 96/9/EC of the
+      European Parliament and of the Council of 11 March 1996 on the legal
+      protection of databases, and under any national implementation thereof,
+      including any amended or successor version of such directive); and
+   7. other similar, equivalent or corresponding rights throughout the world
+      based on applicable law or treaty, and any national implementations
+      thereof.
 
 2. Waiver. To the greatest extent permitted by, but not in contravention of,
-applicable law, Affirmer hereby overtly, fully, permanently, irrevocably and
-unconditionally waives, abandons, and surrenders all of Affirmer’s Copyright
-and Related Rights and associated claims and causes of action, whether now
-known or unknown (including existing as well as future claims and causes of
-action), in the Work (i) in all territories worldwide, (ii) for the maximum
-duration provided by applicable law or treaty (including future time
-extensions), (iii) in any current or future medium and for any number of
-copies, and (iv) for any purpose whatsoever, including without limitation
-commercial, advertising or promotional purposes (the “Waiver”). Affirmer makes
-the Waiver for the benefit of each member of the public at large and to the
-detriment of Affirmer’s heirs and successors, fully intending that such Waiver
-shall not be subject to revocation, rescission, cancellation, termination, or
-any other legal or equitable action to disrupt the quiet enjoyment of the Work
-by the public as contemplated by Affirmer’s express Statement of Purpose.
+   applicable law, Affirmer hereby overtly, fully, permanently, irrevocably and
+   unconditionally waives, abandons, and surrenders all of Affirmer’s Copyright
+   and Related Rights and associated claims and causes of action, whether now
+   known or unknown (including existing as well as future claims and causes of
+   action), in the Work (i) in all territories worldwide, (ii) for the maximum
+   duration provided by applicable law or treaty (including future time
+   extensions), (iii) in any current or future medium and for any number of
+   copies, and (iv) for any purpose whatsoever, including without limitation
+   commercial, advertising or promotional purposes (the “Waiver”). Affirmer
+   makes the Waiver for the benefit of each member of the public at large and
+   to the detriment of Affirmer’s heirs and successors, fully intending that
+   such Waiver shall not be subject to revocation, rescission, cancellation,
+   termination, or any other legal or equitable action to disrupt the quiet
+   enjoyment of the Work by the public as contemplated by Affirmer’s express
+   Statement of Purpose.
 
 3. Public License Fallback. Should any part of the Waiver for any reason be
-judged legally invalid or ineffective under applicable law, then the Waiver
-shall be preserved to the maximum extent permitted taking into account
-Affirmer’s express Statement of Purpose. In addition, to the extent the Waiver
-is so judged Affirmer hereby grants to each affected person a royalty-free, non
-transferable, non sublicensable, non exclusive, irrevocable and unconditional
-license to exercise Affirmer’s Copyright and Related Rights in the Work (i) in
-all territories worldwide, (ii) for the maximum duration provided by applicable
-law or treaty (including future time extensions), (iii) in any current or
-future medium and for any number of copies, and (iv) for any purpose
-whatsoever, including without limitation commercial, advertising or promotional
-purposes (the “License”). The License shall be deemed effective as of the date
-CC0 was applied by Affirmer to the Work. Should any part of the License for any
-reason be judged legally invalid or ineffective under applicable law, such
-partial invalidity or ineffectiveness shall not invalidate the remainder of the
-License, and in such case Affirmer hereby affirms that he or she will not (i)
-exercise any of his or her remaining Copyright and Related Rights in the Work
-or (ii) assert any associated claims and causes of action with respect to the
-Work, in either case contrary to Affirmer’s express Statement of Purpose.
+   judged legally invalid or ineffective under applicable law, then the Waiver
+   shall be preserved to the maximum extent permitted taking into account
+   Affirmer’s express Statement of Purpose. In addition, to the extent the
+   Waiver is so judged Affirmer hereby grants to each affected person a
+   royalty-free, non transferable, non sublicensable, non exclusive,
+   irrevocable and unconditional license to exercise Affirmer’s Copyright and
+   Related Rights in the Work (i) in all territories worldwide, (ii) for the
+   maximum duration provided by applicable law or treaty (including future time
+   extensions), (iii) in any current or future medium and for any number of
+   copies, and (iv) for any purpose whatsoever, including without limitation
+   commercial, advertising or promotional purposes (the “License”). The License
+   shall be deemed effective as of the date CC0 was applied by Affirmer to the
+   Work. Should any part of the License for any reason be judged legally
+   invalid or ineffective under applicable law, such partial invalidity or
+   ineffectiveness shall not invalidate the remainder of the License, and in
+   such case Affirmer hereby affirms that he or she will not (i) exercise any
+   of his or her remaining Copyright and Related Rights in the Work or (ii)
+   assert any associated claims and causes of action with respect to the Work,
+   in either case contrary to Affirmer’s express Statement of Purpose.
 
 4. Limitations and Disclaimers.
-		1. No trademark or patent rights held by Affirmer are waived, abandoned,
-			 surrendered, licensed or otherwise affected by this document.
-		2. Affirmer offers the Work as-is and makes no representations or
-			 warranties of any kind concerning the Work, express, implied, statutory
-			 or otherwise, including without limitation warranties of title,
-			 merchantability, fitness for a particular purpose, non infringement, or
-			 the absence of latent or other defects, accuracy, or the present or
-			 absence of errors, whether or not discoverable, all to the greatest
-			 extent permissible under applicable law.
-		3. Affirmer disclaims responsibility for clearing rights of other persons
-			 that may apply to the Work or any use thereof, including without
-			 limitation any person’s Copyright and Related Rights in the Work.
-			 Further, Affirmer disclaims responsibility for obtaining any necessary
-			 consents, permissions or other rights required for any use of the Work.
-		4. Affirmer understands and acknowledges that Creative Commons is not a
-			 party to this document and has no duty or obligation with respect to
-			 this CC0 or use of the Work.
+   1. No trademark or patent rights held by Affirmer are waived, abandoned,
+      surrendered, licensed or otherwise affected by this document.
+   2. Affirmer offers the Work as-is and makes no representations or warranties
+      of any kind concerning the Work, express, implied, statutory or
+      otherwise, including without limitation warranties of title,
+      merchantability, fitness for a particular purpose, non infringement, or
+      the absence of latent or other defects, accuracy, or the present or
+      absence of errors, whether or not discoverable, all to the greatest
+      extent permissible under applicable law.
+   3. Affirmer disclaims responsibility for clearing rights of other persons
+      that may apply to the Work or any use thereof, including without
+      limitation any person’s Copyright and Related Rights in the Work.
+      Further, Affirmer disclaims responsibility for obtaining any necessary
+      consents, permissions or other rights required for any use of the Work.
+   4. Affirmer understands and acknowledges that Creative Commons is not a
+      party to this document and has no duty or obligation with respect to this
+      CC0 or use of the Work.
 
 For more information, please see
 http://creativecommons.org/publicdomain/zero/1.0/.
diff --git a/README.md b/README.md
index 091b46a..96b8a5c 100644
--- a/README.md
+++ b/README.md
@@ -1,33 +1,39 @@
-# :any-link [<img src="https://postcss.github.io/postcss/logo.svg" alt="PostCSS Logo" width="90" height="90" align="right">][postcss]
+# PostCSS Pseudo Class Any Link [<img src="https://postcss.github.io/postcss/logo.svg" alt="PostCSS Logo" width="90" height="90" align="right">][postcss]
 
 [![NPM Version][npm-img]][npm-url]
 [![CSS Standard Status][css-img]][css-url]
 [![Build Status][cli-img]][cli-url]
+[![Windows Build Status][win-img]][win-url]
 [![Support Chat][git-img]][git-url]
 
-[:any-link] lets you to use the proposed [`:any-link`] pseudo-class in CSS.
+[PostCSS Pseudo Class Any Link] lets you `:any-link` pseudo-class in CSS,
+following the [Selectors] specification.
 
-`:any-link` simplifies selectors targeting links, as the naming of `:link` is misleading; it specifically means unvisited links only, rather than all links.
-
-```css
+```pcss
 nav :any-link > span {
-	background-color: yellow;
+  background-color: yellow;
 }
 
 /* becomes */
 
 nav :link > span, nav :visited > span {
-	background-color: yellow;
+  background-color: yellow;
+}
+
+nav :any-link > span {
+  background-color: yellow;
 }
 ```
 
-From the [proposal]:
+From the [proposal][Selectors]:
 
-> The [`:any-link`] pseudo-class represents an element that acts as the source anchor of a hyperlink. It matches an element if the element would match [`:link`] or [`:visited`].
+> The `:any-link` pseudo-class represents an element that acts as the source
+  anchor of a hyperlink. It matches an element if the element would match
+  `:link` or `:visited`.
 
 ## Usage
 
-Add [:any-link] to your build tool:
+Add [PostCSS Pseudo Class Any Link] to your build tool:
 
 ```bash
 npm install postcss-pseudo-class-any-link --save-dev
@@ -35,10 +41,12 @@ npm install postcss-pseudo-class-any-link --save-dev
 
 #### Node
 
-Use [:any-link] to process your CSS:
+Use [PostCSS Pseudo Class Any Link] to process your CSS:
 
 ```js
-require('postcss-pseudo-class-any-link').process(YOUR_CSS);
+import postcssPseudoClassAnyLink from 'postcss-pseudo-class-any-link';
+
+postcssPseudoClassAnyLink.process(YOUR_CSS, /* processOptions */, /* pluginOptions */);
 ```
 
 #### PostCSS
@@ -49,14 +57,51 @@ Add [PostCSS] to your build tool:
 npm install postcss --save-dev
 ```
 
-Use [:any-link] as a plugin:
+Use [PostCSS Pseudo Class Any Link] as a plugin:
 
 ```js
+import postcss from 'gulp-postcss';
+import postcssPseudoClassAnyLink from 'postcss-pseudo-class-any-link';
+
 postcss([
-	require('postcss-pseudo-class-any-link')()
+  postcssPseudoClassAnyLink(/* pluginOptions */)
 ]).process(YOUR_CSS);
 ```
 
+#### Webpack
+
+Add [PostCSS Loader] to your build tool:
+
+```bash
+npm install postcss-loader --save-dev
+```
+
+Use [PostCSS Pseudo Class Any Link] in your Webpack configuration:
+
+```js
+import postcssPseudoClassAnyLink from 'postcss-pseudo-class-any-link';
+
+module.exports = {
+  module: {
+    rules: [
+      {
+        test: /\.css$/,
+        use: [
+          'style-loader',
+          { loader: 'css-loader', options: { importLoaders: 1 } },
+          { loader: 'postcss-loader', options: {
+            ident: 'postcss',
+            plugins: () => [
+              postcssPseudoClassAnyLink(/* pluginOptions */)
+            ]
+          } }
+        ]
+      }
+    ]
+  }
+}
+```
+
 #### Gulp
 
 Add [Gulp PostCSS] to your build tool:
@@ -65,20 +110,19 @@ Add [Gulp PostCSS] to your build tool:
 npm install gulp-postcss --save-dev
 ```
 
-Use [:any-link] in your Gulpfile:
+Use [PostCSS Pseudo Class Any Link] in your Gulpfile:
 
 ```js
-var postcss = require('gulp-postcss');
-
-gulp.task('css', function () {
-	return gulp.src('./src/*.css').pipe(
-		postcss([
-			require('postcss-pseudo-class-any-link')()
-		])
-	).pipe(
-		gulp.dest('.')
-	);
-});
+import postcss from 'gulp-postcss';
+import postcssPseudoClassAnyLink from 'postcss-pseudo-class-any-link';
+
+gulp.task('css', () => gulp.src('./src/*.css').pipe(
+  postcss([
+    postcssPseudoClassAnyLink(/* pluginOptions */)
+  ])
+).pipe(
+  gulp.dest('.')
+));
 ```
 
 #### Grunt
@@ -89,59 +133,64 @@ Add [Grunt PostCSS] to your build tool:
 npm install grunt-postcss --save-dev
 ```
 
-Use [:any-link] in your Gruntfile:
+Use [PostCSS Pseudo Class Any Link] in your Gruntfile:
 
 ```js
+import postcssPseudoClassAnyLink from 'postcss-pseudo-class-any-link';
+
 grunt.loadNpmTasks('grunt-postcss');
 
 grunt.initConfig({
-	postcss: {
-		options: {
-			use: [
-				require('postcss-pseudo-class-any-link')()
-			]
-		},
-		dist: {
-			src: '*.css'
-		}
-	}
+  postcss: {
+    options: {
+      use: [
+       postcssPseudoClassAnyLink(/* pluginOptions */)
+      ]
+    },
+    dist: {
+      src: '*.css'
+    }
+  }
 });
 ```
 
-### Alternatives
+## Options
 
-Here are a few other ways to simulate the effect of [PostCSS Pseudo-Class Any-Link].
+### preserve
 
-```css
-/* Use @custom-selector; supported nowhere yet */
+The `preserve` option determines whether the original `:any-link` rule is
+preserved. By default, it is preserved.
 
-@custom-selector :--any-link :link, :visited;
-
-:--any-link { /* ... */ }
-
-/* Use :matches; supported in Firefox 4+, Chrome 12+, Opera 15+, Safari 5.1+ */
+```js
+postcssPseudoClassAnyLink({ preserve: false })
+```
 
-:matches(:link, :visited) { /* ... */ }
+```pcss
+nav :any-link > span {
+  background-color: yellow;
+}
 
-/* Use :link and :visited; supported everywhere */
+/* becomes */
 
-:link, :visited { /* ... */ }
+nav :link > span, nav :visited > span {
+  background-color: yellow;
+}
 ```
 
 [cli-img]: https://img.shields.io/travis/jonathantneal/postcss-pseudo-class-any-link.svg
 [cli-url]: https://travis-ci.org/jonathantneal/postcss-pseudo-class-any-link
-[css-img]: https://jonathantneal.github.io/cssdb/badge/any-link-pseudo-class.svg
-[css-url]: https://jonathantneal.github.io/cssdb/#any-link-pseudo-class
-[git-img]: https://img.shields.io/badge/chat-gitter-blue.svg
+[css-img]: https://cssdb.org/badge/any-link-pseudo-class.svg
+[css-url]: https://cssdb.org/#any-link-pseudo-class
+[git-img]: https://img.shields.io/badge/support-chat-blue.svg
 [git-url]: https://gitter.im/postcss/postcss
 [npm-img]: https://img.shields.io/npm/v/postcss-pseudo-class-any-link.svg
 [npm-url]: https://www.npmjs.com/package/postcss-pseudo-class-any-link
+[win-img]: https://img.shields.io/appveyor/ci/jonathantneal/postcss-pseudo-class-any-link.svg
+[win-url]: https://ci.appveyor.com/project/jonathantneal/postcss-pseudo-class-any-link
 
-[`:any-link`]: http://dev.w3.org/csswg/selectors/#any-link-pseudo
-[`:link`]: http://dev.w3.org/csswg/selectors/#link-pseudo
-[`:visited`]: http://dev.w3.org/csswg/selectors/#visited-pseudo
-[:any-link]: https://github.com/jonathantneal/postcss-pseudo-class-any-link
 [Gulp PostCSS]: https://github.com/postcss/gulp-postcss
 [Grunt PostCSS]: https://github.com/nDmitry/grunt-postcss
 [PostCSS]: https://github.com/postcss/postcss
-[proposal]: http://dev.w3.org/csswg/selectors/
+[PostCSS Loader]: https://github.com/postcss/postcss-loader
+[PostCSS Pseudo Class Any Link]: https://github.com/jonathantneal/postcss-pseudo-class-any-link
+[Selectors]: https://www.w3.org/TR/selectors-4/#the-any-link-pseudo
diff --git a/index.js b/index.js
index 94d3f59..374beaf 100644
--- a/index.js
+++ b/index.js
@@ -1,55 +1,67 @@
-'use strict';
-
-// tooling
-const postcss = require('postcss');
-const parser = require('postcss-selector-parser');
-
-// plugin
-module.exports = postcss.plugin('postcss-pseudo-class-any-link', () => (css) => {
-	// walk each matching rule
-	css.walkRules(/:any-link/, (rule) => {
-		const rawSelector = rule.raws.selector && rule.raws.selector.raw || rule.selector;
-
-		// workaround for https://github.com/postcss/postcss-selector-parser/issues/28#issuecomment-171910556
-		if (rawSelector[rawSelector.length - 1] !== ':') {
-			// update the selector
-			rule.selector = parser((selectors) => {
-				// cache variables
-				let node;
-				let nodeIndex;
-				let selector;
-				let selectorLink;
-				let selectorVisited;
-
-				// cache the selector index
-				let selectorIndex = -1;
-
-				// for each selector
-				while (selector = selectors.nodes[++selectorIndex]) {
-					// reset the node index
-					nodeIndex = -1;
-
-					// for each node
-					while (node = selector.nodes[++nodeIndex]) {
-						// if the node value matches the any-link value
-						if (node.value === ':any-link') {
-							// clone the selector
-							selectorLink = selector.clone();
-							selectorVisited = selector.clone();
-
-							// update the matching clone values
-							selectorLink.nodes[nodeIndex].value = ':link';
-							selectorVisited.nodes[nodeIndex].value = ':visited';
-
-							// replace the selector with the clones and roll back the selector index
-							selectors.nodes.splice(selectorIndex--, 1, selectorLink, selectorVisited);
-
-							// stop updating the selector
-							break;
+import postcss from 'postcss';
+import parser from 'postcss-selector-parser';
+
+const anyAnyLinkMatch = /:any-link/;
+
+export default postcss.plugin('postcss-pseudo-class-any-link', opts => {
+	const preserve = 'preserve' in Object(opts) ? Boolean(opts.preserve) : true;
+
+	return root => {
+		// walk each matching rule
+		root.walkRules(anyAnyLinkMatch, rule => {
+			const rawSelector = rule.raws.selector && rule.raws.selector.raw || rule.selector;
+
+			// workaround for https://github.com/postcss/postcss-selector-parser/issues/28#issuecomment-171910556
+			if (rawSelector[rawSelector.length - 1] !== ':') {
+				// update the selector
+				const updatedSelector = parser(selectors => {
+					// cache variables
+					let node;
+					let nodeIndex;
+					let selector;
+					let selectorLink;
+					let selectorVisited;
+
+					// cache the selector index
+					let selectorIndex = -1;
+
+					// for each selector
+					while (selector = selectors.nodes[++selectorIndex]) {
+						// reset the node index
+						nodeIndex = -1;
+
+						// for each node
+						while (node = selector.nodes[++nodeIndex]) {
+							// if the node value matches the any-link value
+							if (node.value === ':any-link') {
+								// clone the selector
+								selectorLink = selector.clone();
+								selectorVisited = selector.clone();
+
+								// update the matching clone values
+								selectorLink.nodes[nodeIndex].value = ':link';
+								selectorVisited.nodes[nodeIndex].value = ':visited';
+
+								// replace the selector with the clones and roll back the selector index
+								selectors.nodes.splice(selectorIndex--, 1, selectorLink, selectorVisited);
+
+								// stop updating the selector
+								break;
+							}
 						}
 					}
+				}).processSync(rawSelector);
+
+				if (updatedSelector !== rawSelector) {
+					if (preserve) {
+						rule.cloneBefore({
+							selector: updatedSelector
+						});
+					} else {
+						rule.selector = updatedSelector;
+					}
 				}
-			}).process(rawSelector).result;
-		}
-	});
+			}
+		})
+	};
 });
diff --git a/package.json b/package.json
index c1fdcc2..bac6750 100644
--- a/package.json
+++ b/package.json
@@ -1,41 +1,47 @@
 {
   "name": "postcss-pseudo-class-any-link",
-  "version": "4.0.0",
-  "description": "Use the proposed :any-link pseudo-class in CSS",
+  "version": "5.0.0",
+  "description": "Use the :any-link pseudo-class in CSS",
   "author": "Jonathan Neal <jonathantneal@hotmail.com>",
   "license": "CC0-1.0",
   "repository": "jonathantneal/postcss-pseudo-class-any-link",
   "homepage": "https://github.com/jonathantneal/postcss-pseudo-class-any-link#readme",
   "bugs": "https://github.com/jonathantneal/postcss-pseudo-class-any-link/issues",
-  "main": "index.js",
+  "main": "index.cjs.js",
+  "module": "index.es.js",
   "files": [
-    "index.js"
+    "index.cjs.js",
+    "index.es.js"
   ],
   "scripts": {
-    "clean": "git clean -X -d -f",
-    "prepublish": "npm test",
+    "prepublishOnly": "npm test",
+    "pretest": "rollup -c .rollup.js --silent",
     "test": "echo 'Running tests...'; npm run test:js && npm run test:tape",
-    "test:js": "eslint *.js --cache --ignore-pattern .gitignore",
+    "test:ec": "echint --ignore index.*.js test",
+    "test:js": "eslint *.js --cache --ignore-path .gitignore --quiet",
     "test:tape": "postcss-tape"
   },
   "engines": {
     "node": ">=4.0.0"
   },
   "dependencies": {
-    "postcss": "^6.0.11",
-    "postcss-selector-parser": "^2.2.3"
+    "postcss": "^6.0.22",
+    "postcss-selector-parser": "^4.0.0"
   },
   "devDependencies": {
-    "eslint": "^4.6.1",
-    "eslint-config-dev": "2.0.0",
-    "postcss-tape": "2.0.1",
-    "pre-commit": "^1.2.2"
+    "babel-core": "^6.26.3",
+    "babel-eslint": "^8.2.3",
+    "babel-preset-env": "^1.6.1",
+    "eslint": "^4.19.1",
+    "eslint-config-dev": "^2.0.0",
+    "postcss-tape": "^2.2.0",
+    "pre-commit": "^1.2.2",
+    "rollup": "^0.58.2",
+    "rollup-plugin-babel": "^3.0.4"
   },
   "eslintConfig": {
     "extends": "dev",
-    "parserOptions": {
-      "sourceType": "module"
-    }
+    "parser": "babel-eslint"
   },
   "keywords": [
     "postcss",
diff --git a/test/basic.expect.css b/test/basic.expect.css
index 806a50e..904d425 100644
--- a/test/basic.expect.css
+++ b/test/basic.expect.css
@@ -2,12 +2,25 @@
 	background: blue;
 }
 
+:any-link {
+	background: blue;
+}
+
 :link,:visited,
 ul a:link > span,
 ul a:visited > span {
 	background: blue;
 }
 
+:any-link,
+ul a:any-link > span {
+	background: blue;
+}
+
 :link :link,:link :visited,:visited :link,:visited :visited {
 	background: blue;
 }
+
+:any-link :any-link {
+	background: blue;
+}
diff --git a/test/basic.preserve-false.expect.css b/test/basic.preserve-false.expect.css
new file mode 100644
index 0000000..806a50e
--- /dev/null
+++ b/test/basic.preserve-false.expect.css
@@ -0,0 +1,13 @@
+:link,:visited {
+	background: blue;
+}
+
+:link,:visited,
+ul a:link > span,
+ul a:visited > span {
+	background: blue;
+}
+
+:link :link,:link :visited,:visited :link,:visited :visited {
+	background: blue;
+}
-- 
2.33.1

