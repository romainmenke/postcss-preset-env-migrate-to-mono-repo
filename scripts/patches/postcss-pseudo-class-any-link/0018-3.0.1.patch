From c2ac7986239e9f447808b16fd211654b09918a7f Mon Sep 17 00:00:00 2001
From: Jonathan Neal <jonathantneal@hotmail.com>
Date: Wed, 14 Dec 2016 10:14:10 -0800
Subject: [PATCH 18/30] 3.0.1

---
 CHANGELOG.md |  5 ++++
 index.js     | 81 ++++++++++++++++++++++++++++------------------------
 package.json |  6 ++--
 3 files changed, 51 insertions(+), 41 deletions(-)

diff --git a/CHANGELOG.md b/CHANGELOG.md
index cff52aa..b8c6669 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,5 +1,10 @@
 # Changes to :any-link
 
+### 3.0.1 (December 8, 2016)
+
+- Updated: Use destructing assignment on plugin options
+- Updated: Use template literals
+
 ### 3.0.0 (December 5, 2016)
 
 - Updated: boilerplate conventions (Node v6.9.1 LTS)
diff --git a/index.js b/index.js
index 2a9c3b7..27df8f2 100644
--- a/index.js
+++ b/index.js
@@ -5,64 +5,69 @@ const parser = require('postcss-selector-parser');
 // plugin
 module.exports = postcss.plugin('postcss-pseudo-class-any-link', ({
 	prefix = ''
-}) => {
+} = {}) => {
 	// dashed prefix
-	const dashedPrefix = prefix ? '-' + prefix + '-' : '';
+	const dashedPrefix = prefix ? `-${ prefix }-` : '';
 
 	// any-link value
 	const anyLinkValue = `:${ dashedPrefix }any-link`;
 
-	// selector pattern
+	// selector matcher
 	const selectorMatch = new RegExp(`${ dashedPrefix }any-link`);
 
 	return (css) => {
-		// for each rule
+		// walk each matching rule
 		css.walkRules(selectorMatch, (rule) => {
 			const rawSelector = rule.raws.selector && rule.raws.selector.raw || rule.selector;
 
 			// workaround for https://github.com/postcss/postcss-selector-parser/issues/28#issuecomment-171910556
-			if (rawSelector[rawSelector.length - 1] === ':') {
-				return;
-			}
-
-			// update the selector
-			rule.selector = parser((selectors) => {
-				// cache variables
-				let node;
-				let nodeIndex;
-				let selector;
-				let selectorLink;
-				let selectorVisited;
+			if (rawSelector[rawSelector.length - 1] !== ':') {
+				// update the selector
+				rule.selector = parser((selectors) => {
+					// cache variables
+					let node;
+					let nodeIndex;
+					let selector;
+					let selectorLink;
+					let selectorVisited;
 
-				// cache the selector index
-				let selectorIndex = -1;
+					// cache the selector index
+					let selectorIndex = -1;
 
-				// for each selector
-				while (selector = selectors.nodes[++selectorIndex]) {
-					// reset the node index
-					nodeIndex = -1;
+					// for each selector
+					while (selector = selectors.nodes[++selectorIndex]) {
+						// reset the node index
+						nodeIndex = -1;
 
-					// for each node
-					while (node = selector.nodes[++nodeIndex]) {
-						// if the node value matches the any-link value
-						if (node.value === anyLinkValue) {
-							// clone the selector
-							selectorLink = selector.clone();
-							selectorVisited = selector.clone();
+						// for each node
+						while (node = selector.nodes[++nodeIndex]) {
+							// if the node value matches the any-link value
+							if (node.value === anyLinkValue) {
+								// clone the selector
+								selectorLink = selector.clone();
+								selectorVisited = selector.clone();
 
-							// update the matching clone values
-							selectorLink.nodes[nodeIndex].value = ':link';
-							selectorVisited.nodes[nodeIndex].value = ':visited';
+								// update the matching clone values
+								selectorLink.nodes[nodeIndex].value = ':link';
+								selectorVisited.nodes[nodeIndex].value = ':visited';
 
-							// replace the selector with the clones and roll back the selector index
-							selectors.nodes.splice(selectorIndex--, 1, selectorLink, selectorVisited);
+								// replace the selector with the clones and roll back the selector index
+								selectors.nodes.splice(selectorIndex--, 1, selectorLink, selectorVisited);
 
-							// stop updating the selector
-							break;
+								// stop updating the selector
+								break;
+							}
 						}
 					}
-				}
-			}).process(rawSelector).result;
+				}).process(rawSelector).result;
+			}
 		});
 	};
 });
+
+// override plugin#process
+module.exports.process = function (cssString, pluginOptions, processOptions) {
+	return postcss([
+		1 in arguments ? module.exports(pluginOptions) : module.exports()
+	]).process(cssString, processOptions);
+};
diff --git a/package.json b/package.json
index 10ab136..8db6dae 100644
--- a/package.json
+++ b/package.json
@@ -1,6 +1,6 @@
 {
   "name": "postcss-pseudo-class-any-link",
-  "version": "3.0.0",
+  "version": "3.0.1",
   "description": "Use the proposed :any-link pseudo-class in CSS",
   "author": "Jonathan Neal <jonathantneal@hotmail.com>",
   "license": "CC0-1.0",
@@ -27,11 +27,11 @@
   "devDependencies": {
     "echint": "^2.1.0",
     "echint-config-dev": "1.0.0",
-    "eslint": "^3.11.1",
+    "eslint": "^3.12.1",
     "eslint-config-dev": "1.0.0",
     "jscs": "^3.0.7",
     "jscs-config-dev": "1.0.1",
-    "postcss-tape": "1.0.1"
+    "postcss-tape": "1.3.0"
   },
   "echint": {
     "extends": "dev"
-- 
2.33.1

