From a8025c458560747a045c4dd1a49c0c5213678ff4 Mon Sep 17 00:00:00 2001
From: Dmitry Semigradsky <semigradskyd@gmail.com>
Date: Fri, 12 May 2017 11:42:01 +0300
Subject: [PATCH 101/186] Update dependencies

---
 .babelrc                   |   9 +++
 .eslintignore              |   1 +
 .eslintrc => .eslintrc.yml |  17 ++----
 .gitignore                 |   1 +
 .travis.yml                |   5 ++
 index.js                   | 109 +++++++++++++++++--------------------
 package.json               |  18 ++++--
 test/index.js              |  37 +++++++------
 8 files changed, 103 insertions(+), 94 deletions(-)
 create mode 100644 .babelrc
 create mode 100644 .eslintignore
 rename .eslintrc => .eslintrc.yml (81%)

diff --git a/.babelrc b/.babelrc
new file mode 100644
index 0000000..6e6df8f
--- /dev/null
+++ b/.babelrc
@@ -0,0 +1,9 @@
+{
+  "presets": [
+    ["env", {
+      "targets": {
+        "node": 4
+      }
+    }]
+  ]
+}
diff --git a/.eslintignore b/.eslintignore
new file mode 100644
index 0000000..1521c8b
--- /dev/null
+++ b/.eslintignore
@@ -0,0 +1 @@
+dist
diff --git a/.eslintrc b/.eslintrc.yml
similarity index 81%
rename from .eslintrc
rename to .eslintrc.yml
index 18d7c97..ec22acd 100644
--- a/.eslintrc
+++ b/.eslintrc.yml
@@ -1,14 +1,9 @@
----
 root: true
 extends: eslint:recommended
 
-#ecmaFeatures:
-#  modules: true
-
-env:
-#  es6: true
-  browser: true
-  node: true
+parserOptions:
+  ecmaVersion: 6
+  sourceType: "module"
 
 rules:
   indent: [2, 2] # 2 spaces indentation
@@ -23,8 +18,8 @@ rules:
   dot-location: [2, "property"]
 
   one-var: [2, "never"]
-#  no-var: [2]
-#  prefer-const: [2]
+  no-var: [2]
+  prefer-const: [2]
   no-bitwise: [2]
 
   object-curly-spacing: [2, "never"]
@@ -32,7 +27,7 @@ rules:
   computed-property-spacing: [2, "never"]
 
   space-unary-ops: [2, {"words": true, "nonwords": false}]
-  space-after-keywords: [2, "always"]
+  keyword-spacing: [2, {"before": true, "after": true}]
   space-before-blocks: [2, "always"]
   space-before-function-paren: [2, "never"]
   space-in-parens: [2, "never"]
diff --git a/.gitignore b/.gitignore
index 7ab649f..319d993 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1,2 +1,3 @@
+dist
 node_modules
 test/fixtures/*.actual.css
diff --git a/.travis.yml b/.travis.yml
index 587bd3e..6e53823 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -1 +1,6 @@
+sudo: false
 language: node_js
+node_js:
+  - "stable"
+  - "6"
+  - "4"
diff --git a/index.js b/index.js
index 7d8e3d2..5e98545 100755
--- a/index.js
+++ b/index.js
@@ -1,23 +1,15 @@
-/**
- * Module dependencies.
- */
-
-var postcss = require("postcss")
-var balanced = require("balanced-match")
+import postcss from "postcss"
+import balanced from "balanced-match"
 
-/**
- * Constants.
- */
-
-var VAR_PROP_IDENTIFIER = "--"
-var VAR_FUNC_IDENTIFIER = "var"
+const VAR_PROP_IDENTIFIER = "--"
+const VAR_FUNC_IDENTIFIER = "var"
 // matches `name[, fallback]`, captures "name" and "fallback"
-var RE_VAR = /([\w-]+)(?:\s*,\s*)?\s*(.*)?/
+const RE_VAR = /([\w-]+)(?:\s*,\s*)?\s*(.*)?/
 
 /**
  * Resolve CSS variables.
  *
- * The second argument to the CSS variable function, var(name[, fallback]), 
+ * The second argument to the CSS variable function, var(name[, fallback]),
  * is used in the event that first argument cannot be resolved.
  *
  * @param {String} value May contain the CSS variable function
@@ -26,19 +18,18 @@ var RE_VAR = /([\w-]+)(?:\s*,\s*)?\s*(.*)?/
  * @param {Object} decl The declaration containing the rule
  * @return {String} A property value with all CSS variables substituted.
  */
-
 function resolveValue(value, variables, result, decl) {
-  var results = []
+  const results = []
 
-  var start = value.indexOf(VAR_FUNC_IDENTIFIER + "(")
+  const start = value.indexOf(VAR_FUNC_IDENTIFIER + "(")
   if (start === -1) {
     return [value]
   }
 
-  var matches = balanced("(", ")", value.substring(start))
+  const matches = balanced("(", ")", value.substring(start))
 
   if (!matches) {
-    throw decl.error("missing closing ')' in the value '" + value + "'")
+    throw decl.error(`missing closing ')' in the value '${value}'`)
   }
 
   if (matches.body === "") {
@@ -46,8 +37,8 @@ function resolveValue(value, variables, result, decl) {
   }
 
   matches.body.replace(RE_VAR, function(_, name, fallback) {
-    var variable = variables[name]
-    var post
+    const variable = variables[name]
+    let post
     // undefined and without fallback, just keep original value
     if (!variable && !fallback) {
       result.warn(
@@ -75,8 +66,8 @@ function resolveValue(value, variables, result, decl) {
       post = matches.post
         ? resolveValue(matches.post, variables, result, decl)
         : [""]
-      fallback.forEach(function(fbValue) {
-        post.forEach(function(afterValue) {
+      fallback.forEach((fbValue) => {
+        post.forEach((afterValue) => {
           results.push(value.slice(0, start) + fbValue + afterValue)
         })
       })
@@ -113,8 +104,8 @@ function resolveValue(value, variables, result, decl) {
     post = matches.post
       ? resolveValue(matches.post, variables, result, decl)
       : [""]
-    variable.value.forEach(function(replacementValue) {
-      post.forEach(function(afterValue) {
+    variable.value.forEach((replacementValue) => {
+      post.forEach((afterValue) => {
         results.push(value.slice(0, start) + replacementValue + afterValue)
       })
     })
@@ -124,14 +115,14 @@ function resolveValue(value, variables, result, decl) {
 }
 
 function prefixVariables(variables) {
-  var prefixedVariables = {}
+  const prefixedVariables = {}
 
   if (!variables) {
     return prefixVariables
   }
 
-  Object.keys(variables).forEach(function(name) {
-    var val = variables[name]
+  Object.keys(variables).forEach((name) => {
+    const val = variables[name]
     if (name.slice(0, 2) !== "--") {
       name = "--" + name
     }
@@ -144,26 +135,24 @@ function prefixVariables(variables) {
 /**
  * Module export.
  */
-
-module.exports = postcss.plugin("postcss-custom-properties", function(options) {
-  options = options || {}
+export default postcss.plugin("postcss-custom-properties", (options = {}) => {
 
   function setVariables(variables) {
     options.variables = prefixVariables(variables)
   }
 
   function plugin(style, result) {
-    var warnings = options.warnings === undefined ? true : options.warnings
-    var variables = prefixVariables(options.variables)
-    var strict = options.strict === undefined ? true : options.strict
-    var appendVariables = options.appendVariables
-    var preserve = options.preserve
-    var map = {}
-    var importantMap = {}
+    const warnings = options.warnings === undefined ? true : options.warnings
+    const variables = prefixVariables(options.variables)
+    const strict = options.strict === undefined ? true : options.strict
+    const appendVariables = options.appendVariables
+    const preserve = options.preserve
+    const map = {}
+    const importantMap = {}
 
     // define variables
-    style.walkRules(function(rule) {
-      var toRemove = []
+    style.walkRules((rule) => {
+      const toRemove = []
 
       // only variables declared for `:root` are supported for now
       if (
@@ -171,8 +160,8 @@ module.exports = postcss.plugin("postcss-custom-properties", function(options) {
         rule.selectors[0] !== ":root" ||
         rule.parent.type !== "root"
       ) {
-        rule.each(function(decl) {
-          var prop = decl.prop
+        rule.each((decl) => {
+          const prop = decl.prop
           if (
             warnings &&
             prop &&
@@ -180,7 +169,7 @@ module.exports = postcss.plugin("postcss-custom-properties", function(options) {
           ) {
             result.warn(
               "Custom property ignored: not scoped to the top-level :root " +
-              "element (" + rule.selectors + " { ... " + prop + ": ... })" +
+              `element (${rule.selectors} { ... ${prop}: ... })` +
               (rule.parent.type !== "root" ? ", in " + rule.parent.type : ""),
               {node: decl}
             )
@@ -189,8 +178,8 @@ module.exports = postcss.plugin("postcss-custom-properties", function(options) {
         return
       }
 
-      rule.each(function(decl, index) {
-        var prop = decl.prop
+      rule.each((decl, index) => {
+        const prop = decl.prop
         if (prop && prop.indexOf(VAR_PROP_IDENTIFIER) === 0) {
           if (!map[prop] || !importantMap[prop] || decl.important) {
             map[prop] = {
@@ -207,7 +196,7 @@ module.exports = postcss.plugin("postcss-custom-properties", function(options) {
 
       // optionally remove `--*` properties from the rule
       if (!preserve) {
-        for (var i = toRemove.length - 1; i >= 0; i--) {
+        for (let i = toRemove.length - 1; i >= 0; i--) {
           rule.nodes.splice(toRemove[i], 1)
         }
 
@@ -219,7 +208,7 @@ module.exports = postcss.plugin("postcss-custom-properties", function(options) {
     })
 
     // apply js-defined custom properties
-    Object.keys(variables).forEach(function(variable) {
+    Object.keys(variables).forEach((variable) => {
       map[variable] = {
         value: variables[variable],
         deps: [],
@@ -229,8 +218,8 @@ module.exports = postcss.plugin("postcss-custom-properties", function(options) {
     })
 
     if (preserve) {
-      Object.keys(map).forEach(function(name) {
-        var variable = map[name]
+      Object.keys(map).forEach((name) => {
+        const variable = map[name]
         if (!variable.resolved) {
           variable.value = resolveValue(variable.value, map, result)
           variable.resolved = true
@@ -239,20 +228,20 @@ module.exports = postcss.plugin("postcss-custom-properties", function(options) {
     }
 
     // resolve variables
-    style.walkDecls(function(decl) {
-      var value = decl.value
+    style.walkDecls((decl) => {
+      const value = decl.value
 
       // skip values that donâ€™t contain variable functions
       if (!value || value.indexOf(VAR_FUNC_IDENTIFIER + "(") === -1) {
         return
       }
 
-      var resolved = resolveValue(value, map, result, decl)
+      let resolved = resolveValue(value, map, result, decl)
       if (!strict) {
         resolved = [resolved.pop()]
       }
-      resolved.forEach(function(resolvedValue) {
-        var clone = decl.cloneBefore()
+      resolved.forEach((resolvedValue) => {
+        const clone = decl.cloneBefore()
         clone.value = resolvedValue
       })
 
@@ -262,19 +251,19 @@ module.exports = postcss.plugin("postcss-custom-properties", function(options) {
     })
 
     if (preserve && appendVariables) {
-      var names = Object.keys(map)
+      const names = Object.keys(map)
       if (names.length) {
-        var container = postcss.rule({
+        const container = postcss.rule({
           selector: ":root",
           raws: {semicolon: true},
         })
-        names.forEach(function(name) {
-          var variable = map[name]
-          var val = variable.value
+        names.forEach((name) => {
+          const variable = map[name]
+          let val = variable.value
           if (variable.resolved) {
             val = val[val.length - 1]
           }
-          var decl = postcss.decl({
+          const decl = postcss.decl({
             prop: name,
             value: val,
           })
diff --git a/package.json b/package.json
index c761c9a..bffa068 100644
--- a/package.json
+++ b/package.json
@@ -13,20 +13,28 @@
   "author": "Maxime Thirouin",
   "license": "MIT",
   "repository": "https://github.com/postcss/postcss-custom-properties.git",
+  "main": "dist/index.js",
   "files": [
-    "index.js"
+    "dist"
   ],
   "dependencies": {
     "balanced-match": "^0.4.2",
-    "postcss": "^5.0.0"
+    "postcss": "^6.0.1"
   },
   "devDependencies": {
-    "eslint": "^1.0.0",
+    "babel-cli": "^6.24.1",
+    "babel-preset-env": "^1.4.0",
+    "babel-register": "^6.24.1",
+    "eslint": "^3.19.0",
     "npmpub": "^3.1.0",
-    "tape": "^4.0.0"
+    "tape": "^4.6.3"
   },
   "scripts": {
-    "test": "eslint . && tape test",
+    "lint": "eslint *.js index.js ./test/",
+    "tape": "tape -r babel-register test/*.js",
+    "test": "npm run lint && npm run babelify && npm run tape",
+    "babelify": "babel index.js --out-dir dist",
+    "prepublish": "npm run babelify",
     "release": "npmpub"
   }
 }
diff --git a/test/index.js b/test/index.js
index 003919a..1978b84 100755
--- a/test/index.js
+++ b/test/index.js
@@ -1,9 +1,9 @@
-var fs = require("fs")
+import fs from "fs"
 
-var test = require("tape")
+import test from "tape"
 
-var postcss = require("postcss")
-var customProperties = require("..")
+import postcss from "postcss"
+import customProperties from ".."
 
 function fixturePath(name) {
   return "test/fixtures/" + name + ".css"
@@ -19,13 +19,13 @@ function resolveFixture(name, options) {
 }
 
 function compareFixtures(t, name, options) {
-  var postcssResult = resolveFixture(name, options)
-  var actual = postcssResult.css.trim()
+  const postcssResult = resolveFixture(name, options)
+  const actual = postcssResult.css.trim()
 
   // handy thing: checkout actual in the *.actual.css file
   fs.writeFile(fixturePath(name + ".actual"), actual)
 
-  var expected = fixture(name + ".expected")
+  const expected = fixture(name + ".expected")
   t.equal(
     actual, expected,
     "processed fixture '" + name + "' should be equal to expected output"
@@ -61,7 +61,7 @@ test("throw errors", function(t) {
 test(
   "substitutes nothing when a variable function references an undefined var",
   function(t) {
-    var result = compareFixtures(t, "substitution-undefined")
+    const result = compareFixtures(t, "substitution-undefined")
     t.equal(
       result.messages[0].text,
       "variable '--test' is undefined and used without a fallback",
@@ -72,7 +72,7 @@ test(
 )
 
 test("substitutes defined variables in `:root` only", function(t) {
-  var result = compareFixtures(t, "substitution-defined")
+  const result = compareFixtures(t, "substitution-defined")
   t.ok(
     result.messages[0].text.match(/^Custom property ignored/),
     "should add a warning for non root custom properties"
@@ -81,7 +81,7 @@ test("substitutes defined variables in `:root` only", function(t) {
 })
 
 test("allow to hide warnings", function(t) {
-  var result = compareFixtures(
+  const result = compareFixtures(
     t,
     "substitution-defined",
     {warnings: false}
@@ -125,7 +125,7 @@ test(
 )
 
 test("allows users to programmatically change the variables", function(t) {
-  var variables = {
+  const variables = {
     "--test-one": "js-one",
     "--test-two": "js-two",
     "--test-three": "js-three",
@@ -133,14 +133,15 @@ test("allows users to programmatically change the variables", function(t) {
     "--test-jsception": "var(--test-varception)",
     "--test-num": 1,
   }
-  var plugin = customProperties()
-  var name = "js-override"
-  var expected = fs.readFileSync(fixturePath(name + ".expected"), "utf8").trim()
-  var actual
+  const plugin = customProperties()
+  const name = "js-override"
+  const expected = fs.readFileSync(
+    fixturePath(name + ".expected"), "utf8"
+  ).trim()
 
   plugin.setVariables(variables)
 
-  actual = postcss(plugin)
+  const actual = postcss(plugin)
     .process(fixture(name), {from: fixturePath(name)}).css.trim()
 
   t.equal(
@@ -193,7 +194,7 @@ test("preserves computed value when `preserve` is `\"computed\"`", function(t) {
 
 test("circular variable references", function(t) {
   compareFixtures(t, "self-reference")
-  var result = compareFixtures(t, "circular-reference")
+  const result = compareFixtures(t, "circular-reference")
   t.equal(
     result.messages[0].text,
     "Circular variable reference: --color",
@@ -232,4 +233,4 @@ test("strict option", function(t) {
 test("ignores trailing space after variable", function(t) {
   compareFixtures(t, "substitution-trailing-space")
   t.end()
-})
\ No newline at end of file
+})
-- 
2.33.1

