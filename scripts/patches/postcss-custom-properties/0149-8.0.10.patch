From 654d59d97d39d1591867f53a0c9572df1a7b79b4 Mon Sep 17 00:00:00 2001
From: Jonathan Neal <jonathantneal@hotmail.com>
Date: Mon, 1 Apr 2019 13:57:21 -0400
Subject: [PATCH 149/186] 8.0.10

---
 .gitignore                                    |   2 +-
 .rollup.js                                    |  14 +-
 .tape.js                                      | 444 +++++++++---------
 CHANGELOG.md                                  |   7 +
 package.json                                  |  36 +-
 index.js => src/index.js                      |   0
 .../get-custom-properties-from-imports.js     |   0
 .../lib}/get-custom-properties-from-root.js   |   0
 {lib => src/lib}/is-ignored.js                |   0
 {lib => src/lib}/transform-properties.js      |   0
 {lib => src/lib}/transform-value-ast.js       |   0
 .../write-custom-properties-to-exports.js     |   0
 12 files changed, 257 insertions(+), 246 deletions(-)
 rename index.js => src/index.js (100%)
 rename {lib => src/lib}/get-custom-properties-from-imports.js (100%)
 rename {lib => src/lib}/get-custom-properties-from-root.js (100%)
 rename {lib => src/lib}/is-ignored.js (100%)
 rename {lib => src/lib}/transform-properties.js (100%)
 rename {lib => src/lib}/transform-value-ast.js (100%)
 rename {lib => src/lib}/write-custom-properties-to-exports.js (100%)

diff --git a/.gitignore b/.gitignore
index d920b78..2b421ac 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1,5 +1,4 @@
 node_modules
-index.*.*
 package-lock.json
 *.log*
 *.result.css
@@ -9,3 +8,4 @@ package-lock.json
 !.rollup.js
 !.tape.js
 !.travis.yml
+/index.*
diff --git a/.rollup.js b/.rollup.js
index b962202..56d7981 100644
--- a/.rollup.js
+++ b/.rollup.js
@@ -1,10 +1,10 @@
 import babel from 'rollup-plugin-babel';
 
 export default {
-	input: 'index.js',
+	input: 'src/index.js',
 	output: [
-		{ file: 'index.cjs.js', format: 'cjs', sourcemap: true },
-		{ file: 'index.esm.mjs', format: 'esm', sourcemap: true }
+		{ file: 'index.js', format: 'cjs', sourcemap: true },
+		{ file: 'index.mjs', format: 'esm', sourcemap: true }
 	],
 	plugins: [
 		babel({
@@ -12,7 +12,13 @@ export default {
 				'@babel/plugin-syntax-dynamic-import'
 			],
 			presets: [
-				['@babel/env', { targets: { node: 6 } }]
+				['@babel/preset-env', {
+					corejs: 3,
+					loose: true,
+					modules: false,
+					targets: { node: 6 },
+					useBuiltIns: 'entry'
+				}]
 			]
 		})
 	]
diff --git a/.tape.js b/.tape.js
index f61ce9b..1df0f80 100644
--- a/.tape.js
+++ b/.tape.js
@@ -1,270 +1,268 @@
 module.exports = {
-	'postcss-custom-properties': {
-		'basic': {
-			message: 'supports basic usage'
-		},
-		'basic:preserve': {
-			message: 'supports { preserve: false } usage',
-			options: {
-				preserve: false
+	'basic': {
+		message: 'supports basic usage'
+	},
+	'basic:preserve': {
+		message: 'supports { preserve: false } usage',
+		options: {
+			preserve: false
+		}
+	},
+	'basic:import': {
+		message: 'supports { importFrom: { customProperties: { ... } } } usage',
+		options: {
+			importFrom: {
+				customProperties: {
+					'--color': 'rgb(255, 0, 0)',
+					'--color-2': 'yellow',
+					'--ref-color': 'var(--color)',
+					'--z-index': 10
+				}
 			}
-		},
-		'basic:import': {
-			message: 'supports { importFrom: { customProperties: { ... } } } usage',
-			options: {
-				importFrom: {
+		}
+	},
+	'basic:import-fn': {
+		message: 'supports { importFrom() } usage',
+		options: {
+			importFrom() {
+				return {
 					customProperties: {
 						'--color': 'rgb(255, 0, 0)',
 						'--color-2': 'yellow',
 						'--ref-color': 'var(--color)',
 						'--z-index': 10
 					}
-				}
+				};
 			}
 		},
-		'basic:import-fn': {
-			message: 'supports { importFrom() } usage',
-			options: {
-				importFrom() {
-					return {
+		expect: 'basic.import.expect.css',
+		result: 'basic.import.result.css'
+	},
+	'basic:import-fn-promise': {
+		message: 'supports { async importFrom() } usage',
+		options: {
+			importFrom() {
+				return new Promise(resolve => {
+					resolve({
 						customProperties: {
 							'--color': 'rgb(255, 0, 0)',
 							'--color-2': 'yellow',
 							'--ref-color': 'var(--color)',
 							'--z-index': 10
 						}
-					};
-				}
-			},
-			expect: 'basic.import.expect.css',
-			result: 'basic.import.result.css'
+					})
+				});
+			}
 		},
-		'basic:import-fn-promise': {
-			message: 'supports { async importFrom() } usage',
-			options: {
-				importFrom() {
-					return new Promise(resolve => {
-						resolve({
-							customProperties: {
-								'--color': 'rgb(255, 0, 0)',
-								'--color-2': 'yellow',
-								'--ref-color': 'var(--color)',
-								'--z-index': 10
-							}
-						})
-					});
-				}
-			},
-			expect: 'basic.import.expect.css',
-			result: 'basic.import.result.css'
+		expect: 'basic.import.expect.css',
+		result: 'basic.import.result.css'
+	},
+	'basic:import-json': {
+		message: 'supports { importFrom: "test/import-properties.json" } usage',
+		options: {
+			importFrom: 'test/import-properties.json'
 		},
-		'basic:import-json': {
-			message: 'supports { importFrom: "test/import-properties.json" } usage',
-			options: {
-				importFrom: 'test/import-properties.json'
-			},
-			expect: 'basic.import.expect.css',
-			result: 'basic.import.result.css'
+		expect: 'basic.import.expect.css',
+		result: 'basic.import.result.css'
+	},
+	'basic:import-js': {
+		message: 'supports { importFrom: "test/import-properties{-2}?.js" } usage',
+		options: {
+			importFrom: [
+				'test/import-properties.js',
+				'test/import-properties-2.js'
+			]
 		},
-		'basic:import-js': {
-			message: 'supports { importFrom: "test/import-properties{-2}?.js" } usage',
-			options: {
-				importFrom: [
-					'test/import-properties.js',
-					'test/import-properties-2.js'
-				]
-			},
-			expect: 'basic.import.expect.css',
-			result: 'basic.import.result.css'
+		expect: 'basic.import.expect.css',
+		result: 'basic.import.result.css'
+	},
+	'basic:import-css': {
+		message: 'supports { importFrom: "test/import-properties{-2}?.css" } usage',
+		options: {
+			importFrom: [
+				'test/import-properties.css',
+				'test/import-properties-2.css'
+			]
 		},
-		'basic:import-css': {
-			message: 'supports { importFrom: "test/import-properties{-2}?.css" } usage',
-			options: {
-				importFrom: [
-					'test/import-properties.css',
-					'test/import-properties-2.css'
-				]
-			},
-			expect: 'basic.import.expect.css',
-			result: 'basic.import.result.css'
+		expect: 'basic.import.expect.css',
+		result: 'basic.import.result.css'
+	},
+	'basic:import-css-js': {
+		message: 'supports { importFrom: "test/import-properties{-2}?.{css|js}" } usage',
+		options: {
+			importFrom: [
+				'test/import-properties.js',
+				'test/import-properties-2.css'
+			]
 		},
-		'basic:import-css-js': {
-			message: 'supports { importFrom: "test/import-properties{-2}?.{css|js}" } usage',
-			options: {
-				importFrom: [
-					'test/import-properties.js',
-					'test/import-properties-2.css'
-				]
-			},
-			expect: 'basic.import.expect.css',
-			result: 'basic.import.result.css'
+		expect: 'basic.import.expect.css',
+		result: 'basic.import.result.css'
+	},
+	'basic:import-css-from': {
+		message: 'supports { importFrom: { from: "test/import-properties.css" } } usage',
+		options: {
+			importFrom: [
+				{ from: 'test/import-properties.css' },
+				{ from: 'test/import-properties-2.css' }
+			]
 		},
-		'basic:import-css-from': {
-			message: 'supports { importFrom: { from: "test/import-properties.css" } } usage',
-			options: {
-				importFrom: [
-					{ from: 'test/import-properties.css' },
-					{ from: 'test/import-properties-2.css' }
-				]
-			},
-			expect: 'basic.import.expect.css',
-			result: 'basic.import.result.css'
+		expect: 'basic.import.expect.css',
+		result: 'basic.import.result.css'
+	},
+	'basic:import-css-from-type': {
+		message: 'supports { importFrom: [ { from: "test/import-properties.css", type: "css" } ] } usage',
+		options: {
+			importFrom: [
+				{ from: 'test/import-properties.css', type: 'css' },
+				{ from: 'test/import-properties-2.css', type: 'css' }
+			]
 		},
-		'basic:import-css-from-type': {
-			message: 'supports { importFrom: [ { from: "test/import-properties.css", type: "css" } ] } usage',
-			options: {
-				importFrom: [
-					{ from: 'test/import-properties.css', type: 'css' },
-					{ from: 'test/import-properties-2.css', type: 'css' }
-				]
-			},
-			expect: 'basic.import.expect.css',
-			result: 'basic.import.result.css'
+		expect: 'basic.import.expect.css',
+		result: 'basic.import.result.css'
+	},
+	'basic:export': {
+		message: 'supports { exportTo: { customProperties: { ... } } } usage',
+		options: {
+			exportTo: (global.__exportPropertiesObject = global.__exportPropertiesObject || {
+				customProperties: null
+			})
 		},
-		'basic:export': {
-			message: 'supports { exportTo: { customProperties: { ... } } } usage',
-			options: {
-				exportTo: (global.__exportPropertiesObject = global.__exportPropertiesObject || {
-					customProperties: null
-				})
-			},
-			expect: 'basic.expect.css',
-			result: 'basic.result.css',
-			after() {
-				if (__exportPropertiesObject.customProperties['--color'] !== 'rgb(255, 0, 0)') {
+		expect: 'basic.expect.css',
+		result: 'basic.result.css',
+		after() {
+			if (__exportPropertiesObject.customProperties['--color'] !== 'rgb(255, 0, 0)') {
+				throw new Error('The exportTo function failed');
+			}
+		}
+	},
+	'basic:export-fn': {
+		message: 'supports { exportTo() } usage',
+		options: {
+			exportTo(customProperties) {
+				if (customProperties['--color'] !== 'rgb(255, 0, 0)') {
 					throw new Error('The exportTo function failed');
 				}
 			}
 		},
-		'basic:export-fn': {
-			message: 'supports { exportTo() } usage',
-			options: {
-				exportTo(customProperties) {
+		expect: 'basic.expect.css',
+		result: 'basic.result.css'
+	},
+	'basic:export-fn-promise': {
+		message: 'supports { async exportTo() } usage',
+		options: {
+			exportTo(customProperties) {
+				return new Promise((resolve, reject) => {
 					if (customProperties['--color'] !== 'rgb(255, 0, 0)') {
-						throw new Error('The exportTo function failed');
+						reject('The exportTo function failed');
+					} else {
+						resolve();
 					}
-				}
-			},
-			expect: 'basic.expect.css',
-			result: 'basic.result.css'
+				});
+			}
 		},
-		'basic:export-fn-promise': {
-			message: 'supports { async exportTo() } usage',
-			options: {
-				exportTo(customProperties) {
-					return new Promise((resolve, reject) => {
-						if (customProperties['--color'] !== 'rgb(255, 0, 0)') {
-							reject('The exportTo function failed');
-						} else {
-							resolve();
-						}
-					});
-				}
-			},
-			expect: 'basic.expect.css',
-			result: 'basic.result.css'
+		expect: 'basic.expect.css',
+		result: 'basic.result.css'
+	},
+	'basic:export-json': {
+		message: 'supports { exportTo: "test/export-properties.json" } usage',
+		options: {
+			exportTo: 'test/export-properties.json'
 		},
-		'basic:export-json': {
-			message: 'supports { exportTo: "test/export-properties.json" } usage',
-			options: {
-				exportTo: 'test/export-properties.json'
-			},
-			expect: 'basic.expect.css',
-			result: 'basic.result.css',
-			before() {
-				global.__exportPropertiesString = require('fs').readFileSync('test/export-properties.json', 'utf8');
-			},
-			after() {
-				if (global.__exportPropertiesString !== require('fs').readFileSync('test/export-properties.json', 'utf8')) {
-					throw new Error('The original file did not match the freshly exported copy');
-				}
-			}
+		expect: 'basic.expect.css',
+		result: 'basic.result.css',
+		before() {
+			global.__exportPropertiesString = require('fs').readFileSync('test/export-properties.json', 'utf8');
 		},
-		'basic:export-js': {
-			message: 'supports { exportTo: "test/export-properties.js" } usage',
-			options: {
-				exportTo: 'test/export-properties.js'
-			},
-			expect: 'basic.expect.css',
-			result: 'basic.result.css',
-			before() {
-				global.__exportPropertiesString = require('fs').readFileSync('test/export-properties.js', 'utf8');
-			},
-			after() {
-				if (global.__exportPropertiesString !== require('fs').readFileSync('test/export-properties.js', 'utf8')) {
-					throw new Error('The original file did not match the freshly exported copy');
-				}
+		after() {
+			if (global.__exportPropertiesString !== require('fs').readFileSync('test/export-properties.json', 'utf8')) {
+				throw new Error('The original file did not match the freshly exported copy');
 			}
+		}
+	},
+	'basic:export-js': {
+		message: 'supports { exportTo: "test/export-properties.js" } usage',
+		options: {
+			exportTo: 'test/export-properties.js'
 		},
-		'basic:export-mjs': {
-			message: 'supports { exportTo: "test/export-properties.mjs" } usage',
-			options: {
-				exportTo: 'test/export-properties.mjs'
-			},
-			expect: 'basic.expect.css',
-			result: 'basic.result.css',
-			before() {
-				global.__exportPropertiesString = require('fs').readFileSync('test/export-properties.mjs', 'utf8');
-			},
-			after() {
-				if (global.__exportPropertiesString !== require('fs').readFileSync('test/export-properties.mjs', 'utf8')) {
-					throw new Error('The original file did not match the freshly exported copy');
-				}
+		expect: 'basic.expect.css',
+		result: 'basic.result.css',
+		before() {
+			global.__exportPropertiesString = require('fs').readFileSync('test/export-properties.js', 'utf8');
+		},
+		after() {
+			if (global.__exportPropertiesString !== require('fs').readFileSync('test/export-properties.js', 'utf8')) {
+				throw new Error('The original file did not match the freshly exported copy');
 			}
+		}
+	},
+	'basic:export-mjs': {
+		message: 'supports { exportTo: "test/export-properties.mjs" } usage',
+		options: {
+			exportTo: 'test/export-properties.mjs'
 		},
-		'basic:export-css': {
-			message: 'supports { exportTo: "test/export-properties.css" } usage',
-			options: {
-				exportTo: 'test/export-properties.css'
-			},
-			expect: 'basic.expect.css',
-			result: 'basic.result.css',
-			before() {
-				global.__exportPropertiesString = require('fs').readFileSync('test/export-properties.css', 'utf8');
-			},
-			after() {
-				if (global.__exportPropertiesString !== require('fs').readFileSync('test/export-properties.css', 'utf8')) {
-					throw new Error('The original file did not match the freshly exported copy');
-				}
+		expect: 'basic.expect.css',
+		result: 'basic.result.css',
+		before() {
+			global.__exportPropertiesString = require('fs').readFileSync('test/export-properties.mjs', 'utf8');
+		},
+		after() {
+			if (global.__exportPropertiesString !== require('fs').readFileSync('test/export-properties.mjs', 'utf8')) {
+				throw new Error('The original file did not match the freshly exported copy');
 			}
+		}
+	},
+	'basic:export-css': {
+		message: 'supports { exportTo: "test/export-properties.css" } usage',
+		options: {
+			exportTo: 'test/export-properties.css'
 		},
-		'basic:export-css-to': {
-			message: 'supports { exportTo: { to: "test/export-properties.css" } } usage',
-			options: {
-				exportTo: { to: 'test/export-properties.css' }
-			},
-			expect: 'basic.expect.css',
-			result: 'basic.result.css',
-			before() {
-				global.__exportPropertiesString = require('fs').readFileSync('test/export-properties.css', 'utf8');
-			},
-			after() {
-				if (global.__exportPropertiesString !== require('fs').readFileSync('test/export-properties.css', 'utf8')) {
-					throw new Error('The original file did not match the freshly exported copy');
-				}
+		expect: 'basic.expect.css',
+		result: 'basic.result.css',
+		before() {
+			global.__exportPropertiesString = require('fs').readFileSync('test/export-properties.css', 'utf8');
+		},
+		after() {
+			if (global.__exportPropertiesString !== require('fs').readFileSync('test/export-properties.css', 'utf8')) {
+				throw new Error('The original file did not match the freshly exported copy');
 			}
+		}
+	},
+	'basic:export-css-to': {
+		message: 'supports { exportTo: { to: "test/export-properties.css" } } usage',
+		options: {
+			exportTo: { to: 'test/export-properties.css' }
 		},
-		'basic:export-css-to-type': {
-			message: 'supports { exportTo: { to: "test/export-properties.css", type: "css" } } usage',
-			options: {
-				exportTo: { to: 'test/export-properties.css', type: 'css' }
-			},
-			expect: 'basic.expect.css',
-			result: 'basic.result.css',
-			before() {
-				global.__exportPropertiesString = require('fs').readFileSync('test/export-properties.css', 'utf8');
-			},
-			after() {
-				if (global.__exportPropertiesString !== require('fs').readFileSync('test/export-properties.css', 'utf8')) {
-					throw new Error('The original file did not match the freshly exported copy');
-				}
+		expect: 'basic.expect.css',
+		result: 'basic.result.css',
+		before() {
+			global.__exportPropertiesString = require('fs').readFileSync('test/export-properties.css', 'utf8');
+		},
+		after() {
+			if (global.__exportPropertiesString !== require('fs').readFileSync('test/export-properties.css', 'utf8')) {
+				throw new Error('The original file did not match the freshly exported copy');
 			}
+		}
+	},
+	'basic:export-css-to-type': {
+		message: 'supports { exportTo: { to: "test/export-properties.css", type: "css" } } usage',
+		options: {
+			exportTo: { to: 'test/export-properties.css', type: 'css' }
 		},
-		'basic:import-is-empty': {
-			message: 'supports { importFrom: {} } usage',
-			options: {
-				importFrom: {}
+		expect: 'basic.expect.css',
+		result: 'basic.result.css',
+		before() {
+			global.__exportPropertiesString = require('fs').readFileSync('test/export-properties.css', 'utf8');
+		},
+		after() {
+			if (global.__exportPropertiesString !== require('fs').readFileSync('test/export-properties.css', 'utf8')) {
+				throw new Error('The original file did not match the freshly exported copy');
 			}
 		}
+	},
+	'basic:import-is-empty': {
+		message: 'supports { importFrom: {} } usage',
+		options: {
+			importFrom: {}
+		}
 	}
 };
diff --git a/CHANGELOG.md b/CHANGELOG.md
index 24f7183..6021c8c 100755
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,5 +1,12 @@
 # Changes to PostCSS Custom Properties
 
+### 8.0.10 (April 1, 2019)
+
+- Added: Support for ignoring lines and or blocks using
+  `postcss-custom-properties` comments.
+- Updated: `postcss` to 7.0.14 (patch)
+- Updated: `postcss-values-parser` to 2.0.1 (patch)
+
 ### 8.0.9 (November 5, 2018)
 
 - Fixed: Issue with duplicate custom property usage within a declaration
diff --git a/package.json b/package.json
index 60b59a5..4bd1277 100644
--- a/package.json
+++ b/package.json
@@ -1,6 +1,6 @@
 {
   "name": "postcss-custom-properties",
-  "version": "8.0.9",
+  "version": "8.0.10",
   "description": "Use Custom Properties Queries in CSS",
   "author": "Jonathan Neal <jonathantneal@hotmail.com>",
   "contributors": [
@@ -10,39 +10,39 @@
   "repository": "postcss/postcss-custom-properties",
   "homepage": "https://github.com/postcss/postcss-custom-properties#readme",
   "bugs": "https://github.com/postcss/postcss-custom-properties/issues",
-  "main": "index.cjs.js",
-  "module": "index.esm.mjs",
+  "main": "index.js",
+  "module": "index.mjs",
   "files": [
-    "index.cjs.js",
-    "index.cjs.js.map",
-    "index.esm.mjs",
-    "index.esm.mjs.map"
+    "index.js",
+    "index.js.map",
+    "index.mjs",
+    "index.mjs.map"
   ],
   "scripts": {
     "prepublishOnly": "npm test",
-    "pretest": "rollup -c .rollup.js --silent",
+    "pretest:tape": "rollup -c .rollup.js --silent",
     "test": "npm run test:js && npm run test:tape",
-    "test:js": "eslint *.js lib/*.js --cache --ignore-path .gitignore --quiet",
+    "test:js": "eslint src/**/*.js --cache --ignore-path .gitignore --quiet",
     "test:tape": "postcss-tape"
   },
   "engines": {
     "node": ">=6.0.0"
   },
   "dependencies": {
-    "postcss": "^7.0.5",
-    "postcss-values-parser": "^2.0.0"
+    "postcss": "^7.0.14",
+    "postcss-values-parser": "^2.0.1"
   },
   "devDependencies": {
-    "@babel/core": "^7.1.2",
-    "@babel/plugin-syntax-dynamic-import": "^7.0.0",
-    "@babel/preset-env": "^7.1.0",
+    "@babel/core": "^7.4.0",
+    "@babel/plugin-syntax-dynamic-import": "^7.2.0",
+    "@babel/preset-env": "^7.4.2",
     "babel-eslint": "^10.0.1",
-    "eslint": "^5.8.0",
+    "eslint": "^5.16.0",
     "eslint-config-dev": "^2.0.0",
-    "postcss-tape": "^2.2.0",
+    "postcss-tape": "^4.0.0",
     "pre-commit": "^1.2.2",
-    "rollup": "^0.67.0",
-    "rollup-plugin-babel": "^4.0.3"
+    "rollup": "^1.7.4",
+    "rollup-plugin-babel": "^4.3.2"
   },
   "eslintConfig": {
     "extends": "dev",
diff --git a/index.js b/src/index.js
similarity index 100%
rename from index.js
rename to src/index.js
diff --git a/lib/get-custom-properties-from-imports.js b/src/lib/get-custom-properties-from-imports.js
similarity index 100%
rename from lib/get-custom-properties-from-imports.js
rename to src/lib/get-custom-properties-from-imports.js
diff --git a/lib/get-custom-properties-from-root.js b/src/lib/get-custom-properties-from-root.js
similarity index 100%
rename from lib/get-custom-properties-from-root.js
rename to src/lib/get-custom-properties-from-root.js
diff --git a/lib/is-ignored.js b/src/lib/is-ignored.js
similarity index 100%
rename from lib/is-ignored.js
rename to src/lib/is-ignored.js
diff --git a/lib/transform-properties.js b/src/lib/transform-properties.js
similarity index 100%
rename from lib/transform-properties.js
rename to src/lib/transform-properties.js
diff --git a/lib/transform-value-ast.js b/src/lib/transform-value-ast.js
similarity index 100%
rename from lib/transform-value-ast.js
rename to src/lib/transform-value-ast.js
diff --git a/lib/write-custom-properties-to-exports.js b/src/lib/write-custom-properties-to-exports.js
similarity index 100%
rename from lib/write-custom-properties-to-exports.js
rename to src/lib/write-custom-properties-to-exports.js
-- 
2.33.1

