From 450896402908596ceb21532e8d65388bb9d8e112 Mon Sep 17 00:00:00 2001
From: nagits <aleksey.nagits@gmail.com>
Date: Fri, 23 Mar 2018 05:11:22 +0500
Subject: [PATCH 132/186] Allow `warnings` option to be an object to configure
 each warning

---
 index.js      | 91 ++++++++++++++++++++++++++++++++++--------------
 test/index.js | 95 ++++++++++++++++++++++++++++++++++++++++++++++++---
 2 files changed, 156 insertions(+), 30 deletions(-)

diff --git a/index.js b/index.js
index 0faac2e..48824c9 100755
--- a/index.js
+++ b/index.js
@@ -52,17 +52,12 @@ function resolveValue(value, variables, result, decl) {
     let post
     // undefined and without fallback, just keep original value
     if (!variable && !fallback) {
-      if (globalOpts.warnings) {
-        const errorStr =
-          `variable '${name}' is undefined and used without a fallback`
+      assert(
+        "no-value-notifications", false,
+        `variable '${name}' is undefined and used without a fallback`,
+        {decl, result, word: name}
+      )
 
-        if (globalOpts.noValueNotifications === "error") {
-          throw decl.error(errorStr, {word: name})
-        }
-        else {
-          result.warn(errorStr, {node: decl})
-        }
-      }
       post = matches.post
         ? resolveValue(matches.post, variables, result, decl)
         : [""]
@@ -100,9 +95,12 @@ function resolveValue(value, variables, result, decl) {
       // circular reference encountered
       if (variable.deps.indexOf(name) !== -1) {
         if (!fallback) {
-          if (globalOpts.warnings) {
-            result.warn("Circular variable reference: " + name, {node: decl})
-          }
+          assert(
+            "circular-reference", false,
+            `Circular variable reference: ${name}`,
+            {decl, result, word: name}
+          )
+
           variable.value = [variable.value]
           variable.circular = true
         }
@@ -152,6 +150,32 @@ function prefixVariables(variables) {
   return prefixedVariables
 }
 
+/**
+ * Define an assertion that will print a warning or throw an exception
+ * if the condition is not met.
+ *
+ * @param {String} ruleName Name of the rule in `options.warnings`.
+ * @param {Boolean} condition Must be truthy for the assertion to pass.
+ * @param {String} message Text of the warning or error if the assertion fails.
+ * @param {Object} context PostCSS context objects: decl, result and
+ *                         warning (error) options.
+ */
+function assert(ruleName, condition, message, {
+  decl, result, word, index, plugin,
+}) {
+  if (condition || !globalOpts.warnings) {
+    return
+  }
+
+  if (globalOpts.warnings === true || globalOpts.warnings[ruleName] === true) {
+    result.warn(message, {node: decl, word, index, plugin})
+  }
+  else if (globalOpts.warnings[ruleName] === "error") {
+    decl = decl || result.root.first
+    throw decl.error(message, {word, index, plugin})
+  }
+}
+
 /**
  * Module export.
  */
@@ -171,9 +195,28 @@ export default postcss.plugin("postcss-custom-properties", (options = {}) => {
     const importantMap = {}
 
     globalOpts = {
-      warnings: "warnings" in options ? Boolean(options.warnings) : false,
-      noValueNotifications: "noValueNotifications" in options
-        ? String(options.noValueNotifications) : "warning",
+      warnings: options.warnings,
+    }
+
+    if ("noValueNotifications" in options) {
+      result.warn(
+        "'noValueNotifications' is deprecated. Use "
+          + "\"options.warnings['no-value-notifications']: true|false|'error'\""
+          + "instead."
+      )
+
+      if (typeof globalOpts.warnings === "object") {
+        globalOpts.warnings["no-value-notifications"] =
+          options.noValueNotifications === "error" ? "error" : true
+      }
+      else if (globalOpts.warnings === true
+               && options.noValueNotifications === "error") {
+        globalOpts.warnings = {
+          "no-value-notifications": "error",
+          "not-scoped-to-root": true,
+          "circular-reference": true,
+        }
+      }
     }
 
     // define variables
@@ -188,18 +231,14 @@ export default postcss.plugin("postcss-custom-properties", (options = {}) => {
       ) {
         rule.each((decl) => {
           const prop = decl.prop
-          if (
-            globalOpts.warnings &&
-            prop &&
-            prop.indexOf(VAR_PROP_IDENTIFIER) === 0
-          ) {
-            result.warn(
-              "Custom property ignored: not scoped to the top-level :root " +
+          assert(
+            "not-scoped-to-root",
+            !prop || prop.indexOf(VAR_PROP_IDENTIFIER) !== 0,
+            "Custom property ignored: not scoped to the top-level :root " +
               `element (${rule.selectors} { ... ${prop}: ... })` +
               (rule.parent.type !== "root" ? ", in " + rule.parent.type : ""),
-              {node: decl}
-            )
-          }
+            {decl, result}
+          )
         })
         return
       }
diff --git a/test/index.js b/test/index.js
index 52c3ccf..11cfd34 100755
--- a/test/index.js
+++ b/test/index.js
@@ -61,7 +61,7 @@ test("throw errors", function(t) {
 test(
   "substitutes nothing when a variable function references an undefined var",
   function(t) {
-    const result = compareFixtures(t, "substitution-undefined", {
+    let result = compareFixtures(t, "substitution-undefined", {
       warnings: true,
     })
     t.equal(
@@ -69,6 +69,30 @@ test(
       "variable '--test' is undefined and used without a fallback",
       "should add a warning for undefined variable"
     )
+
+    result = compareFixtures(t, "substitution-undefined", {
+      warnings: {
+        "no-value-notifications": true,
+      },
+    })
+    t.equal(
+      result.messages[0].text,
+      "variable '--test' is undefined and used without a fallback",
+      "should add a warning for undefined variable"
+    )
+
+    t.throws(
+      function() {
+        compareFixtures(t, "substitution-undefined", {
+          warnings: {
+            "no-value-notifications": "error",
+          },
+        })
+      },
+      /variable '--test' is undefined and used without a fallback/,
+      "should throw an error for undefined variable"
+    )
+
     t.end()
   }
 )
@@ -93,18 +117,41 @@ test(
 )
 
 test("substitutes defined variables in `:root` only", function(t) {
-  const result = compareFixtures(t, "substitution-defined", {
+  let result = compareFixtures(t, "substitution-defined", {
     warnings: true,
   })
   t.ok(
     result.messages[0].text.match(/^Custom property ignored/),
     "should add a warning for non root custom properties"
   )
+
+  result = compareFixtures(t, "substitution-defined", {
+    warnings: {
+      "not-scoped-to-root": true,
+    },
+  })
+  t.ok(
+    result.messages[0].text.match(/^Custom property ignored/),
+    "should add a warning for non root custom properties"
+  )
+
+  t.throws(
+    function() {
+      compareFixtures(t, "substitution-defined", {
+        warnings: {
+          "not-scoped-to-root": "error",
+        },
+      })
+    },
+    /Custom property ignored/,
+    "should throw an error for non root custom properties"
+  )
+
   t.end()
 })
 
 test("allow to hide warnings", function(t) {
-  const result = compareFixtures(
+  let result = compareFixtures(
     t,
     "substitution-defined",
     {warnings: false}
@@ -114,6 +161,22 @@ test("allow to hide warnings", function(t) {
     0,
     "should not add warnings if option set to false"
   )
+
+  result = compareFixtures(
+    t,
+    "substitution-defined",
+    {
+      warnings: {
+        "not-scoped-to-root": false,
+      },
+    }
+  )
+  t.equal(
+    result.messages.length,
+    0,
+    "should not add warnings if option set to false"
+  )
+
   t.end()
 })
 
@@ -217,7 +280,7 @@ test("preserves computed value when `preserve` is `\"computed\"`", function(t) {
 
 test("circular variable references", function(t) {
   compareFixtures(t, "self-reference")
-  const result = compareFixtures(t, "circular-reference", {
+  let result = compareFixtures(t, "circular-reference", {
     warnings: true,
   })
   t.equal(
@@ -225,6 +288,30 @@ test("circular variable references", function(t) {
     "Circular variable reference: --bg-color",
     "should add a warning for circular reference"
   )
+
+  result = compareFixtures(t, "circular-reference", {
+    warnings: {
+      "circular-reference": true,
+    },
+  })
+  t.equal(
+    result.messages[0].text,
+    "Circular variable reference: --bg-color",
+    "should add a warning for circular reference"
+  )
+
+  t.throws(
+    function() {
+      compareFixtures(t, "circular-reference", {
+        warnings: {
+          "circular-reference": "error",
+        },
+      })
+    },
+    /Circular variable reference: --bg-color/,
+    "should throw an error for circular reference"
+  )
+
   t.end()
 })
 
-- 
2.33.1

