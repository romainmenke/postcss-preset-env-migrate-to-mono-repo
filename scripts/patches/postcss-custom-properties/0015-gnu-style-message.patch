From 34ba6357613a2f06e37ef7a52dabfc7ccbd4e505 Mon Sep 17 00:00:00 2001
From: Maxime Thirouin <m@moox.io>
Date: Fri, 22 Aug 2014 06:13:58 +0200
Subject: [PATCH 015/186] gnu style message

---
 index.js      | 24 ++++++++++++++++++------
 test/index.js |  6 +++---
 2 files changed, 21 insertions(+), 9 deletions(-)

diff --git a/index.js b/index.js
index 0ca7710..7bc4f80 100755
--- a/index.js
+++ b/index.js
@@ -66,7 +66,7 @@ module.exports = function(options) {
         return
       }
 
-      resolvedValue = resolveValue(value, map)
+      resolvedValue = resolveValue(value, map, decl.source)
 
       if (!preserve) {
         decl.value = resolvedValue
@@ -92,21 +92,23 @@ module.exports = function(options) {
  *
  * @param {String} value A property value known to contain CSS variable functions
  * @param {Object} map A map of variable names and values
+ * @param {Object} source source object of the declaration containing the rule
  * @return {String} A property value with all CSS variables substituted.
  */
 
-function resolveValue(value, map) {
+function resolveValue(value, map, source) {
   // matches `name[, fallback]`, captures "name" and "fallback"
   var RE_VAR = /([\w-]+)(?:\s*,\s*)?(.*)?/
   var balancedParens = balanced("(", ")", value)
   var varStartIndex = value.indexOf("var(")
-  var varRef = balanced("(", ")", value.substring(varStartIndex)).body
 
   if (!balancedParens) {
-    throw new SyntaxError("postcss-custom-properties: missing closing ')' in the value '" + value + "'")
+    throw new SyntaxError(gnuMessage("missing closing ')' in the value '" + value + "'", source))
   }
+
+  var varRef = balanced("(", ")", value.substring(varStartIndex)).body
   if (varRef === "") {
-    throw new Error("postcss-custom-properties: var() must contain a non-whitespace string")
+    throw new Error(gnuMessage("var() must contain a non-whitespace string", source))
   }
 
   var varFunc = VAR_FUNC_IDENTIFIER + "(" + varRef + ")"
@@ -114,7 +116,7 @@ function resolveValue(value, map) {
   var varResult = varRef.replace(RE_VAR, function(_, name, fallback) {
     var replacement = map[name]
     if (!replacement && !fallback) {
-      throw new Error("postcss-custom-properties: variable '" + name + "' is undefined")
+      throw new Error(gnuMessage("variable '" + name + "' is undefined", source))
     }
     if (!replacement && fallback) {
       return fallback
@@ -132,3 +134,13 @@ function resolveValue(value, map) {
 
   return value
 }
+
+/**
+ * return GNU style message
+ *
+ * @param {String} message
+ * @param {Object} source
+ */
+function gnuMessage(message, source) {
+  return (source ? (source.file ? source.file : "<css input>") + ":" + source.start.line + ":" + source.start.column : "") + " " + message
+}
diff --git a/test/index.js b/test/index.js
index 9196718..a6c2d8d 100755
--- a/test/index.js
+++ b/test/index.js
@@ -22,15 +22,15 @@ function compareFixtures(t, name, options) {
 test("throw errors", function(t) {
   t.throws(function() {
     return postcss(customProperties()).process(fixture("substitution-empty")).css
-  }, Error, "postcss-custom-properties: var() must contain a non-whitespace string", "throws an error when a variable function is empty")
+  }, /must contain a non-whitespace string/, "throws an error when a variable function is empty")
 
   t.throws(function() {
     return postcss(customProperties()).process(fixture("substitution-malformed")).css
-  }, SyntaxError, "postcss-custom-properties: missing closing \")\" in the value \"var(--t, rgba(0,0,0,0.5)\"", "throws an error when a variable function is malformed")
+  }, /missing closing/, "throws an error when a variable function is malformed")
 
   t.throws(function() {
     return postcss(customProperties()).process(fixture("substitution-undefined")).css
-  }, Error, "postcss-custom-properties: variable \"--t\" is undefined", "throws an error when a variable function references an undefined variable")
+  }, /is undefined/, "throws an error when a variable function references an undefined variable")
 
   t.end()
 })
-- 
2.33.1

