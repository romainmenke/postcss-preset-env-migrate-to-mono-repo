From 6fb7668fd18df40a0d1d8e78a5a11512c0afd12a Mon Sep 17 00:00:00 2001
From: Armano <armano2@users.noreply.github.com>
Date: Mon, 12 Jul 2021 03:35:27 +0200
Subject: [PATCH 09/11] feat: upgrade to PostCSS 8 (#11)

* feat: upgrade to PostCSS 8

* fix: preserve spacing
---
 .gitignore                        |  2 -
 .rollup.js                        | 16 --------
 .tape.js                          | 62 +++++++++++++++---------------
 .travis.yml                       |  3 +-
 index.js                          | 63 ++++++++++++++++++-------------
 lib/get-comma.js                  |  2 +-
 lib/get-image.js                  | 28 +++++++++-----
 lib/get-media.js                  |  6 +--
 lib/handle-invalidation.js        |  7 +++-
 lib/process-image-set.js          | 29 +++++++++-----
 package.json                      | 32 ++++++----------
 test/basic.expect.css             | 10 ++---
 test/basic.no-preserve.expect.css | 10 ++---
 13 files changed, 138 insertions(+), 132 deletions(-)
 delete mode 100644 .rollup.js

diff --git a/.gitignore b/.gitignore
index d920b78..f0ecdc3 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1,11 +1,9 @@
 node_modules
-index.*.*
 package-lock.json
 *.log*
 *.result.css
 .*
 !.editorconfig
 !.gitignore
-!.rollup.js
 !.tape.js
 !.travis.yml
diff --git a/.rollup.js b/.rollup.js
deleted file mode 100644
index ebe39f9..0000000
--- a/.rollup.js
+++ /dev/null
@@ -1,16 +0,0 @@
-import babel from 'rollup-plugin-babel';
-
-export default {
-	input: 'index.js',
-	output: [
-		{ file: 'index.cjs.js', format: 'cjs', sourcemap: true },
-		{ file: 'index.es.mjs', format: 'es', sourcemap: true }
-	],
-	plugins: [
-		babel({
-			presets: [
-				['@babel/env', { modules: false, targets: { node: 6 } }]
-			]
-		})
-	]
-};
diff --git a/.tape.js b/.tape.js
index cf56d4b..f70686f 100644
--- a/.tape.js
+++ b/.tape.js
@@ -1,38 +1,36 @@
 module.exports = {
-	'postcss-image-set-function': {
-		'basic': {
-			message: 'supports basic usage'
-		},
-		'basic:no-preserve': {
-			message: 'supports { preserve: false } usage',
-			options: {
-				preserve: false
-			}
-		},
-		'invalid': {
-			message: 'ignores invalid usage',
-			expect: 'invalid.css',
-			result: 'invalid.css'
+	'basic': {
+		message: 'supports basic usage'
+	},
+	'basic:no-preserve': {
+		message: 'supports { preserve: false } usage',
+		options: {
+			preserve: false
+		}
+	},
+	'invalid': {
+		message: 'ignores invalid usage',
+		expect: 'invalid.css',
+		result: 'invalid.css'
+	},
+	'invalid:warn': {
+		message: 'warns invalid usage when { onvalid: "warn" }',
+		options: {
+			oninvalid: 'warn'
 		},
-		'invalid:warn': {
-			message: 'warns invalid usage when { onvalid: "warn" }',
-			options: {
-				oninvalid: 'warn'
-			},
-			expect: 'invalid.css',
-			result: 'invalid.css',
-			warning: 10
+		expect: 'invalid.css',
+		result: 'invalid.css',
+		warnings: 10
+	},
+	'invalid:throw': {
+		message: 'throws invalid usage when { onvalid: "throw" }',
+		options: {
+			oninvalid: 'throw'
 		},
-		'invalid:throw': {
-			message: 'throws invalid usage when { onvalid: "throw" }',
-			options: {
-				oninvalid: 'throw'
-			},
-			expect: 'invalid.css',
-			result: 'invalid.css',
-			error: {
-				message: /unexpected image/
-			}
+		expect: 'invalid.css',
+		result: 'invalid.css',
+		error: {
+			message: /unexpected image/
 		}
 	}
 };
diff --git a/.travis.yml b/.travis.yml
index e1f11a5..6b7feec 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -3,7 +3,8 @@
 language: node_js
 
 node_js:
-  - 6
+  - 10
+  - 12
 
 install:
   - npm install --ignore-scripts
diff --git a/index.js b/index.js
index bae3144..5aa4063 100644
--- a/index.js
+++ b/index.js
@@ -1,35 +1,44 @@
-import postcss from 'postcss';
-import valueParser from 'postcss-values-parser';
-import processImageSet from './lib/process-image-set';
+const { parse } = require('postcss-values-parser');
+const processImageSet = require('./lib/process-image-set');
 
-const imageSetValueMatchRegExp = /(^|[^\w-])(-webkit-)?image-set\(/i
-const imageSetFunctionMatchRegExp = /^(-webkit-)?image-set$/i
+const imageSetValueMatchRegExp = /(^|[^\w-])(-webkit-)?image-set\(/i;
+const imageSetFunctionMatchRegExp = /^(-webkit-)?image-set$/i;
 
-export default postcss.plugin('postcss-image-set-function', opts => {
+/**
+ * @param {{preserve?: boolean, oninvalid?: string}} opts
+ * @returns {import('postcss').Plugin}
+ */
+module.exports = function creator(opts) {
 	// prepare options
 	const preserve = 'preserve' in Object(opts) ? Boolean(opts.preserve) : true;
 	const oninvalid = 'oninvalid' in Object(opts) ? opts.oninvalid : 'ignore';
 
-	return (root, result) => {
-		// for every declaration
-		root.walkDecls(decl => {
-			const { value } = decl;
+	return {
+		postcssPlugin: 'postcss-image-set-function',
+		Once(root, helpers) {
+			// for every declaration
+			root.walkDecls(decl => {
+				const {value} = decl;
 
-			// if a declaration likely uses an image-set() function
-			if (imageSetValueMatchRegExp.test(value)) {
-				const valueAST = valueParser(value).parse();
+				// if a declaration likely uses an image-set() function
+				if (imageSetValueMatchRegExp.test(value)) {
+					const valueAST = parse(value);
 
-				// process every image-set() function
-				valueAST.walkType('func', node => {
-					if (imageSetFunctionMatchRegExp.test(node.value)) {
-						processImageSet(
-							node.nodes.slice(1, -1),
-							decl,
-							{ decl, oninvalid, preserve, result }
-						);
-					}
-				})
-			}
-		})
-	}
-});
+					// process every image-set() function
+					valueAST.walkFuncs(node => {
+						if (imageSetFunctionMatchRegExp.test(node.name)) {
+							processImageSet(node.nodes, decl, {
+								decl,
+								oninvalid,
+								preserve,
+								result: helpers.result,
+							});
+						}
+					});
+				}
+			});
+		},
+	};
+};
+
+module.exports.postcss = true;
diff --git a/lib/get-comma.js b/lib/get-comma.js
index 6b2f8be..537e046 100644
--- a/lib/get-comma.js
+++ b/lib/get-comma.js
@@ -1,2 +1,2 @@
 // return whether a node is a valid comma
-export default node => Object(node).type === 'comma';
+module.exports = node => Object(node).type === 'punctuation' && Object(node).value === ',';
diff --git a/lib/get-image.js b/lib/get-image.js
index 84061ba..8f26a52 100644
--- a/lib/get-image.js
+++ b/lib/get-image.js
@@ -1,13 +1,23 @@
-const imageSetFunctionMatchRegExp = /^(-webkit-)?image-set$/i
+const imageSetFunctionMatchRegExp = /^(-webkit-)?image-set$/i;
 
-// return a valid image
-export default node =>
+const imageFuncRegexp = /^(cross-fade|image|(repeating-)?(conic|linear|radial)-gradient|url)$/i;
+
+/**
+ * return a valid image
+ * @param {import('postcss-values-parser').ChildNode} node
+ * @returns {string|*|boolean}
+ */
+module.exports = (node) =>
 	// <url> | <image()> | <cross-fade()> | <gradient>
 	// the image-set() function can not be nested inside of itself
-	Object(node).type === 'func' && /^(cross-fade|image|(repeating-)?(conic|linear|radial)-gradient|url)$/i.test(node.value) && !(
-		node.parent.parent && node.parent.parent.type === 'func' && imageSetFunctionMatchRegExp.test(node.parent.parent.value)
+	Object(node).type === 'func' &&
+	imageFuncRegexp.test(node.name) &&
+	!(
+		node.parent.parent &&
+		node.parent.parent.type === 'func' &&
+		imageSetFunctionMatchRegExp.test(node.parent.parent.name)
 	)
-	? String(node)
-: Object(node).type === 'string'
-	? node.value
-: false;
+		? (node.raws.before || '') + String(node)
+		: Object(node).type === 'quoted'
+		? node.value
+		: false;
diff --git a/lib/get-media.js b/lib/get-media.js
index 5482dea..ad03c47 100644
--- a/lib/get-media.js
+++ b/lib/get-media.js
@@ -1,10 +1,10 @@
-import postcss from 'postcss';
+const postcss = require('postcss');
 
 const dpiRatios = { dpcm: 2.54, dpi: 1, dppx: 96, x: 96 };
 
 // return a valid @media rule
-export default (node, mediasByDpr) => {
-	if (Object(node).type === 'number' && node.unit in dpiRatios) {
+module.exports = (node, mediasByDpr) => {
+	if (Object(node).type === 'numeric' && node.unit in dpiRatios) {
 		// calculate min-device-pixel-ratio and min-resolution
 		const dpi = Number(node.value) * dpiRatios[node.unit.toLowerCase()];
 		const dpr = Math.floor(dpi / dpiRatios.x * 100) / 100;
diff --git a/lib/handle-invalidation.js b/lib/handle-invalidation.js
index 67b4991..4f17abd 100644
--- a/lib/handle-invalidation.js
+++ b/lib/handle-invalidation.js
@@ -1,4 +1,9 @@
-export default (opts, message, word) => {
+/**
+ * @param {{ decl: import('postcss').Declaration, oninvalid: string, preserve: boolean, result: import('postcss').Result }} opts
+ * @param {string} message
+ * @param {import('postcss-values-parser').ChildNode} word
+ */
+module.exports = (opts, message, word) => {
 	if (opts.oninvalid === 'warn') {
 		opts.decl.warn(opts.result, message, { word: String(word) });
 	} else if (opts.oninvalid === 'throw') {
diff --git a/lib/process-image-set.js b/lib/process-image-set.js
index 2a32935..0f9a76b 100644
--- a/lib/process-image-set.js
+++ b/lib/process-image-set.js
@@ -1,9 +1,15 @@
-import getComma from './get-comma';
-import getImage from './get-image';
-import getMedia from './get-media';
-import handleInvalidation from './handle-invalidation';
+const getComma = require('./get-comma');
+const getImage = require('./get-image');
+const getMedia = require('./get-media');
+const handleInvalidation = require('./handle-invalidation');
 
-export default (imageSetOptionNodes, decl, opts) => {
+/**
+ * @param {import('postcss-values-parser').ChildNode[]} imageSetOptionNodes
+ * @param {import('postcss').Declaration} decl
+ * @param {{ decl: import('postcss').Declaration, oninvalid: string, preserve: boolean, result: import('postcss').Result }} opts
+ * @returns {void}
+ */
+module.exports = (imageSetOptionNodes, decl, opts) => {
 	const parent = decl.parent;
 	const mediasByDpr = {};
 
@@ -19,11 +25,14 @@ export default (imageSetOptionNodes, decl, opts) => {
 
 		// handle invalidations
 		if (!comma) {
-			return handleInvalidation(opts, 'unexpected comma', imageSetOptionNodes[index]);
+			handleInvalidation(opts, 'unexpected comma', imageSetOptionNodes[index]);
+			return;
 		} else if (!value) {
-			return handleInvalidation(opts, 'unexpected image', imageSetOptionNodes[index + 1]);
+			handleInvalidation(opts, 'unexpected image', imageSetOptionNodes[index + 1]);
+			return;
 		} else if (!media) {
-			return handleInvalidation(opts, 'unexpected resolution', imageSetOptionNodes[index + 2]);
+			handleInvalidation(opts, 'unexpected resolution', imageSetOptionNodes[index + 2]);
+			return;
 		}
 
 		// prepare @media { decl: <image> }
@@ -36,7 +45,9 @@ export default (imageSetOptionNodes, decl, opts) => {
 		index += 3
 	}
 
-	const medias = Object.keys(mediasByDpr).sort((a, b) => a - b).map(params => mediasByDpr[params]);
+	const medias = Object.keys(mediasByDpr)
+		.sort((a, b) => a - b)
+		.map(params => mediasByDpr[params]);
 
 	// conditionally prepend previous siblings
 	if (medias.length) {
diff --git a/package.json b/package.json
index b79b6b3..c84fe62 100644
--- a/package.json
+++ b/package.json
@@ -7,43 +7,33 @@
   "repository": "jonathantneal/postcss-image-set-function",
   "homepage": "https://github.com/jonathantneal/postcss-image-set-function#readme",
   "bugs": "https://github.com/jonathantneal/postcss-image-set-function/issues",
-  "main": "index.cjs.js",
-  "module": "index.es.mjs",
+  "main": "index.js",
   "files": [
-    "index.cjs.js",
-    "index.cjs.js.map",
-    "index.es.mjs",
-    "index.es.mjs.map"
+    "lib/"
   ],
   "scripts": {
     "prepublishOnly": "npm test",
-    "pretest": "rollup -c .rollup.js --silent",
     "test": "echo 'Running tests...'; npm run test:js && npm run test:tape",
-    "test:ec": "echint --ignore index.*.js test",
     "test:js": "eslint *.js --cache --ignore-path .gitignore --quiet",
     "test:tape": "postcss-tape"
   },
   "engines": {
-    "node": ">=6.0.0"
+    "node": ">=10.0.0"
   },
   "dependencies": {
-    "postcss": "^7.0.2",
-    "postcss-values-parser": "^2.0.0"
+    "postcss-values-parser": "^4.0.0"
+  },
+  "peerDependencies": {
+    "postcss": "^8.0.0"
   },
   "devDependencies": {
-    "@babel/core": "^7.1.0",
-    "@babel/preset-env": "^7.1.0",
-    "babel-eslint": "^9.0.0",
-    "eslint": "^5.6.0",
+    "eslint": "^7.22.0",
     "eslint-config-dev": "^2.0.0",
-    "postcss-tape": "^2.2.0",
-    "pre-commit": "^1.2.2",
-    "rollup": "^0.66.0",
-    "rollup-plugin-babel": "^4.0.3"
+    "postcss": "^8.2.8",
+    "postcss-tape": "^6.0.0"
   },
   "eslintConfig": {
-    "extends": "dev",
-    "parser": "babel-eslint"
+    "extends": "dev"
   },
   "keywords": [
     "postcss",
diff --git a/test/basic.expect.css b/test/basic.expect.css
index fd6c243..4ad8a54 100644
--- a/test/basic.expect.css
+++ b/test/basic.expect.css
@@ -161,13 +161,13 @@
 
 .test-no-url {
 	order: 1;
-	background-image: img/test.png;
+	background-image: "img/test.png";
 }
 
 @media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {
 
 .test-no-url {
-	background-image: img/test-2x.png;
+	background-image: "img/test-2x.png";
 }
 }
 
@@ -177,20 +177,20 @@
 		"img/test-2x.png" 2x
 	);
 	order: 2;
-	background-image: img/test.png;
+	background-image: "img/test.png";
 }
 
 @media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {
 
 .test-no-url {
-	background-image: img/test-2x.png;
+	background-image: "img/test-2x.png";
 }
 }
 
 @media (-webkit-min-device-pixel-ratio: 6.25), (min-resolution: 600dpi) {
 
 .test-no-url {
-	background-image: my-img-print.png;
+	background-image: "my-img-print.png";
 }
 }
 
diff --git a/test/basic.no-preserve.expect.css b/test/basic.no-preserve.expect.css
index 4f594a9..2a0f6f2 100644
--- a/test/basic.no-preserve.expect.css
+++ b/test/basic.no-preserve.expect.css
@@ -134,32 +134,32 @@
 
 .test-no-url {
 	order: 1;
-	background-image: img/test.png;
+	background-image: "img/test.png";
 }
 
 @media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {
 
 .test-no-url {
-	background-image: img/test-2x.png;
+	background-image: "img/test-2x.png";
 }
 }
 
 .test-no-url {
 	order: 2;
-	background-image: img/test.png;
+	background-image: "img/test.png";
 }
 
 @media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {
 
 .test-no-url {
-	background-image: img/test-2x.png;
+	background-image: "img/test-2x.png";
 }
 }
 
 @media (-webkit-min-device-pixel-ratio: 6.25), (min-resolution: 600dpi) {
 
 .test-no-url {
-	background-image: my-img-print.png;
+	background-image: "my-img-print.png";
 }
 }
 
-- 
2.33.1

