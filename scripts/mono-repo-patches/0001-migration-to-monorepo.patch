From 6576ffa56323e5ff8d1a459d08f5c865e939655f Mon Sep 17 00:00:00 2001
From: romainmenke <romainmenke@gmail.com>
Date: Sun, 7 Nov 2021 12:34:53 +0100
Subject: [PATCH 1/9] migration to monorepo

---
 .../.editorconfig => .editorconfig            |   0
 .eslintrc.json                                |  30 +
 .github/bin/install-and-test-all-packages.sh  |  19 +
 .github/workflows/test.yml                    |  42 +
 .gitignore                                    |   5 +
 .prettierignore                               |   1 +
 .stylelintignore                              |   1 +
 LICENSE.md                                    | 108 +++
 README.md                                     |   1 +
 cli/postcss-base-plugin-cli/.gitignore        |  12 +
 cli/postcss-base-plugin-cli/CHANGELOG.md      |   1 +
 cli/postcss-base-plugin-cli/CONTRIBUTING.md   |  65 ++
 cli/postcss-base-plugin-cli/INSTALL.md        |   3 +
 cli/postcss-base-plugin-cli/LICENSE.md        | 108 +++
 cli/postcss-base-plugin-cli/README.md         |   3 +
 cli/postcss-base-plugin-cli/dist/.gitkeep     |   0
 cli/postcss-base-plugin-cli/package.json      |  34 +
 cli/postcss-base-plugin-cli/src/cli.ts        |  17 +
 cli/postcss-base-plugin-cli/test/basic.css    |   3 +
 .../test/basic.expect.css                     |   3 +
 cli/postcss-base-plugin-cli/test/test.sh      |  28 +
 cli/postcss-base-plugin-cli/tsconfig.json     |   9 +
 package.json                                  |  37 +
 packages/base-cli/.gitignore                  |  12 +
 packages/base-cli/CHANGELOG.md                |   1 +
 packages/base-cli/CONTRIBUTING.md             |  65 ++
 packages/base-cli/INSTALL.md                  |   3 +
 packages/base-cli/LICENSE.md                  | 108 +++
 packages/base-cli/README.md                   |   3 +
 packages/base-cli/package.json                |  26 +
 packages/base-cli/src/args.ts                 | 152 ++++
 packages/base-cli/src/index.ts                | 231 +++++
 packages/base-cli/stryker.conf.json           |  19 +
 packages/base-cli/test/test.mjs               | 318 +++++++
 packages/base-cli/tsconfig.json               |   7 +
 packages/convert-colors/.appveyor.yml         |  18 -
 packages/convert-colors/.travis.yml           |   9 -
 packages/convert-colors/package.json          |  14 +-
 packages/generate-test-cases/index.js         |  39 +
 packages/generate-test-cases/package.json     |  16 +
 packages/generate-test-cases/selector.js      |  35 +
 plugin-packs/postcss-preset-env/.editorconfig |  15 -
 plugin-packs/postcss-preset-env/.travis.yml   |  18 -
 plugin-packs/postcss-preset-env/package.json  |   8 +-
 plugins/css-blank-pseudo/.editorconfig        |  15 -
 plugins/css-blank-pseudo/.gitignore           |   1 -
 plugins/css-blank-pseudo/.travis.yml          |  11 -
 plugins/css-blank-pseudo/cli.js               | 136 +++
 plugins/css-blank-pseudo/cli.js.map           |   1 +
 plugins/css-blank-pseudo/package.json         |   7 +-
 plugins/css-has-pseudo/.editorconfig          |  15 -
 plugins/css-has-pseudo/.gitignore             |   1 -
 plugins/css-has-pseudo/.travis.yml            |  10 -
 plugins/css-has-pseudo/cli.js                 | 184 ++++
 plugins/css-has-pseudo/cli.js.map             |   1 +
 plugins/css-has-pseudo/package.json           |   5 +-
 .../css-prefers-color-scheme/.editorconfig    |  15 -
 .../.github/workflows/test.yml                |  18 -
 plugins/css-prefers-color-scheme/package.json |   5 +-
 plugins/postcss-base-plugin/.gitignore        |  12 +
 plugins/postcss-base-plugin/.tape.js          |   8 +
 plugins/postcss-base-plugin/CHANGELOG.md      |   1 +
 plugins/postcss-base-plugin/CONTRIBUTING.md   |  65 ++
 plugins/postcss-base-plugin/INSTALL.md        |   3 +
 plugins/postcss-base-plugin/LICENSE.md        | 108 +++
 plugins/postcss-base-plugin/README.md         |   3 +
 plugins/postcss-base-plugin/dist/.gitkeep     |   0
 plugins/postcss-base-plugin/package.json      |  42 +
 plugins/postcss-base-plugin/src/index.ts      |  18 +
 plugins/postcss-base-plugin/stryker.conf.json |  19 +
 plugins/postcss-base-plugin/test/basic.css    |   7 +
 .../postcss-base-plugin/test/basic.expect.css |   7 +
 plugins/postcss-base-plugin/test/example.css  |   7 +
 .../test/example.expect.css                   |   7 +
 plugins/postcss-base-plugin/tsconfig.json     |   9 +
 .../.editorconfig                             |  15 -
 .../.github/workflows/test.yml                |  18 -
 .../package.json                              |   3 +-
 .../postcss-color-mod-function/.editorconfig  |  15 -
 .../postcss-color-mod-function/.travis.yml    |   9 -
 .../postcss-color-mod-function/package.json   |   7 +-
 .../postcss-dir-pseudo-class/.editorconfig    |  15 -
 .../.github/workflows/test.yml                |  18 -
 plugins/postcss-dir-pseudo-class/package.json |   5 +-
 .../.editorconfig                             |  15 -
 .../.github/workflows/test.yml                |  18 -
 .../package.json                              |   5 +-
 .../yarn.lock                                 | 808 ------------------
 plugins/postcss-env-function/.editorconfig    |  15 -
 .../.github/workflows/test.yml                |  18 -
 plugins/postcss-env-function/package.json     |   3 +-
 plugins/postcss-focus-visible/.editorconfig   |  15 -
 .../.github/workflows/test.yml                |  18 -
 plugins/postcss-focus-visible/package.json    |   5 +-
 plugins/postcss-focus-within/.editorconfig    |  15 -
 .../.github/workflows/test.yml                |  18 -
 plugins/postcss-focus-within/package.json     |   5 +-
 plugins/postcss-gap-properties/.editorconfig  |  15 -
 .../.github/workflows/test.yml                |  18 -
 plugins/postcss-gap-properties/package.json   |   5 +-
 .../postcss-image-set-function/.editorconfig  |  19 -
 .../.github/workflows/test.yml                |  18 -
 .../postcss-image-set-function/package.json   |   5 +-
 plugins/postcss-lab-function/.editorconfig    |  15 -
 .../.github/workflows/test.yml                |  18 -
 plugins/postcss-lab-function/package.json     |   3 +-
 plugins/postcss-logical/.editorconfig         |  15 -
 .../.github/workflows/test.yml                |  18 -
 plugins/postcss-logical/package.json          |   6 +-
 plugins/postcss-nesting/.editorconfig         |  15 -
 plugins/postcss-nesting/package.json          |   7 +-
 plugins/postcss-nesting/stryker.conf.json     |  19 +
 plugins/postcss-nesting/test/document.css     |   7 +
 .../postcss-nesting/test/document.expect.css  |   8 +
 plugins/postcss-nesting/test/supports.css     |  11 +
 .../postcss-nesting/test/supports.expect.css  |  13 +
 .../postcss-overflow-shorthand/.editorconfig  |  15 -
 .../.github/workflows/test.yml                |  18 -
 .../postcss-overflow-shorthand/package.json   |   5 +-
 plugins/postcss-place/.editorconfig           |  15 -
 .../postcss-place/.github/workflows/test.yml  |  18 -
 plugins/postcss-place/.rollup.js              |   2 +-
 plugins/postcss-place/package.json            |   3 +-
 .../.editorconfig                             |  15 -
 .../.github/workflows/test.yml                |  18 -
 .../package.json                              |   5 +-
 rollup/cli.js                                 |  42 +
 rollup/cli.ts.js                              |  44 +
 rollup/default.js                             |  24 +
 rollup/default.ts.js                          |  26 +
 tsconfig.json                                 |  11 +
 131 files changed, 2471 insertions(+), 1476 deletions(-)
 rename packages/convert-colors/.editorconfig => .editorconfig (100%)
 create mode 100644 .eslintrc.json
 create mode 100644 .github/bin/install-and-test-all-packages.sh
 create mode 100644 .github/workflows/test.yml
 create mode 100644 .gitignore
 create mode 100644 .prettierignore
 create mode 100644 .stylelintignore
 create mode 100644 LICENSE.md
 create mode 100644 README.md
 create mode 100644 cli/postcss-base-plugin-cli/.gitignore
 create mode 100644 cli/postcss-base-plugin-cli/CHANGELOG.md
 create mode 100644 cli/postcss-base-plugin-cli/CONTRIBUTING.md
 create mode 100644 cli/postcss-base-plugin-cli/INSTALL.md
 create mode 100644 cli/postcss-base-plugin-cli/LICENSE.md
 create mode 100644 cli/postcss-base-plugin-cli/README.md
 create mode 100644 cli/postcss-base-plugin-cli/dist/.gitkeep
 create mode 100644 cli/postcss-base-plugin-cli/package.json
 create mode 100644 cli/postcss-base-plugin-cli/src/cli.ts
 create mode 100644 cli/postcss-base-plugin-cli/test/basic.css
 create mode 100644 cli/postcss-base-plugin-cli/test/basic.expect.css
 create mode 100644 cli/postcss-base-plugin-cli/test/test.sh
 create mode 100644 cli/postcss-base-plugin-cli/tsconfig.json
 create mode 100644 package.json
 create mode 100644 packages/base-cli/.gitignore
 create mode 100644 packages/base-cli/CHANGELOG.md
 create mode 100644 packages/base-cli/CONTRIBUTING.md
 create mode 100644 packages/base-cli/INSTALL.md
 create mode 100644 packages/base-cli/LICENSE.md
 create mode 100644 packages/base-cli/README.md
 create mode 100644 packages/base-cli/package.json
 create mode 100644 packages/base-cli/src/args.ts
 create mode 100644 packages/base-cli/src/index.ts
 create mode 100644 packages/base-cli/stryker.conf.json
 create mode 100644 packages/base-cli/test/test.mjs
 create mode 100644 packages/base-cli/tsconfig.json
 delete mode 100644 packages/convert-colors/.appveyor.yml
 delete mode 100644 packages/convert-colors/.travis.yml
 create mode 100644 packages/generate-test-cases/index.js
 create mode 100644 packages/generate-test-cases/package.json
 create mode 100644 packages/generate-test-cases/selector.js
 delete mode 100644 plugin-packs/postcss-preset-env/.editorconfig
 delete mode 100644 plugin-packs/postcss-preset-env/.travis.yml
 delete mode 100644 plugins/css-blank-pseudo/.editorconfig
 delete mode 100644 plugins/css-blank-pseudo/.travis.yml
 create mode 100755 plugins/css-blank-pseudo/cli.js
 create mode 100644 plugins/css-blank-pseudo/cli.js.map
 delete mode 100644 plugins/css-has-pseudo/.editorconfig
 delete mode 100644 plugins/css-has-pseudo/.travis.yml
 create mode 100755 plugins/css-has-pseudo/cli.js
 create mode 100644 plugins/css-has-pseudo/cli.js.map
 delete mode 100644 plugins/css-prefers-color-scheme/.editorconfig
 delete mode 100644 plugins/css-prefers-color-scheme/.github/workflows/test.yml
 create mode 100644 plugins/postcss-base-plugin/.gitignore
 create mode 100644 plugins/postcss-base-plugin/.tape.js
 create mode 100644 plugins/postcss-base-plugin/CHANGELOG.md
 create mode 100644 plugins/postcss-base-plugin/CONTRIBUTING.md
 create mode 100644 plugins/postcss-base-plugin/INSTALL.md
 create mode 100644 plugins/postcss-base-plugin/LICENSE.md
 create mode 100644 plugins/postcss-base-plugin/README.md
 create mode 100644 plugins/postcss-base-plugin/dist/.gitkeep
 create mode 100644 plugins/postcss-base-plugin/package.json
 create mode 100644 plugins/postcss-base-plugin/src/index.ts
 create mode 100644 plugins/postcss-base-plugin/stryker.conf.json
 create mode 100644 plugins/postcss-base-plugin/test/basic.css
 create mode 100644 plugins/postcss-base-plugin/test/basic.expect.css
 create mode 100644 plugins/postcss-base-plugin/test/example.css
 create mode 100644 plugins/postcss-base-plugin/test/example.expect.css
 create mode 100644 plugins/postcss-base-plugin/tsconfig.json
 delete mode 100644 plugins/postcss-color-functional-notation/.editorconfig
 delete mode 100644 plugins/postcss-color-functional-notation/.github/workflows/test.yml
 delete mode 100644 plugins/postcss-color-mod-function/.editorconfig
 delete mode 100644 plugins/postcss-color-mod-function/.travis.yml
 delete mode 100644 plugins/postcss-dir-pseudo-class/.editorconfig
 delete mode 100644 plugins/postcss-dir-pseudo-class/.github/workflows/test.yml
 delete mode 100644 plugins/postcss-double-position-gradients/.editorconfig
 delete mode 100644 plugins/postcss-double-position-gradients/.github/workflows/test.yml
 delete mode 100644 plugins/postcss-double-position-gradients/yarn.lock
 delete mode 100644 plugins/postcss-env-function/.editorconfig
 delete mode 100644 plugins/postcss-env-function/.github/workflows/test.yml
 delete mode 100644 plugins/postcss-focus-visible/.editorconfig
 delete mode 100644 plugins/postcss-focus-visible/.github/workflows/test.yml
 delete mode 100644 plugins/postcss-focus-within/.editorconfig
 delete mode 100644 plugins/postcss-focus-within/.github/workflows/test.yml
 delete mode 100644 plugins/postcss-gap-properties/.editorconfig
 delete mode 100644 plugins/postcss-gap-properties/.github/workflows/test.yml
 delete mode 100644 plugins/postcss-image-set-function/.editorconfig
 delete mode 100644 plugins/postcss-image-set-function/.github/workflows/test.yml
 delete mode 100644 plugins/postcss-lab-function/.editorconfig
 delete mode 100644 plugins/postcss-lab-function/.github/workflows/test.yml
 delete mode 100644 plugins/postcss-logical/.editorconfig
 delete mode 100644 plugins/postcss-logical/.github/workflows/test.yml
 delete mode 100644 plugins/postcss-nesting/.editorconfig
 create mode 100644 plugins/postcss-nesting/stryker.conf.json
 create mode 100644 plugins/postcss-nesting/test/document.css
 create mode 100644 plugins/postcss-nesting/test/document.expect.css
 create mode 100644 plugins/postcss-nesting/test/supports.css
 create mode 100644 plugins/postcss-nesting/test/supports.expect.css
 delete mode 100644 plugins/postcss-overflow-shorthand/.editorconfig
 delete mode 100644 plugins/postcss-overflow-shorthand/.github/workflows/test.yml
 delete mode 100644 plugins/postcss-place/.editorconfig
 delete mode 100644 plugins/postcss-place/.github/workflows/test.yml
 delete mode 100644 plugins/postcss-pseudo-class-any-link/.editorconfig
 delete mode 100644 plugins/postcss-pseudo-class-any-link/.github/workflows/test.yml
 create mode 100644 rollup/cli.js
 create mode 100644 rollup/cli.ts.js
 create mode 100644 rollup/default.js
 create mode 100644 rollup/default.ts.js
 create mode 100644 tsconfig.json

diff --git a/packages/convert-colors/.editorconfig b/.editorconfig
similarity index 100%
rename from packages/convert-colors/.editorconfig
rename to .editorconfig
diff --git a/.eslintrc.json b/.eslintrc.json
new file mode 100644
index 0000000..bf2419d
--- /dev/null
+++ b/.eslintrc.json
@@ -0,0 +1,30 @@
+{
+  "env": {
+    "es6": true,
+    "node": true
+  },
+  "extends": "eslint:recommended",
+  "parserOptions": {
+    "ecmaVersion": 2020,
+    "sourceType": "module"
+  },
+  "overrides": [
+		{
+			"files": [
+				"**/*.ts"
+			],
+			"extends": [
+				"plugin:@typescript-eslint/eslint-recommended",
+				"plugin:@typescript-eslint/recommended"
+			],
+			"parser": "@typescript-eslint/parser",
+			"plugins": [
+				"@typescript-eslint"
+			],
+			"rules": {
+				"no-shadow": "off",
+				"@typescript-eslint/no-shadow": "error"
+			}
+		}
+	]
+}
diff --git a/.github/bin/install-and-test-all-packages.sh b/.github/bin/install-and-test-all-packages.sh
new file mode 100644
index 0000000..70d36e7
--- /dev/null
+++ b/.github/bin/install-and-test-all-packages.sh
@@ -0,0 +1,19 @@
+set -e
+
+start_dir=$(pwd)
+
+for package in $(ls -d ./cli); do
+	echo "Installing and testing $package"
+	cd $package
+	npm install --ignore-scripts
+	npm test
+	cd $start_dir
+done
+
+for package in $(ls -d ./plugins); do
+	echo "Installing and testing $package"
+	cd $package
+	npm install --ignore-scripts
+	npm test
+	cd $start_dir
+done
diff --git a/.github/workflows/test.yml b/.github/workflows/test.yml
new file mode 100644
index 0000000..d649ba3
--- /dev/null
+++ b/.github/workflows/test.yml
@@ -0,0 +1,42 @@
+name: test
+on:
+  push:
+
+jobs:
+  build:
+    runs-on: ubuntu-latest
+    strategy:
+      matrix:
+        # All currently supported LTS versions + latest with workspaces support
+        node: [16, 17]
+    steps:
+      - uses: actions/checkout@v2
+      - uses: actions/setup-node@v2
+        with:
+          node-version: ${{ matrix.node }}
+
+      - run: npm install --ignore-scripts
+      - run: npm run build --workspaces --if-present
+      - run: npm run test --workspaces --if-present
+      - run: npm run stryker --workspaces --if-present
+
+  test:
+    runs-on: ubuntu-latest
+    strategy:
+      matrix:
+        # All currently supported LTS versions without workspaces support
+        node: [12, 14]
+    steps:
+      - uses: actions/checkout@v2
+      - uses: actions/setup-node@v2
+        with:
+          node-version: 16
+
+      - run: npm install --ignore-scripts
+      - run: npm run build --workspaces --if-present
+
+      - uses: actions/setup-node@v2
+        with:
+          node-version: ${{ matrix.node }}
+
+      - run: bash ./.github/bin/install-and-test-all-packages.sh
diff --git a/.gitignore b/.gitignore
new file mode 100644
index 0000000..54c98d8
--- /dev/null
+++ b/.gitignore
@@ -0,0 +1,5 @@
+node_modules
+package-lock.json
+yarn.lock
+reports
+.stryker-tmp
diff --git a/.prettierignore b/.prettierignore
new file mode 100644
index 0000000..72e8ffc
--- /dev/null
+++ b/.prettierignore
@@ -0,0 +1 @@
+*
diff --git a/.stylelintignore b/.stylelintignore
new file mode 100644
index 0000000..72e8ffc
--- /dev/null
+++ b/.stylelintignore
@@ -0,0 +1 @@
+*
diff --git a/LICENSE.md b/LICENSE.md
new file mode 100644
index 0000000..0bc1fa7
--- /dev/null
+++ b/LICENSE.md
@@ -0,0 +1,108 @@
+# CC0 1.0 Universal
+
+## Statement of Purpose
+
+The laws of most jurisdictions throughout the world automatically confer
+exclusive Copyright and Related Rights (defined below) upon the creator and
+subsequent owner(s) (each and all, an “owner”) of an original work of
+authorship and/or a database (each, a “Work”).
+
+Certain owners wish to permanently relinquish those rights to a Work for the
+purpose of contributing to a commons of creative, cultural and scientific works
+(“Commons”) that the public can reliably and without fear of later claims of
+infringement build upon, modify, incorporate in other works, reuse and
+redistribute as freely as possible in any form whatsoever and for any purposes,
+including without limitation commercial purposes. These owners may contribute
+to the Commons to promote the ideal of a free culture and the further
+production of creative, cultural and scientific works, or to gain reputation or
+greater distribution for their Work in part through the use and efforts of
+others.
+
+For these and/or other purposes and motivations, and without any expectation of
+additional consideration or compensation, the person associating CC0 with a
+Work (the “Affirmer”), to the extent that he or she is an owner of Copyright
+and Related Rights in the Work, voluntarily elects to apply CC0 to the Work and
+publicly distribute the Work under its terms, with knowledge of his or her
+Copyright and Related Rights in the Work and the meaning and intended legal
+effect of CC0 on those rights.
+
+1. Copyright and Related Rights. A Work made available under CC0 may be
+   protected by copyright and related or neighboring rights (“Copyright and
+   Related Rights”). Copyright and Related Rights include, but are not limited
+   to, the following:
+   1. the right to reproduce, adapt, distribute, perform, display, communicate,
+      and translate a Work;
+   2. moral rights retained by the original author(s) and/or performer(s);
+   3. publicity and privacy rights pertaining to a person’s image or likeness
+      depicted in a Work;
+   4. rights protecting against unfair competition in regards to a Work,
+      subject to the limitations in paragraph 4(i), below;
+   5. rights protecting the extraction, dissemination, use and reuse of data in
+      a Work;
+   6. database rights (such as those arising under Directive 96/9/EC of the
+      European Parliament and of the Council of 11 March 1996 on the legal
+      protection of databases, and under any national implementation thereof,
+      including any amended or successor version of such directive); and
+   7. other similar, equivalent or corresponding rights throughout the world
+      based on applicable law or treaty, and any national implementations
+      thereof.
+
+2. Waiver. To the greatest extent permitted by, but not in contravention of,
+   applicable law, Affirmer hereby overtly, fully, permanently, irrevocably and
+   unconditionally waives, abandons, and surrenders all of Affirmer’s Copyright
+   and Related Rights and associated claims and causes of action, whether now
+   known or unknown (including existing as well as future claims and causes of
+   action), in the Work (i) in all territories worldwide, (ii) for the maximum
+   duration provided by applicable law or treaty (including future time
+   extensions), (iii) in any current or future medium and for any number of
+   copies, and (iv) for any purpose whatsoever, including without limitation
+   commercial, advertising or promotional purposes (the “Waiver”). Affirmer
+   makes the Waiver for the benefit of each member of the public at large and
+   to the detriment of Affirmer’s heirs and successors, fully intending that
+   such Waiver shall not be subject to revocation, rescission, cancellation,
+   termination, or any other legal or equitable action to disrupt the quiet
+   enjoyment of the Work by the public as contemplated by Affirmer’s express
+   Statement of Purpose.
+
+3. Public License Fallback. Should any part of the Waiver for any reason be
+   judged legally invalid or ineffective under applicable law, then the Waiver
+   shall be preserved to the maximum extent permitted taking into account
+   Affirmer’s express Statement of Purpose. In addition, to the extent the
+   Waiver is so judged Affirmer hereby grants to each affected person a
+   royalty-free, non transferable, non sublicensable, non exclusive,
+   irrevocable and unconditional license to exercise Affirmer’s Copyright and
+   Related Rights in the Work (i) in all territories worldwide, (ii) for the
+   maximum duration provided by applicable law or treaty (including future time
+   extensions), (iii) in any current or future medium and for any number of
+   copies, and (iv) for any purpose whatsoever, including without limitation
+   commercial, advertising or promotional purposes (the “License”). The License
+   shall be deemed effective as of the date CC0 was applied by Affirmer to the
+   Work. Should any part of the License for any reason be judged legally
+   invalid or ineffective under applicable law, such partial invalidity or
+   ineffectiveness shall not invalidate the remainder of the License, and in
+   such case Affirmer hereby affirms that he or she will not (i) exercise any
+   of his or her remaining Copyright and Related Rights in the Work or (ii)
+   assert any associated claims and causes of action with respect to the Work,
+   in either case contrary to Affirmer’s express Statement of Purpose.
+
+4. Limitations and Disclaimers.
+   1. No trademark or patent rights held by Affirmer are waived, abandoned,
+      surrendered, licensed or otherwise affected by this document.
+   2. Affirmer offers the Work as-is and makes no representations or warranties
+      of any kind concerning the Work, express, implied, statutory or
+      otherwise, including without limitation warranties of title,
+      merchantability, fitness for a particular purpose, non infringement, or
+      the absence of latent or other defects, accuracy, or the present or
+      absence of errors, whether or not discoverable, all to the greatest
+      extent permissible under applicable law.
+   3. Affirmer disclaims responsibility for clearing rights of other persons
+      that may apply to the Work or any use thereof, including without
+      limitation any person’s Copyright and Related Rights in the Work.
+      Further, Affirmer disclaims responsibility for obtaining any necessary
+      consents, permissions or other rights required for any use of the Work.
+   4. Affirmer understands and acknowledges that Creative Commons is not a
+      party to this document and has no duty or obligation with respect to this
+      CC0 or use of the Work.
+
+For more information, please see
+http://creativecommons.org/publicdomain/zero/1.0/.
diff --git a/README.md b/README.md
new file mode 100644
index 0000000..d98a19b
--- /dev/null
+++ b/README.md
@@ -0,0 +1 @@
+# TODO : make a README for this mono repo
diff --git a/cli/postcss-base-plugin-cli/.gitignore b/cli/postcss-base-plugin-cli/.gitignore
new file mode 100644
index 0000000..b59d151
--- /dev/null
+++ b/cli/postcss-base-plugin-cli/.gitignore
@@ -0,0 +1,12 @@
+node_modules
+package-lock.json
+yarn.lock
+*.log*
+*.result.css
+.*
+dist/*
+!.editorconfig
+!.gitignore
+!.gitkeep
+!.rollup.js
+!.tape.js
diff --git a/cli/postcss-base-plugin-cli/CHANGELOG.md b/cli/postcss-base-plugin-cli/CHANGELOG.md
new file mode 100644
index 0000000..2475e12
--- /dev/null
+++ b/cli/postcss-base-plugin-cli/CHANGELOG.md
@@ -0,0 +1 @@
+# Changes to PostCSS Base Plugin
diff --git a/cli/postcss-base-plugin-cli/CONTRIBUTING.md b/cli/postcss-base-plugin-cli/CONTRIBUTING.md
new file mode 100644
index 0000000..c8bfa79
--- /dev/null
+++ b/cli/postcss-base-plugin-cli/CONTRIBUTING.md
@@ -0,0 +1,65 @@
+# Contributing to PostCSS Base Plugin
+
+You want to help? You rock! Now, take a moment to be sure your contributions
+make sense to everyone else.
+
+## Reporting Issues
+
+Found a problem? Want a new feature?
+
+- See if your issue or idea has [already been reported].
+- Provide a [reduced test case] or a [live example].
+
+Remember, a bug is a _demonstrable problem_ caused by _our_ code.
+
+## Submitting Pull Requests
+
+Pull requests are the greatest contributions, so be sure they are focused in
+scope and avoid unrelated commits.
+
+1. To begin; [fork this project], clone your fork, and add our upstream.
+   ```bash
+   # Clone your fork of the repo into the current directory
+   git clone git@github.com:YOUR_USER/postcss-dir-pseudo-class.git
+
+   # Navigate to the newly cloned directory
+   cd postcss-dir-pseudo-class
+
+   # Assign the original repo to a remote called "upstream"
+   git remote add upstream git@github.com:jonathantneal/postcss-dir-pseudo-class.git
+
+   # Install the tools necessary for testing
+   npm install
+   ```
+
+2. Create a branch for your feature or fix:
+   ```bash
+   # Move into a new branch for your feature
+   git checkout -b feature/thing
+   ```
+   ```bash
+   # Move into a new branch for your fix
+   git checkout -b fix/something
+   ```
+
+3. If your code follows our practices, then push your feature branch:
+   ```bash
+   # Test current code
+   npm test
+   ```
+   ```bash
+   # Push the branch for your new feature
+   git push origin feature/thing
+   ```
+   ```bash
+   # Or, push the branch for your update
+   git push origin update/something
+   ```
+
+That’s it! Now [open a pull request] with a clear title and description.
+
+[already been reported]: issues
+[fork this project]:     fork
+[live example]:          https://codepen.io/pen
+[open a pull request]:   https://help.github.com/articles/using-pull-requests/
+[reduced test case]:     https://css-tricks.com/reduced-test-cases/
diff --git a/cli/postcss-base-plugin-cli/INSTALL.md b/cli/postcss-base-plugin-cli/INSTALL.md
new file mode 100644
index 0000000..ceacefa
--- /dev/null
+++ b/cli/postcss-base-plugin-cli/INSTALL.md
@@ -0,0 +1,3 @@
+# Installing PostCSS Base Plugin
+
+<!-- TODO -->
diff --git a/cli/postcss-base-plugin-cli/LICENSE.md b/cli/postcss-base-plugin-cli/LICENSE.md
new file mode 100644
index 0000000..0bc1fa7
--- /dev/null
+++ b/cli/postcss-base-plugin-cli/LICENSE.md
@@ -0,0 +1,108 @@
+# CC0 1.0 Universal
+
+## Statement of Purpose
+
+The laws of most jurisdictions throughout the world automatically confer
+exclusive Copyright and Related Rights (defined below) upon the creator and
+subsequent owner(s) (each and all, an “owner”) of an original work of
+authorship and/or a database (each, a “Work”).
+
+Certain owners wish to permanently relinquish those rights to a Work for the
+purpose of contributing to a commons of creative, cultural and scientific works
+(“Commons”) that the public can reliably and without fear of later claims of
+infringement build upon, modify, incorporate in other works, reuse and
+redistribute as freely as possible in any form whatsoever and for any purposes,
+including without limitation commercial purposes. These owners may contribute
+to the Commons to promote the ideal of a free culture and the further
+production of creative, cultural and scientific works, or to gain reputation or
+greater distribution for their Work in part through the use and efforts of
+others.
+
+For these and/or other purposes and motivations, and without any expectation of
+additional consideration or compensation, the person associating CC0 with a
+Work (the “Affirmer”), to the extent that he or she is an owner of Copyright
+and Related Rights in the Work, voluntarily elects to apply CC0 to the Work and
+publicly distribute the Work under its terms, with knowledge of his or her
+Copyright and Related Rights in the Work and the meaning and intended legal
+effect of CC0 on those rights.
+
+1. Copyright and Related Rights. A Work made available under CC0 may be
+   protected by copyright and related or neighboring rights (“Copyright and
+   Related Rights”). Copyright and Related Rights include, but are not limited
+   to, the following:
+   1. the right to reproduce, adapt, distribute, perform, display, communicate,
+      and translate a Work;
+   2. moral rights retained by the original author(s) and/or performer(s);
+   3. publicity and privacy rights pertaining to a person’s image or likeness
+      depicted in a Work;
+   4. rights protecting against unfair competition in regards to a Work,
+      subject to the limitations in paragraph 4(i), below;
+   5. rights protecting the extraction, dissemination, use and reuse of data in
+      a Work;
+   6. database rights (such as those arising under Directive 96/9/EC of the
+      European Parliament and of the Council of 11 March 1996 on the legal
+      protection of databases, and under any national implementation thereof,
+      including any amended or successor version of such directive); and
+   7. other similar, equivalent or corresponding rights throughout the world
+      based on applicable law or treaty, and any national implementations
+      thereof.
+
+2. Waiver. To the greatest extent permitted by, but not in contravention of,
+   applicable law, Affirmer hereby overtly, fully, permanently, irrevocably and
+   unconditionally waives, abandons, and surrenders all of Affirmer’s Copyright
+   and Related Rights and associated claims and causes of action, whether now
+   known or unknown (including existing as well as future claims and causes of
+   action), in the Work (i) in all territories worldwide, (ii) for the maximum
+   duration provided by applicable law or treaty (including future time
+   extensions), (iii) in any current or future medium and for any number of
+   copies, and (iv) for any purpose whatsoever, including without limitation
+   commercial, advertising or promotional purposes (the “Waiver”). Affirmer
+   makes the Waiver for the benefit of each member of the public at large and
+   to the detriment of Affirmer’s heirs and successors, fully intending that
+   such Waiver shall not be subject to revocation, rescission, cancellation,
+   termination, or any other legal or equitable action to disrupt the quiet
+   enjoyment of the Work by the public as contemplated by Affirmer’s express
+   Statement of Purpose.
+
+3. Public License Fallback. Should any part of the Waiver for any reason be
+   judged legally invalid or ineffective under applicable law, then the Waiver
+   shall be preserved to the maximum extent permitted taking into account
+   Affirmer’s express Statement of Purpose. In addition, to the extent the
+   Waiver is so judged Affirmer hereby grants to each affected person a
+   royalty-free, non transferable, non sublicensable, non exclusive,
+   irrevocable and unconditional license to exercise Affirmer’s Copyright and
+   Related Rights in the Work (i) in all territories worldwide, (ii) for the
+   maximum duration provided by applicable law or treaty (including future time
+   extensions), (iii) in any current or future medium and for any number of
+   copies, and (iv) for any purpose whatsoever, including without limitation
+   commercial, advertising or promotional purposes (the “License”). The License
+   shall be deemed effective as of the date CC0 was applied by Affirmer to the
+   Work. Should any part of the License for any reason be judged legally
+   invalid or ineffective under applicable law, such partial invalidity or
+   ineffectiveness shall not invalidate the remainder of the License, and in
+   such case Affirmer hereby affirms that he or she will not (i) exercise any
+   of his or her remaining Copyright and Related Rights in the Work or (ii)
+   assert any associated claims and causes of action with respect to the Work,
+   in either case contrary to Affirmer’s express Statement of Purpose.
+
+4. Limitations and Disclaimers.
+   1. No trademark or patent rights held by Affirmer are waived, abandoned,
+      surrendered, licensed or otherwise affected by this document.
+   2. Affirmer offers the Work as-is and makes no representations or warranties
+      of any kind concerning the Work, express, implied, statutory or
+      otherwise, including without limitation warranties of title,
+      merchantability, fitness for a particular purpose, non infringement, or
+      the absence of latent or other defects, accuracy, or the present or
+      absence of errors, whether or not discoverable, all to the greatest
+      extent permissible under applicable law.
+   3. Affirmer disclaims responsibility for clearing rights of other persons
+      that may apply to the Work or any use thereof, including without
+      limitation any person’s Copyright and Related Rights in the Work.
+      Further, Affirmer disclaims responsibility for obtaining any necessary
+      consents, permissions or other rights required for any use of the Work.
+   4. Affirmer understands and acknowledges that Creative Commons is not a
+      party to this document and has no duty or obligation with respect to this
+      CC0 or use of the Work.
+
+For more information, please see
+http://creativecommons.org/publicdomain/zero/1.0/.
diff --git a/cli/postcss-base-plugin-cli/README.md b/cli/postcss-base-plugin-cli/README.md
new file mode 100644
index 0000000..da1c9e4
--- /dev/null
+++ b/cli/postcss-base-plugin-cli/README.md
@@ -0,0 +1,3 @@
+# PostCSS Base Plugin [<img src="https://postcss.github.io/postcss/logo.svg" alt="PostCSS Logo" width="90" height="90" align="right">][postcss]
+
+<!-- TODO -->
diff --git a/cli/postcss-base-plugin-cli/dist/.gitkeep b/cli/postcss-base-plugin-cli/dist/.gitkeep
new file mode 100644
index 0000000..e69de29
diff --git a/cli/postcss-base-plugin-cli/package.json b/cli/postcss-base-plugin-cli/package.json
new file mode 100644
index 0000000..d8dba00
--- /dev/null
+++ b/cli/postcss-base-plugin-cli/package.json
@@ -0,0 +1,34 @@
+{
+  "name": "@csstools/postcss-base-plugin-cli",
+  "private": "true",
+  "version": "0.0.0",
+  "description": "A base plugin cli",
+  "author": "Jonathan Neal <jonathantneal@hotmail.com>",
+  "license": "CC0-1.0",
+  "engines": {
+    "node": ">=12"
+  },
+  "bin": {
+    "postcss-base-plugin-cli": "dist/cli.js"
+  },
+  "files": [
+    "CHANGELOG.md",
+    "INSTALL.md",
+    "LICENSE.md",
+    "README.md",
+    "dist/cli.js"
+  ],
+  "scripts": {
+    "prepare": "npm run build",
+    "prepublishOnly": "npm run build --if-present && npm run test",
+    "test": "npm run test:js && npm run test:cli",
+    "test:js": "eslint src/**/*.ts --quiet",
+    "test:cli": "bash ./test/test.sh",
+    "build": "rollup -c ../../rollup/cli.ts.js"
+  },
+  "devDependencies": {
+    "@csstools/base-cli": "^0.1.0",
+    "@csstools/postcss-base-plugin": "*",
+    "postcss": "^8.3.6"
+  }
+}
diff --git a/cli/postcss-base-plugin-cli/src/cli.ts b/cli/postcss-base-plugin-cli/src/cli.ts
new file mode 100644
index 0000000..5935a96
--- /dev/null
+++ b/cli/postcss-base-plugin-cli/src/cli.ts
@@ -0,0 +1,17 @@
+import plugin from '@csstools/postcss-base-plugin';
+import { cli, helpTextLogger } from '@csstools/base-cli';
+import postcss from 'postcss';
+
+cli(
+	postcss,
+	plugin,
+	['option', 'another_option'],
+	helpTextLogger(
+		'Base Plugin',
+		'An example plugin CLI',
+		{
+			option: 'Some option',
+			another_option: true,
+		}
+	)
+);
diff --git a/cli/postcss-base-plugin-cli/test/basic.css b/cli/postcss-base-plugin-cli/test/basic.css
new file mode 100644
index 0000000..cedf0a6
--- /dev/null
+++ b/cli/postcss-base-plugin-cli/test/basic.css
@@ -0,0 +1,3 @@
+.foo {
+	color: red;
+}
diff --git a/cli/postcss-base-plugin-cli/test/basic.expect.css b/cli/postcss-base-plugin-cli/test/basic.expect.css
new file mode 100644
index 0000000..c47fa33
--- /dev/null
+++ b/cli/postcss-base-plugin-cli/test/basic.expect.css
@@ -0,0 +1,3 @@
+.foo {
+	color: blue;
+}
diff --git a/cli/postcss-base-plugin-cli/test/test.sh b/cli/postcss-base-plugin-cli/test/test.sh
new file mode 100644
index 0000000..6093ea0
--- /dev/null
+++ b/cli/postcss-base-plugin-cli/test/test.sh
@@ -0,0 +1,28 @@
+set -e
+
+# Zero out result file
+echo '' > ./test/basic.result.css;
+
+# Test with long flag
+postcss-base-plugin-cli ./test/basic.css --output ./test/basic.result.css --plugin-options '{ "option": true }'
+
+# Check result
+git --no-pager diff --no-index --word-diff ./test/basic.expect.css ./test/basic.result.css
+
+# Zero out result file
+echo '' > ./test/basic.result.css;
+
+# Test with short flags
+postcss-base-plugin-cli ./test/basic.css -o ./test/basic.result.css -p '{ "option": true }'
+
+# Check result
+git --no-pager diff --no-index --word-diff ./test/basic.expect.css ./test/basic.result.css
+
+# Zero out result file
+echo '' > ./test/basic.result.css;
+
+# Test with stdin
+cat ./test/basic.css | postcss-base-plugin-cli > ./test/basic.result.css
+
+# Check result
+git --no-pager diff --no-index --word-diff ./test/basic.expect.css ./test/basic.result.css
diff --git a/cli/postcss-base-plugin-cli/tsconfig.json b/cli/postcss-base-plugin-cli/tsconfig.json
new file mode 100644
index 0000000..68a2606
--- /dev/null
+++ b/cli/postcss-base-plugin-cli/tsconfig.json
@@ -0,0 +1,9 @@
+{
+  "extends": "../../tsconfig.json",
+  "compilerOptions": {
+    "outDir": "dist",
+    "declarationDir": "."
+  },
+  "include": ["./src/**/*"],
+  "exclude": ["dist"],
+}
diff --git a/package.json b/package.json
new file mode 100644
index 0000000..c943da9
--- /dev/null
+++ b/package.json
@@ -0,0 +1,37 @@
+{
+  "name": "@csstools/postcss-preset-env-mono-repo",
+  "private": "true",
+  "version": "1.0.0",
+  "description": "",
+  "author": "Jonathan Neal <jonathantneal@hotmail.com>",
+  "license": "CC0-1.0",
+  "workspaces": [
+    "packages/*",
+    "plugins/*",
+    "plugin-packs/*",
+    "cli/*"
+  ],
+  "devDependencies": {
+    "@babel/core": "^7.15.8",
+    "@babel/preset-env": "^7.15.8",
+    "@rollup/plugin-babel": "^5.3.0",
+    "@rollup/plugin-commonjs": "^21.0.1",
+    "@rollup/plugin-node-resolve": "^13.0.6",
+    "@rollup/plugin-typescript": "^8.3.0",
+    "@stryker-mutator/core": "^5.4.1",
+    "@typescript-eslint/eslint-plugin": "^5.3.0",
+    "eslint": "^8.1.0",
+    "rollup": "^2.58.3",
+    "rollup-plugin-terser": "^7.0.2",
+    "tslib": "^2.3.1",
+    "typescript": "^4.4.4"
+  },
+  "scripts": {
+    "build": "npm run build --workspaces --if-present",
+    "test": "npm run test --workspaces --if-present"
+  },
+  "volta": {
+    "node": "16.13.0",
+    "npm": "8.1.3"
+  }
+}
diff --git a/packages/base-cli/.gitignore b/packages/base-cli/.gitignore
new file mode 100644
index 0000000..b59d151
--- /dev/null
+++ b/packages/base-cli/.gitignore
@@ -0,0 +1,12 @@
+node_modules
+package-lock.json
+yarn.lock
+*.log*
+*.result.css
+.*
+dist/*
+!.editorconfig
+!.gitignore
+!.gitkeep
+!.rollup.js
+!.tape.js
diff --git a/packages/base-cli/CHANGELOG.md b/packages/base-cli/CHANGELOG.md
new file mode 100644
index 0000000..2475e12
--- /dev/null
+++ b/packages/base-cli/CHANGELOG.md
@@ -0,0 +1 @@
+# Changes to PostCSS Base Plugin
diff --git a/packages/base-cli/CONTRIBUTING.md b/packages/base-cli/CONTRIBUTING.md
new file mode 100644
index 0000000..c8bfa79
--- /dev/null
+++ b/packages/base-cli/CONTRIBUTING.md
@@ -0,0 +1,65 @@
+# Contributing to PostCSS Base Plugin
+
+You want to help? You rock! Now, take a moment to be sure your contributions
+make sense to everyone else.
+
+## Reporting Issues
+
+Found a problem? Want a new feature?
+
+- See if your issue or idea has [already been reported].
+- Provide a [reduced test case] or a [live example].
+
+Remember, a bug is a _demonstrable problem_ caused by _our_ code.
+
+## Submitting Pull Requests
+
+Pull requests are the greatest contributions, so be sure they are focused in
+scope and avoid unrelated commits.
+
+1. To begin; [fork this project], clone your fork, and add our upstream.
+   ```bash
+   # Clone your fork of the repo into the current directory
+   git clone git@github.com:YOUR_USER/postcss-dir-pseudo-class.git
+
+   # Navigate to the newly cloned directory
+   cd postcss-dir-pseudo-class
+
+   # Assign the original repo to a remote called "upstream"
+   git remote add upstream git@github.com:jonathantneal/postcss-dir-pseudo-class.git
+
+   # Install the tools necessary for testing
+   npm install
+   ```
+
+2. Create a branch for your feature or fix:
+   ```bash
+   # Move into a new branch for your feature
+   git checkout -b feature/thing
+   ```
+   ```bash
+   # Move into a new branch for your fix
+   git checkout -b fix/something
+   ```
+
+3. If your code follows our practices, then push your feature branch:
+   ```bash
+   # Test current code
+   npm test
+   ```
+   ```bash
+   # Push the branch for your new feature
+   git push origin feature/thing
+   ```
+   ```bash
+   # Or, push the branch for your update
+   git push origin update/something
+   ```
+
+That’s it! Now [open a pull request] with a clear title and description.
+
+[already been reported]: issues
+[fork this project]:     fork
+[live example]:          https://codepen.io/pen
+[open a pull request]:   https://help.github.com/articles/using-pull-requests/
+[reduced test case]:     https://css-tricks.com/reduced-test-cases/
diff --git a/packages/base-cli/INSTALL.md b/packages/base-cli/INSTALL.md
new file mode 100644
index 0000000..ceacefa
--- /dev/null
+++ b/packages/base-cli/INSTALL.md
@@ -0,0 +1,3 @@
+# Installing PostCSS Base Plugin
+
+<!-- TODO -->
diff --git a/packages/base-cli/LICENSE.md b/packages/base-cli/LICENSE.md
new file mode 100644
index 0000000..0bc1fa7
--- /dev/null
+++ b/packages/base-cli/LICENSE.md
@@ -0,0 +1,108 @@
+# CC0 1.0 Universal
+
+## Statement of Purpose
+
+The laws of most jurisdictions throughout the world automatically confer
+exclusive Copyright and Related Rights (defined below) upon the creator and
+subsequent owner(s) (each and all, an “owner”) of an original work of
+authorship and/or a database (each, a “Work”).
+
+Certain owners wish to permanently relinquish those rights to a Work for the
+purpose of contributing to a commons of creative, cultural and scientific works
+(“Commons”) that the public can reliably and without fear of later claims of
+infringement build upon, modify, incorporate in other works, reuse and
+redistribute as freely as possible in any form whatsoever and for any purposes,
+including without limitation commercial purposes. These owners may contribute
+to the Commons to promote the ideal of a free culture and the further
+production of creative, cultural and scientific works, or to gain reputation or
+greater distribution for their Work in part through the use and efforts of
+others.
+
+For these and/or other purposes and motivations, and without any expectation of
+additional consideration or compensation, the person associating CC0 with a
+Work (the “Affirmer”), to the extent that he or she is an owner of Copyright
+and Related Rights in the Work, voluntarily elects to apply CC0 to the Work and
+publicly distribute the Work under its terms, with knowledge of his or her
+Copyright and Related Rights in the Work and the meaning and intended legal
+effect of CC0 on those rights.
+
+1. Copyright and Related Rights. A Work made available under CC0 may be
+   protected by copyright and related or neighboring rights (“Copyright and
+   Related Rights”). Copyright and Related Rights include, but are not limited
+   to, the following:
+   1. the right to reproduce, adapt, distribute, perform, display, communicate,
+      and translate a Work;
+   2. moral rights retained by the original author(s) and/or performer(s);
+   3. publicity and privacy rights pertaining to a person’s image or likeness
+      depicted in a Work;
+   4. rights protecting against unfair competition in regards to a Work,
+      subject to the limitations in paragraph 4(i), below;
+   5. rights protecting the extraction, dissemination, use and reuse of data in
+      a Work;
+   6. database rights (such as those arising under Directive 96/9/EC of the
+      European Parliament and of the Council of 11 March 1996 on the legal
+      protection of databases, and under any national implementation thereof,
+      including any amended or successor version of such directive); and
+   7. other similar, equivalent or corresponding rights throughout the world
+      based on applicable law or treaty, and any national implementations
+      thereof.
+
+2. Waiver. To the greatest extent permitted by, but not in contravention of,
+   applicable law, Affirmer hereby overtly, fully, permanently, irrevocably and
+   unconditionally waives, abandons, and surrenders all of Affirmer’s Copyright
+   and Related Rights and associated claims and causes of action, whether now
+   known or unknown (including existing as well as future claims and causes of
+   action), in the Work (i) in all territories worldwide, (ii) for the maximum
+   duration provided by applicable law or treaty (including future time
+   extensions), (iii) in any current or future medium and for any number of
+   copies, and (iv) for any purpose whatsoever, including without limitation
+   commercial, advertising or promotional purposes (the “Waiver”). Affirmer
+   makes the Waiver for the benefit of each member of the public at large and
+   to the detriment of Affirmer’s heirs and successors, fully intending that
+   such Waiver shall not be subject to revocation, rescission, cancellation,
+   termination, or any other legal or equitable action to disrupt the quiet
+   enjoyment of the Work by the public as contemplated by Affirmer’s express
+   Statement of Purpose.
+
+3. Public License Fallback. Should any part of the Waiver for any reason be
+   judged legally invalid or ineffective under applicable law, then the Waiver
+   shall be preserved to the maximum extent permitted taking into account
+   Affirmer’s express Statement of Purpose. In addition, to the extent the
+   Waiver is so judged Affirmer hereby grants to each affected person a
+   royalty-free, non transferable, non sublicensable, non exclusive,
+   irrevocable and unconditional license to exercise Affirmer’s Copyright and
+   Related Rights in the Work (i) in all territories worldwide, (ii) for the
+   maximum duration provided by applicable law or treaty (including future time
+   extensions), (iii) in any current or future medium and for any number of
+   copies, and (iv) for any purpose whatsoever, including without limitation
+   commercial, advertising or promotional purposes (the “License”). The License
+   shall be deemed effective as of the date CC0 was applied by Affirmer to the
+   Work. Should any part of the License for any reason be judged legally
+   invalid or ineffective under applicable law, such partial invalidity or
+   ineffectiveness shall not invalidate the remainder of the License, and in
+   such case Affirmer hereby affirms that he or she will not (i) exercise any
+   of his or her remaining Copyright and Related Rights in the Work or (ii)
+   assert any associated claims and causes of action with respect to the Work,
+   in either case contrary to Affirmer’s express Statement of Purpose.
+
+4. Limitations and Disclaimers.
+   1. No trademark or patent rights held by Affirmer are waived, abandoned,
+      surrendered, licensed or otherwise affected by this document.
+   2. Affirmer offers the Work as-is and makes no representations or warranties
+      of any kind concerning the Work, express, implied, statutory or
+      otherwise, including without limitation warranties of title,
+      merchantability, fitness for a particular purpose, non infringement, or
+      the absence of latent or other defects, accuracy, or the present or
+      absence of errors, whether or not discoverable, all to the greatest
+      extent permissible under applicable law.
+   3. Affirmer disclaims responsibility for clearing rights of other persons
+      that may apply to the Work or any use thereof, including without
+      limitation any person’s Copyright and Related Rights in the Work.
+      Further, Affirmer disclaims responsibility for obtaining any necessary
+      consents, permissions or other rights required for any use of the Work.
+   4. Affirmer understands and acknowledges that Creative Commons is not a
+      party to this document and has no duty or obligation with respect to this
+      CC0 or use of the Work.
+
+For more information, please see
+http://creativecommons.org/publicdomain/zero/1.0/.
diff --git a/packages/base-cli/README.md b/packages/base-cli/README.md
new file mode 100644
index 0000000..da1c9e4
--- /dev/null
+++ b/packages/base-cli/README.md
@@ -0,0 +1,3 @@
+# PostCSS Base Plugin [<img src="https://postcss.github.io/postcss/logo.svg" alt="PostCSS Logo" width="90" height="90" align="right">][postcss]
+
+<!-- TODO -->
diff --git a/packages/base-cli/package.json b/packages/base-cli/package.json
new file mode 100644
index 0000000..6c8e83c
--- /dev/null
+++ b/packages/base-cli/package.json
@@ -0,0 +1,26 @@
+{
+  "name": "@csstools/base-cli",
+  "private": "true",
+  "version": "0.1.0",
+  "description": "A base for CLI versions of plugins",
+  "author": "Jonathan Neal <jonathantneal@hotmail.com>",
+  "license": "CC0-1.0",
+  "type": "module",
+  "engines": {
+    "node": ">=12"
+  },
+  "main": "./dist/index.js",
+  "files": [
+    "dist"
+  ],
+  "types": "./dist/index.d.ts",
+  "scripts": {
+    "test": "npm run test:lint && npm run test:js",
+    "test:lint": "eslint src/**/*.ts --quiet",
+    "test:js": "node ./test/test.mjs",
+    "build": "tsc"
+  },
+  "peerDependencies": {
+    "postcss": "^8.3.6"
+  }
+}
diff --git a/packages/base-cli/src/args.ts b/packages/base-cli/src/args.ts
new file mode 100644
index 0000000..cf2e4de
--- /dev/null
+++ b/packages/base-cli/src/args.ts
@@ -0,0 +1,152 @@
+export type Arguments = {
+	stdin: boolean,
+	stdout: boolean,
+	inputs: Array<string>,
+	output: string | null,
+	outputDir: string | null,
+	map: boolean,
+	replace: boolean,
+	pluginOptions: Record<string, unknown>,
+}
+
+export enum SignalValue {
+	InvalidArguments = 'INVALID_ARGUMENTS'
+}
+
+export function parseArguments(args: Array<string>, allowedPluginOpts: Array<string>, helpLogger: () => void): Arguments | SignalValue {
+	const flatArgs = args.map((x) => {
+		return x.trim();
+	}).filter((x) => {
+		return !!x;
+	});
+
+	const parsedArgs: Arguments = {
+		stdin: false,
+		stdout: false,
+		output: null,
+		outputDir: null,
+		inputs: [],
+		map: false,
+		replace: false,
+		pluginOptions: {},
+	};
+
+	let pluginOpts = null;
+
+	let encounteredFlagsOrArgs = false;
+
+	// Stryker disable next-line UpdateOperator,EqualityOperator
+	for (let i = 0; i < flatArgs.length; i++) {
+		const arg = flatArgs[i];
+
+		switch (arg) {
+			case '-o':
+			case '--output':
+				parsedArgs.output = flatArgs[i + 1];
+				// Stryker disable next-line UpdateOperator
+				i++;
+				encounteredFlagsOrArgs = true;
+				break;
+
+			case '-m':
+			case '--map':
+				parsedArgs.map = true;
+				encounteredFlagsOrArgs = true;
+				break;
+
+			case '-r':
+			case '--replace':
+				parsedArgs.replace = true;
+				encounteredFlagsOrArgs = true;
+				break;
+
+			case '-d':
+			case '--dir':
+				parsedArgs.outputDir = flatArgs[i + 1];
+				// Stryker disable next-line UpdateOperator
+				i++;
+				encounteredFlagsOrArgs = true;
+				break;
+
+			case '-p':
+			case '--plugin-options':
+				pluginOpts = flatArgs[i + 1];
+				// Stryker disable next-line UpdateOperator
+				i++;
+				encounteredFlagsOrArgs = true;
+				break;
+
+			default:
+				if (arg.indexOf('-') === 0) {
+					// Stryker disable next-line all
+					console.warn(`[error] unknown argument : ${arg}\n`);
+					// Stryker disable next-line all
+					helpLogger();
+					return SignalValue.InvalidArguments;
+				}
+
+				if (!encounteredFlagsOrArgs) {
+					parsedArgs.inputs.push(arg);
+					break;
+				}
+
+				// Stryker disable next-line all
+				helpLogger();
+				return SignalValue.InvalidArguments;
+		}
+	}
+
+	if (parsedArgs.replace) {
+		parsedArgs.output = null;
+		parsedArgs.outputDir = null;
+	}
+
+	if (parsedArgs.outputDir) {
+		parsedArgs.output = null;
+	}
+
+	if (parsedArgs.inputs.length > 1 && parsedArgs.output) {
+		// Stryker disable next-line all
+		console.warn(`[error] omit "--output" when processing multiple inputs\n`);
+		// Stryker disable next-line all
+		helpLogger();
+		return SignalValue.InvalidArguments;
+	}
+
+	if (parsedArgs.inputs.length === 0) {
+		parsedArgs.stdin = true;
+	}
+
+	if (!parsedArgs.output && !parsedArgs.outputDir && !parsedArgs.replace) {
+		parsedArgs.stdout = true;
+	}
+
+	let parsedPluginOpts = {};
+	// Stryker disable next-line ConditionalExpression
+	if (pluginOpts) {
+		try {
+			parsedPluginOpts = JSON.parse(pluginOpts);
+		} catch (_) {
+			// Stryker disable next-line all
+			console.warn(`[error] plugin options must be valid JSON\n`);
+			// Stryker disable next-line all
+			helpLogger();
+			return SignalValue.InvalidArguments;
+		}
+	}
+
+	for (const key in parsedPluginOpts) {
+		const value = parsedPluginOpts[key];
+		if (allowedPluginOpts.includes(key)) {
+			parsedArgs.pluginOptions[key] = value;
+		} else {
+			// Stryker disable next-line all
+			console.warn(`[error] unknown plugin option: ${key}\n`);
+			// Stryker disable next-line all
+			helpLogger();
+			return SignalValue.InvalidArguments;
+		}
+	}
+
+	return parsedArgs;
+}
diff --git a/packages/base-cli/src/index.ts b/packages/base-cli/src/index.ts
new file mode 100644
index 0000000..46d5254
--- /dev/null
+++ b/packages/base-cli/src/index.ts
@@ -0,0 +1,231 @@
+import fs from 'fs';
+import path from 'path';
+import { parseArguments, SignalValue } from './args';
+import type { Postcss, PluginCreator } from 'postcss';
+
+export function helpTextLogger(name: string, description: string, exampleOptions: Record<string, unknown>|null = null) {
+	let pluginOptions = [];
+	if (exampleOptions) {
+		const longestPluginOptionLength = Math.max(...Object.keys(exampleOptions).map((x) => x.length));
+		const spaces = new Array(longestPluginOptionLength).fill(' ').join('');
+		if (spaces.length) {
+			pluginOptions = [
+				'\nPlugin Options:',
+				...Object.keys(exampleOptions).map((option) => {
+					return `  ${(option + spaces).slice(0, spaces.length)}  ${typeof exampleOptions[option]}`
+				})
+			];
+
+			pluginOptions.push(
+			`\n  ${JSON.stringify(exampleOptions, null, 2).split('\n').join('\n  ')}`
+			)
+		}
+	}
+
+	const allHelp = [
+		`${name}\n`,
+		`  ${description}\n`,
+		'Usage:',
+		'  postcss-base-plugin-cli [input.css] [OPTIONS] [-o|--output output.css]',
+		'  postcss-base-plugin-cli <input.css>... [OPTIONS] --dir <output-directory>',
+		'  postcss-base-plugin-cli <input.css>... [OPTIONS] --replace',
+		'\nOptions:',
+		'  -o, --output          Output file',
+		'  -d, --dir             Output directory',
+		'  -r, --replace         Replace (overwrite) the input file',
+		'  -p, --plugin-options  Stringified JSON object with plugin options',
+	]
+
+	if (pluginOptions.length > 0) {
+		allHelp.push(...pluginOptions);
+	}
+
+	return () => {
+		console.warn(allHelp.join('\n'));
+	}
+}
+
+type PluginCreatorOptions = Record<string, unknown> | null;
+
+export function cli(postcss: Postcss, plugin: PluginCreator<PluginCreatorOptions>, allowedPluginOpts: Array<string>, helpLogger: () => void) {
+	// get process and plugin options from the command line
+	const argo = parseArguments(process.argv.slice(2), allowedPluginOpts, helpLogger)
+	if (argo === SignalValue.InvalidArguments) {
+		process.exit(1);
+	}
+
+	if (argo.stdin && argo.stdout) {
+		return getStdin().then((css) => {
+			if (!css) {
+				helpLogger();
+				process.exit(1);
+			}
+
+			const result = postcss([plugin(argo.pluginOptions)]).process(css, {
+				from: 'stdin',
+				to: 'stdout',
+				map: argo.map,
+			});
+
+			return result.css;
+		}).then((result) => {
+			process.stdout.write(result);
+
+			process.exit(0);
+		}).catch((error) => {
+			console.error(error);
+
+			process.exit(1);
+		});
+	}
+
+	if (argo.stdin) {
+		let output = argo.output;
+		if (!output && argo.outputDir) {
+			output = path.join(argo.outputDir, 'output.css');
+		}
+
+		return getStdin().then((css) => {
+			if (!css) {
+				helpLogger();
+				process.exit(1);
+			}
+
+			const result = postcss([plugin(argo.pluginOptions)]).process(css, {
+				from: 'stdin',
+				to: output,
+				map: argo.map,
+			});
+
+			return writeFile(output, result.css);
+		}).then(() => {
+			console.log(`CSS was written to "${output}"`)
+
+			process.exit(0);
+		}).catch((error) => {
+			console.error(error);
+
+			process.exit(1);
+		});
+	}
+
+	if (argo.stdout) {
+		const outputs = argo.inputs.map((input) => {
+			return {
+				input: input,
+				result: null,
+			}
+		});
+
+		return Promise.all(argo.inputs.map((input) => {
+			return readFile(input).then((css) => {
+				const result = postcss([plugin(argo.pluginOptions)]).process(css, {
+					from: input,
+					to: 'stdout',
+					map: argo.map,
+				});
+
+				return result.css;
+			}).then((result) => {
+				outputs.find((output) => output.input === input).result = result;
+			}).catch((error) => {
+				console.error(error);
+
+				process.exit(1);
+			});
+		})).then(() => {
+			outputs.forEach((output) => {
+				process.stdout.write(output.result);
+			});
+
+			process.exit(0);
+		});
+	}
+
+	return Promise.all(argo.inputs.map((input) => {
+		let output = argo.output;
+		if (argo.outputDir) {
+			output = path.join(argo.outputDir, path.basename(input));
+		}
+		if (argo.replace) {
+			argo.output = input;
+		}
+
+		return readFile(input).then((css) => {
+			const result = postcss([plugin(argo.pluginOptions)]).process(css, {
+				from: input,
+				to: output,
+				map: argo.map,
+			});
+
+			return writeFile(output, result.css).then(() => {
+				console.log(`CSS was written to "${output}"`)
+			})
+		}).catch((error) => {
+			console.error(error);
+
+			process.exit(1);
+		});
+	}));
+}
+
+function readFile (pathname: string): Promise<string> {
+	return new Promise((resolve, reject) => {
+		fs.readFile(pathname, 'utf8', (error, data) => {
+			if (error) {
+				reject(error);
+			} else {
+				resolve(data);
+			}
+		});
+	});
+}
+
+function writeFile (pathname: string, data: string): Promise<void> {
+	return new Promise((resolve, reject) => {
+		fs.writeFile(pathname, data, (error) => {
+			if (error) {
+				reject(error);
+			} else {
+				resolve();
+			}
+		});
+	});
+}
+
+function getStdin(): Promise<string> {
+	return new Promise(resolve => {
+		let data = '';
+		let timedOut = false;
+		setTimeout(() => {
+			timedOut = true;
+			resolve('');
+		}, 10000);
+
+		if (process.stdin.isTTY) {
+			if (timedOut) {
+				return;
+			}
+
+			resolve(data);
+		} else {
+			process.stdin.setEncoding('utf8');
+
+			process.stdin.on('readable', () => {
+				let chunk;
+
+				while ((chunk = process.stdin.read())) {
+					data += chunk;
+				}
+			});
+
+			process.stdin.on('end', () => {
+				if (timedOut) {
+					return;
+				}
+
+				resolve(data);
+			});
+		}
+	});
+}
diff --git a/packages/base-cli/stryker.conf.json b/packages/base-cli/stryker.conf.json
new file mode 100644
index 0000000..2c2f436
--- /dev/null
+++ b/packages/base-cli/stryker.conf.json
@@ -0,0 +1,19 @@
+{
+  "$schema": "../../node_modules/@stryker-mutator/core/schema/stryker-schema.json",
+  "mutate": [
+    "src/args.ts"
+  ],
+  "testRunner": "command",
+  "coverageAnalysis": "perTest",
+  "tempDirName": "../../.stryker-tmp",
+  "commandRunner": {
+    "command": "npm run test:js"
+  },
+  "buildCommand": "npm run build",
+  "thresholds": {
+    "high": 100,
+    "low": 100,
+    "break": 100
+  },
+  "inPlace": true
+}
diff --git a/packages/base-cli/test/test.mjs b/packages/base-cli/test/test.mjs
new file mode 100644
index 0000000..7ab4bfc
--- /dev/null
+++ b/packages/base-cli/test/test.mjs
@@ -0,0 +1,318 @@
+'use strict';
+import assert from 'assert';
+import { parseArguments } from '../dist/args.js';
+
+const argumentParsingCases = [
+	{
+		message: "zero values",
+		args: [],
+		allowedPluginOpts: [],
+		expected: {
+			stdin: true,
+			stdout: true,
+			output: null,
+			outputDir: null,
+			inputs: [],
+			map: false,
+			replace: false,
+			pluginOptions: {}
+		}
+	},
+	{
+		message: "with input files at the end (o)",
+		args: [
+			'-o',
+			'"o"',
+			'./foo.css',
+			'../baz/bar.css'
+		],
+		allowedPluginOpts: [],
+		expected: 'INVALID_ARGUMENTS'
+	},
+	{
+		message: "with input files at the end (o)",
+		args: [
+			'--output',
+			'foo.css',
+			'./foo.css',
+		],
+		allowedPluginOpts: [],
+		expected: 'INVALID_ARGUMENTS'
+	},
+	{
+		message: "with input files at the end (m)",
+		args: [
+			'-m',
+			'./foo.css',
+			'../baz/bar.css'
+		],
+		allowedPluginOpts: [],
+		expected: 'INVALID_ARGUMENTS'
+	},
+	{
+		message: "with input files at the end (r)",
+		args: [
+			'-r',
+			'./foo.css',
+			'../baz/bar.css'
+		],
+		allowedPluginOpts: [],
+		expected: 'INVALID_ARGUMENTS'
+	},
+	{
+		message: "with input files at the end (d)",
+		args: [
+			'-d',
+			'"d"',
+			'./foo.css',
+			'../baz/bar.css'
+		],
+		allowedPluginOpts: [],
+		expected: 'INVALID_ARGUMENTS'
+	},
+	{
+		message: "with input files at the end (p)",
+		args: [
+			"-p",
+			'{ "an_option": true }',
+			'./foo.css',
+			'../baz/bar.css'
+		],
+		allowedPluginOpts: ['an_option'],
+		expected: 'INVALID_ARGUMENTS'
+	},
+	{
+		message: "with input files in the middle",
+		args: [
+			'-d',
+			'"d"',
+			'./foo.css',
+			'../baz/bar.css',
+			"-m"
+		],
+		allowedPluginOpts: [],
+		expected: 'INVALID_ARGUMENTS'
+	},
+	{
+		message: "all values",
+		args: [
+			'./foo.css',
+			'../baz/bar.css',
+			'-d',
+			'"d"',
+			"--dir",
+			"'dir'",
+			"-m",
+			"--replace",
+			"",
+			"-p",
+			'{ "an_option": true }',
+			"--plugin-options",
+			"{ \"an_option\": false }"
+		],
+		allowedPluginOpts: [
+			"an_option"
+		],
+		expected: {
+			stdin: false,
+			stdout: false,
+			output: null,
+			outputDir: null,
+			inputs: [ './foo.css', '../baz/bar.css' ],
+			map: true,
+			replace: true,
+			pluginOptions: { an_option: false }
+		}
+	},
+	{
+		message: "stdout",
+		args: ['./foo.css'],
+		allowedPluginOpts: [],
+		expected: {
+			stdin: false,
+			stdout: true,
+			output: null,
+			outputDir: null,
+			inputs: ['./foo.css'],
+			map: false,
+			replace: false,
+			pluginOptions: {}
+		}
+	},
+	{
+		message: "an option",
+		args: ['./foo.css', '-p', '{ "an_option": true }'],
+		allowedPluginOpts: ['an_option'],
+		expected: {
+			stdin: false,
+			stdout: true,
+			output: null,
+			outputDir: null,
+			inputs: [ './foo.css' ],
+			map: false,
+			replace: false,
+			pluginOptions: { an_option: true }
+		}
+	},
+	{
+		message: "an unknown option",
+		args: ['./foo.css', '-p', '{ "an_option": true }'],
+		allowedPluginOpts: [],
+		expected: 'INVALID_ARGUMENTS'
+	},
+	{
+		message: "an unknown argument",
+		args: ['./foo.css', '-x', 'y'],
+		allowedPluginOpts: [],
+		expected: 'INVALID_ARGUMENTS'
+	},
+	{
+		message: "invalid json",
+		args: ['./foo.css', '-p', '{ an_option: true }'],
+		allowedPluginOpts: [],
+		expected: 'INVALID_ARGUMENTS'
+	},
+	{
+		message: "multiple inputs with --output option",
+		args: ['./foo.css', './fooz.css', '-o', './baz.css'],
+		allowedPluginOpts: [],
+		expected: 'INVALID_ARGUMENTS'
+	},
+	{
+		message: "multiple inputs with --dir option, but also with --output",
+		args: ['./foo.css', './fooz.css', '-o', './baz.css', '-d', './baz/'],
+		allowedPluginOpts: [],
+		expected: {
+			stdin: false,
+			stdout: false,
+			output: null,
+			outputDir: './baz/',
+			inputs: [ './foo.css', './fooz.css' ],
+			map: false,
+			replace: false,
+			pluginOptions: {}
+		}
+	},
+	{
+		message: "output and output dir",
+		args: ['-o', './baz.css', '-d', './baz/'],
+		allowedPluginOpts: [],
+		expected: {
+			stdin: true,
+			stdout: false,
+			output: null,
+			outputDir: './baz/',
+			inputs: [],
+			map: false,
+			replace: false,
+			pluginOptions: {}
+		}
+	},
+	{
+		message: "replace with multiple inputs",
+		args: ['./foo.css', './fooz.css', '-r'],
+		allowedPluginOpts: [],
+		expected: {
+			stdin: false,
+			stdout: false,
+			output: null,
+			outputDir: null,
+			inputs: [ './foo.css', './fooz.css' ],
+			map: false,
+			replace: true,
+			pluginOptions: {}
+		}
+	},
+	{
+		message: "short flag o",
+		args: ['./foo.css', '-o', 'foo'],
+		allowedPluginOpts: [],
+		expected: {
+			stdin: false,
+			stdout: false,
+			output: 'foo',
+			outputDir: null,
+			inputs: [ './foo.css' ],
+			map: false,
+			replace: false,
+			pluginOptions: {}
+		}
+	},
+	{
+		message: "long flag o",
+		args: ['./foo.css', '--output', 'foo'],
+		allowedPluginOpts: [],
+		expected: {
+			stdin: false,
+			stdout: false,
+			output: 'foo',
+			outputDir: null,
+			inputs: [ './foo.css' ],
+			map: false,
+			replace: false,
+			pluginOptions: {}
+		}
+	},
+	{
+		message: "short flag m",
+		args: ['./foo.css', '-m'],
+		allowedPluginOpts: [],
+		expected: {
+			stdin: false,
+			stdout: true,
+			output: null,
+			outputDir: null,
+			inputs: [ './foo.css' ],
+			map: true,
+			replace: false,
+			pluginOptions: {}
+		}
+	},
+	{
+		message: "long flag map",
+		args: ['./foo.css', '--map'],
+		allowedPluginOpts: [],
+		expected: {
+			stdin: false,
+			stdout: true,
+			output: null,
+			outputDir: null,
+			inputs: [ './foo.css' ],
+			map: true,
+			replace: false,
+			pluginOptions: {}
+		}
+	},
+	{
+		message: "short flag m with invalid trailer",
+		args: ['./foo.css', '-m', 'foo'],
+		allowedPluginOpts: [],
+		expected: 'INVALID_ARGUMENTS',
+	},
+	{
+		message: "long flag map with invalid trailer",
+		args: ['./foo.css', '--map', 'foo'],
+		allowedPluginOpts: [],
+		expected: 'INVALID_ARGUMENTS'
+	},
+	{
+		message: "long flag map with valid trailer",
+		args: ['./foo.css', '--map', '--replace', '--dir', './baz/'],
+		allowedPluginOpts: [],
+		expected: {
+			stdin: false,
+			stdout: false,
+			output: null,
+			outputDir: null,
+			inputs: [ './foo.css' ],
+			map: true,
+			replace: true,
+			pluginOptions: {}
+		}
+	}
+];
+
+argumentParsingCases.forEach((testCase) => {
+	const result = parseArguments(testCase.args, testCase.allowedPluginOpts, () => { });
+	assert.strict.deepEqual(result, testCase.expected, testCase.message);
+});
diff --git a/packages/base-cli/tsconfig.json b/packages/base-cli/tsconfig.json
new file mode 100644
index 0000000..f775a95
--- /dev/null
+++ b/packages/base-cli/tsconfig.json
@@ -0,0 +1,7 @@
+{
+  "extends": "../../tsconfig.json",
+  "compilerOptions": {
+    "outDir": "dist"
+  },
+  "include": ["./src/**/*"]
+}
diff --git a/packages/convert-colors/.appveyor.yml b/packages/convert-colors/.appveyor.yml
deleted file mode 100644
index 73f0d8f..0000000
--- a/packages/convert-colors/.appveyor.yml
+++ /dev/null
@@ -1,18 +0,0 @@
-# https://www.appveyor.com/docs/appveyor-yml
-
-environment:
-  matrix:
-    - nodejs_version: 6
-
-version: "{build}"
-build: off
-deploy: off
-
-install:
-  - ps: Install-Product node $env:nodejs_version
-  - npm install --ignore-scripts
-
-test_script:
-  - node --version
-  - npm --version
-  - cmd: "npm test"
diff --git a/packages/convert-colors/.travis.yml b/packages/convert-colors/.travis.yml
deleted file mode 100644
index e1f11a5..0000000
--- a/packages/convert-colors/.travis.yml
+++ /dev/null
@@ -1,9 +0,0 @@
-# https://docs.travis-ci.com/user/travis-lint
-
-language: node_js
-
-node_js:
-  - 6
-
-install:
-  - npm install --ignore-scripts
diff --git a/packages/convert-colors/package.json b/packages/convert-colors/package.json
index 384f5e7..a6e03b2 100644
--- a/packages/convert-colors/package.json
+++ b/packages/convert-colors/package.json
@@ -18,28 +18,24 @@
   "scripts": {
     "build": "rollup -c .rollup.js --silent",
     "docs": "jsdoc -c .jsdocrc -d .gh-pages",
-    "prepublishOnly": "npm test",
+    "prepublishOnly": "npm run build --if-present && npm run test",
     "pretest": "npm run build",
     "test": "npm run test:ec && npm run test:js && npm run test:tape",
     "test:ec": "echint test",
     "test:js": "eslint src/*.js --cache --ignore-path .gitignore --quiet",
-    "test:tape": "node .tape"
+    "test:tape": "node .tape",
+    "stryker": "stryker run --logLevel error"
   },
   "engines": {
-    "node": ">=6.0.0"
+    "node": ">=12"
   },
   "devDependencies": {
-    "@babel/core": "^7.2.2",
-    "@babel/preset-env": "^7.3.1",
     "docdash": "^1.0.2",
     "echint": "^4.0.1",
     "eslint": "^5.12.1",
     "eslint-config-dev": "^2.0.0",
     "jsdoc": "^3.5.5",
-    "pre-commit": "^1.2.2",
-    "rollup": "^1.1.2",
-    "rollup-plugin-babel": "^4.3.2",
-    "rollup-plugin-terser": "^4.0.3"
+    "pre-commit": "^1.2.2"
   },
   "eslintConfig": {
     "extends": "dev",
diff --git a/packages/generate-test-cases/index.js b/packages/generate-test-cases/index.js
new file mode 100644
index 0000000..e9188b5
--- /dev/null
+++ b/packages/generate-test-cases/index.js
@@ -0,0 +1,39 @@
+// usage :
+// npm run generate <plugin> <test case type> <seed> --workspace="@csstools/generate-test-cases"
+// npm run generate css-blank-pseudo selector :blank --workspace="@csstools/generate-test-cases"
+
+const fs = require('fs');
+const path = require('path');
+
+const pluginName = process.argv.slice(2)[0];
+const genType = process.argv.slice(2)[1];
+const generateSelectorTestCases = require('./selector.js');
+
+const allowedPlugins = [
+	'postcss-env-function',
+	'postcss-nesting',
+	'postcss-logical',
+	'postcss-pseudo-class-any-link',
+	'css-blank-pseudo',
+];
+
+if (allowedPlugins.indexOf(pluginName) === -1) {
+	console.log('plugin provided as argument is not present in allow list');
+	process.exit(1);
+}
+
+const pluginDir = path.parse(require.resolve(path.join(pluginName, 'package.json'))).dir;
+
+main();
+function main() {
+	switch (genType) {
+		case 'selector':
+			fs.writeFileSync(path.join(pluginDir, 'test', 'generated.css'), process.argv.slice(4).map((selector) => {
+				return generateSelectorTestCases(selector)
+			}).join('\n'));
+			break;
+
+		default:
+			break;
+	}
+}
diff --git a/packages/generate-test-cases/package.json b/packages/generate-test-cases/package.json
new file mode 100644
index 0000000..9934291
--- /dev/null
+++ b/packages/generate-test-cases/package.json
@@ -0,0 +1,16 @@
+{
+  "name": "@csstools/generate-test-cases",
+  "version": "1.0.0",
+  "description": "PostCSS test case generator",
+  "main": "index.js",
+  "author": "",
+  "license": "CC0-1.0",
+  "scripts": {
+    "generate": "node ./index.js",
+    "prepublishOnly": "npm run build --if-present && npm run test",
+    "stryker": "stryker run --logLevel error"
+  },
+  "engines": {
+    "node": ">=12"
+  }
+}
diff --git a/packages/generate-test-cases/selector.js b/packages/generate-test-cases/selector.js
new file mode 100644
index 0000000..7d63f2f
--- /dev/null
+++ b/packages/generate-test-cases/selector.js
@@ -0,0 +1,35 @@
+module.exports = generateSelectorTestCases;
+
+function generateSelectorTestCases(selector) {
+	let selectors = [];
+
+	for (const other of [selector, 'button', '.foo', '#foo', '--foo', '__foo', ':--foo', '[foo="baz"]', '*', ':hover', '::before']) {
+		for (const combinator of ['', ' ' , '  ', '+', ' + ', '~', ' ~ ', '>', ' > ']) {
+			selectors.push(`${other}${combinator}${selector}`);
+			selectors.push(`${selector}${combinator}${other}`);
+		}
+
+		selectors.push(`${other}, ${selector}`);
+		selectors.push(`${selector}, ${other}`);
+	}
+
+	selectors.push(`foo[${selector}]`);
+	selectors.push(`foo[baz="${selector}"]`);
+
+	selectors.push(`:not(${selector})`);
+
+	selectors.push(`:${selector}`);
+	selectors.push(`:--${selector}`);
+	selectors.push(`__${selector}`);
+	selectors.push(`--${selector}`);
+
+	let result =  selectors.map((x, index) => {
+		return `${x} {
+	order: ${index};
+}`
+	}).join('\n\n') + '\n\n'
+
+	result = result + `/* ${selector} */\n\n`;
+
+	return result;
+}
diff --git a/plugin-packs/postcss-preset-env/.editorconfig b/plugin-packs/postcss-preset-env/.editorconfig
deleted file mode 100644
index e06d798..0000000
--- a/plugin-packs/postcss-preset-env/.editorconfig
+++ /dev/null
@@ -1,15 +0,0 @@
-root = true
-
-[*]
-charset = utf-8
-end_of_line = lf
-indent_style = tab
-insert_final_newline = true
-trim_trailing_whitespace = true
-
-[*.md]
-trim_trailing_whitespace = false
-
-[*.{json,md,yml}]
-indent_size = 2
-indent_style = space
diff --git a/plugin-packs/postcss-preset-env/.travis.yml b/plugin-packs/postcss-preset-env/.travis.yml
deleted file mode 100644
index 08a68cc..0000000
--- a/plugin-packs/postcss-preset-env/.travis.yml
+++ /dev/null
@@ -1,18 +0,0 @@
-# https://docs.travis-ci.com/user/travis-lint
-
-language: node_js
-
-os:
-  - windows
-  - linux
-  - osx
-
-node_js:
-  - 10
-  - 8
-  - 6
-
-install:
-  - git config --global core.autocrlf false
-  - git checkout -qf ${TRAVIS_COMMIT}
-  - npm install --ignore-scripts
diff --git a/plugin-packs/postcss-preset-env/package.json b/plugin-packs/postcss-preset-env/package.json
index ba6f30e..cd30568 100644
--- a/plugin-packs/postcss-preset-env/package.json
+++ b/plugin-packs/postcss-preset-env/package.json
@@ -17,14 +17,14 @@
   ],
   "scripts": {
     "build": "rollup -c .rollup.js --silent",
-    "prepublishOnly": "npm test",
-    "pretest:tape": "npm run build",
+    "prepublishOnly": "npm run build --if-present && npm run test",
     "test": "npm run test:js && npm run test:tape",
     "test:js": "eslint src/*.js src/lib/*.js src/patch/*.js --cache --ignore-path .gitignore --quiet",
-    "test:tape": "postcss-tape"
+    "test:tape": "postcss-tape",
+    "stryker": "stryker run --logLevel error"
   },
   "engines": {
-    "node": ">=6.0.0"
+    "node": ">=12"
   },
   "dependencies": {
     "autoprefixer": "^9.6.1",
diff --git a/plugins/css-blank-pseudo/.editorconfig b/plugins/css-blank-pseudo/.editorconfig
deleted file mode 100644
index e06d798..0000000
--- a/plugins/css-blank-pseudo/.editorconfig
+++ /dev/null
@@ -1,15 +0,0 @@
-root = true
-
-[*]
-charset = utf-8
-end_of_line = lf
-indent_style = tab
-insert_final_newline = true
-trim_trailing_whitespace = true
-
-[*.md]
-trim_trailing_whitespace = false
-
-[*.{json,md,yml}]
-indent_size = 2
-indent_style = space
diff --git a/plugins/css-blank-pseudo/.gitignore b/plugins/css-blank-pseudo/.gitignore
index 6bf2bdf..8ea20ef 100644
--- a/plugins/css-blank-pseudo/.gitignore
+++ b/plugins/css-blank-pseudo/.gitignore
@@ -1,7 +1,6 @@
 node_modules
 /browser.*
 /browser-legacy.*
-/cli.*
 /index.*
 /legacy.*
 /postcss.*
diff --git a/plugins/css-blank-pseudo/.travis.yml b/plugins/css-blank-pseudo/.travis.yml
deleted file mode 100644
index f6bef04..0000000
--- a/plugins/css-blank-pseudo/.travis.yml
+++ /dev/null
@@ -1,11 +0,0 @@
-# https://docs.travis-ci.com/user/travis-lint
-
-language: node_js
-
-node_js:
-  - 14
-  - 12
-  - 10
-
-install:
-  - npm install --ignore-scripts
diff --git a/plugins/css-blank-pseudo/cli.js b/plugins/css-blank-pseudo/cli.js
new file mode 100755
index 0000000..98df583
--- /dev/null
+++ b/plugins/css-blank-pseudo/cli.js
@@ -0,0 +1,136 @@
+#!/usr/bin/env node
+
+var fs = require('fs');
+
+function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }
+
+var fs__default = /*#__PURE__*/_interopDefaultLegacy(fs);
+
+const selectorRegExp = /:blank([^\w-]|$)/gi;
+
+const creator = opts => {
+  const replaceWith = String(Object(opts).replaceWith || '[blank]');
+  const preserve = Boolean('preserve' in Object(opts) ? opts.preserve : true);
+  return {
+    postcssPlugin: 'css-blank-pseudo',
+    Once: root => {
+      root.walkRules(selectorRegExp, rule => {
+        const selector = rule.selector.replace(selectorRegExp, ($0, $1) => {
+          return `${replaceWith}${$1}`;
+        });
+        const clone = rule.clone({
+          selector
+        });
+
+        if (preserve) {
+          rule.before(clone);
+        } else {
+          rule.replaceWith(clone);
+        }
+      });
+    }
+  };
+};
+
+creator.postcss = true;
+
+if (process.argv.length < 3) {
+  console.log(['CSS Blank Pseudo\n', '  Transforms CSS with :blank {}\n', 'Usage:\n', '  css-blank-pseudo source.css transformed.css', '  css-blank-pseudo --in=source.css --out=transformed.css --opts={}', '  echo "@media (prefers-color-scheme: dark) {}" | css-blank-pseudo\n'].join('\n'));
+  process.exit(0);
+} // get process and plugin options from the command line
+
+
+const fileRegExp = /^[\w/.]+$/;
+const argRegExp = /^--(\w+)=("|')?(.+)\2$/;
+const relaxedJsonPropRegExp = /(['"])?([a-z0-9A-Z_]+)(['"])?:/g;
+const relaxedJsonValueRegExp = /("[a-z0-9A-Z_]+":\s*)'?([A-z0-9]+)'?([,}])/g;
+const argo = process.argv.slice(2).reduce((object, arg) => {
+  const argMatch = arg.match(argRegExp);
+  const fileMatch = arg.match(fileRegExp);
+
+  if (argMatch) {
+    object[argMatch[1]] = argMatch[3];
+  } else if (fileMatch) {
+    if (object.from === '<stdin>') {
+      object.from = arg;
+    } else if (object.to === '<stdout>') {
+      object.to = arg;
+    }
+  }
+
+  return object;
+}, {
+  from: '<stdin>',
+  to: '<stdout>',
+  opts: 'null'
+}); // get css from command line arguments or stdin
+
+(argo.from === '<stdin>' ? getStdin() : readFile(argo.from)).then(css => {
+  const pluginOpts = JSON.parse(argo.opts.replace(relaxedJsonPropRegExp, '"$2": ').replace(relaxedJsonValueRegExp, '$1"$2"$3'));
+  const processOptions = Object.assign({
+    from: argo.from,
+    to: argo.to || argo.from
+  }, argo.map ? {
+    map: JSON.parse(argo.map)
+  } : {});
+  const result = creator.process(css, processOptions, pluginOpts);
+
+  if (argo.to === '<stdout>') {
+    return result.css;
+  } else {
+    return writeFile(argo.to, result.css).then(() => `CSS was written to "${argo.to}"`);
+  }
+}).then(result => {
+  console.log(result);
+  process.exit(0);
+}, error => {
+  console.error(error);
+  process.exit(1);
+});
+
+function readFile(pathname) {
+  return new Promise((resolve, reject) => {
+    fs__default["default"].readFile(pathname, 'utf8', (error, data) => {
+      if (error) {
+        reject(error);
+      } else {
+        resolve(data);
+      }
+    });
+  });
+}
+
+function writeFile(pathname, data) {
+  return new Promise((resolve, reject) => {
+    fs__default["default"].writeFile(pathname, data, (error, content) => {
+      if (error) {
+        reject(error);
+      } else {
+        resolve(content);
+      }
+    });
+  });
+}
+
+function getStdin() {
+  return new Promise(resolve => {
+    let data = '';
+
+    if (process.stdin.isTTY) {
+      resolve(data);
+    } else {
+      process.stdin.setEncoding('utf8');
+      process.stdin.on('readable', () => {
+        let chunk;
+
+        while (chunk = process.stdin.read()) {
+          data += chunk;
+        }
+      });
+      process.stdin.on('end', () => {
+        resolve(data);
+      });
+    }
+  });
+}
+//# sourceMappingURL=cli.js.map
diff --git a/plugins/css-blank-pseudo/cli.js.map b/plugins/css-blank-pseudo/cli.js.map
new file mode 100644
index 0000000..53415e9
--- /dev/null
+++ b/plugins/css-blank-pseudo/cli.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"cli.js","sources":[],"sourcesContent":[],"names":[],"mappings":""}
\ No newline at end of file
diff --git a/plugins/css-blank-pseudo/package.json b/plugins/css-blank-pseudo/package.json
index c00782e..7c1964d 100644
--- a/plugins/css-blank-pseudo/package.json
+++ b/plugins/css-blank-pseudo/package.json
@@ -35,14 +35,15 @@
     "build:cli": "cross-env NODE_ENV=cli rollup --config .rollup.js --silent",
     "build:postcss": "cross-env NODE_ENV=postcss rollup --config .rollup.js --silent",
     "build:node": "rollup --config .rollup.js --silent && cross-env NODE_ENV=legacy rollup --config .rollup.js --silent",
-    "prepublishOnly": "npm test && npm run build",
+    "prepublishOnly": "npm run build --if-present && npm run test",
     "pretest:postcss": "npm run build:postcss",
     "test": "npm run test:js && npm run test:postcss",
     "test:js": "eslint src/{*,**/*}.js --cache --ignore-path .gitignore --quiet",
-    "test:postcss": "postcss-tape --plugin postcss.js"
+    "test:postcss": "postcss-tape --plugin postcss.js",
+    "stryker": "stryker run --logLevel error"
   },
   "engines": {
-    "node": ">=10.0.0"
+    "node": ">=12"
   },
   "peerDependencies": {
     "postcss": "^8.3"
diff --git a/plugins/css-has-pseudo/.editorconfig b/plugins/css-has-pseudo/.editorconfig
deleted file mode 100644
index e06d798..0000000
--- a/plugins/css-has-pseudo/.editorconfig
+++ /dev/null
@@ -1,15 +0,0 @@
-root = true
-
-[*]
-charset = utf-8
-end_of_line = lf
-indent_style = tab
-insert_final_newline = true
-trim_trailing_whitespace = true
-
-[*.md]
-trim_trailing_whitespace = false
-
-[*.{json,md,yml}]
-indent_size = 2
-indent_style = space
diff --git a/plugins/css-has-pseudo/.gitignore b/plugins/css-has-pseudo/.gitignore
index b3a3c6d..93b2259 100644
--- a/plugins/css-has-pseudo/.gitignore
+++ b/plugins/css-has-pseudo/.gitignore
@@ -1,6 +1,5 @@
 node_modules
 /browser.*
-/cli.*
 /index.*
 /postcss.*
 package-lock.json
diff --git a/plugins/css-has-pseudo/.travis.yml b/plugins/css-has-pseudo/.travis.yml
deleted file mode 100644
index b17d4a4..0000000
--- a/plugins/css-has-pseudo/.travis.yml
+++ /dev/null
@@ -1,10 +0,0 @@
-# https://docs.travis-ci.com/user/travis-lint
-
-language: node_js
-
-node_js:
-  - 12
-  - 14
-
-install:
-  - npm install --ignore-scripts
diff --git a/plugins/css-has-pseudo/cli.js b/plugins/css-has-pseudo/cli.js
new file mode 100755
index 0000000..9f5b877
--- /dev/null
+++ b/plugins/css-has-pseudo/cli.js
@@ -0,0 +1,184 @@
+#!/usr/bin/env node
+
+var fs = require('fs');
+var parser = require('postcss-selector-parser');
+
+function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }
+
+var fs__default = /*#__PURE__*/_interopDefaultLegacy(fs);
+var parser__default = /*#__PURE__*/_interopDefaultLegacy(parser);
+
+const creator = (
+/** @type {{ preserve: true | false }} */
+opts) => {
+  opts = typeof opts === 'object' && opts || defaultOptions;
+  /** Whether the original rule should be preserved. */
+
+  const shouldPreserve = Boolean('preserve' in opts ? opts.preserve : true);
+  return {
+    postcssPlugin: 'css-has-pseudo',
+    Rule: rule => {
+      if (rule.selector.includes(':has(')) {
+        const fallbackSelector = getFallbackSelector(rule.selector);
+        if (shouldPreserve) rule.cloneBefore({
+          selector: fallbackSelector
+        });else rule.assign({
+          selector: fallbackSelector
+        });
+      }
+    }
+  };
+};
+
+creator.postcss = true;
+
+const getFallbackSelector = (
+/** @type {string} */
+selectorText) => parser__default['default'](selectors => {
+  selectors.walkPseudos(selector => {
+    if (selector.value === ':has' && selector.nodes) {
+      const isNotHas = isParentInNotPseudo(selector);
+      selector.value = isNotHas ? ':not-has' : ':has';
+      const attribute = parser__default['default'].attribute({
+        attribute: getEscapedCss(String(selector))
+      });
+
+      if (isNotHas) {
+        selector.parent.parent.replaceWith(attribute);
+      } else {
+        selector.replaceWith(attribute);
+      }
+    }
+  });
+}).processSync(selectorText);
+/** Default options. */
+
+
+const defaultOptions = {
+  preserve: true
+};
+/** Returns the string as an escaped CSS identifier. */
+
+const getEscapedCss = (
+/** @type {string} */
+value) => encodeURIComponent(value).replace(/%3A/g, ':').replace(/%5B/g, '[').replace(/%5D/g, ']').replace(/%2C/g, ',').replace(/[():%[\],]/g, '\\$&');
+/** Returns whether the selector is within a `:not` pseudo-class. */
+
+
+const isParentInNotPseudo = selector => {
+  var _selector$parent, _selector$parent$pare;
+
+  return ((_selector$parent = selector.parent) === null || _selector$parent === void 0 ? void 0 : (_selector$parent$pare = _selector$parent.parent) === null || _selector$parent$pare === void 0 ? void 0 : _selector$parent$pare.type) === 'pseudo' && selector.parent.parent.value === ':not';
+};
+
+/* eslint no-console: 0 */
+
+const fileRegExp = /^[\w/.]+$/;
+const argRegExp = /^--(\w+)=("|')?(.+)\2$/;
+const relaxedJsonPropRegExp = /(['"])?([a-z0-9A-Z_]+)(['"])?:/g;
+const relaxedJsonValueRegExp = /("[a-z0-9A-Z_]+":\s*)(?!true|false|null|\d+)'?([A-z0-9]+)'?([,}])/g;
+const argo = process.argv.slice(2).reduce((object, arg) => {
+  const argMatch = arg.match(argRegExp);
+  const fileMatch = arg.match(fileRegExp);
+
+  if (argMatch) {
+    object[argMatch[1]] = argMatch[3];
+  } else if (fileMatch) {
+    if (object.from === '<stdin>') {
+      object.from = arg;
+    } else if (object.to === '<stdout>') {
+      object.to = arg;
+    }
+  }
+
+  return object;
+}, {
+  from: '<stdin>',
+  to: '<stdout>',
+  opts: 'null'
+}); // get css from command line arguments or stdin
+
+(argo.from === '<stdin>' ? getStdin() : readFile(argo.from)).then(css => {
+  if (argo.from === '<stdin>' && !css) {
+    console.log(['CSS Has Pseudo\n', '  Transforms CSS with :has {}\n', 'Usage:\n', '  css-has-pseudo source.css transformed.css', '  css-has-pseudo --from=source.css --to=transformed.css --opts={}', '  echo "body:has(:focus) {}" | css-has-pseudo\n'].join('\n'));
+    process.exit(0);
+  }
+
+  const pluginOpts = JSON.parse(argo.opts.replace(relaxedJsonPropRegExp, '"$2": ').replace(relaxedJsonValueRegExp, '$1"$2"$3'));
+  const processOptions = Object.assign({
+    from: argo.from,
+    to: argo.to || argo.from
+  }, argo.map ? {
+    map: JSON.parse(argo.map)
+  } : {});
+  const result = creator.process(css, processOptions, pluginOpts);
+
+  if (argo.to === '<stdout>') {
+    return result.css;
+  } else {
+    return writeFile(argo.to, result.css).then(() => `CSS was written to "${argo.to}"`);
+  }
+}).catch(error => {
+  if (Object(error).name === 'CssSyntaxError') {
+    throw new Error(`PostCSS had trouble reading the file (${error.reason} on line ${error.line}, column ${error.column}).`);
+  }
+
+  if (Object(error).errno === -2) {
+    throw new Error(`Sorry, "${error.path}" could not be read.`);
+  }
+
+  throw error;
+}).then(result => {
+  console.log(result);
+  process.exit(0);
+}, error => {
+  console.error(Object(error).message || 'Something bad happened and we don’t even know what it was.');
+  process.exit(1);
+});
+
+function readFile(pathname) {
+  return new Promise((resolve, reject) => {
+    fs__default['default'].readFile(pathname, 'utf8', (error, data) => {
+      if (error) {
+        reject(error);
+      } else {
+        resolve(data);
+      }
+    });
+  });
+}
+
+function writeFile(pathname, data) {
+  return new Promise((resolve, reject) => {
+    fs__default['default'].writeFile(pathname, data, (error, content) => {
+      if (error) {
+        reject(error);
+      } else {
+        resolve(content);
+      }
+    });
+  });
+}
+
+function getStdin() {
+  return new Promise(resolve => {
+    let data = '';
+
+    if (process.stdin.isTTY) {
+      resolve(data);
+    } else {
+      process.stdin.setEncoding('utf8');
+      process.stdin.on('readable', () => {
+        let chunk;
+
+        while (chunk = process.stdin.read()) {
+          data += chunk;
+        }
+      });
+      process.stdin.on('end', () => {
+        resolve(data);
+      });
+    }
+  });
+}
+//# sourceMappingURL=cli.js.map
diff --git a/plugins/css-has-pseudo/cli.js.map b/plugins/css-has-pseudo/cli.js.map
new file mode 100644
index 0000000..53415e9
--- /dev/null
+++ b/plugins/css-has-pseudo/cli.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"cli.js","sources":[],"sourcesContent":[],"names":[],"mappings":""}
\ No newline at end of file
diff --git a/plugins/css-has-pseudo/package.json b/plugins/css-has-pseudo/package.json
index 3cfb401..dfbfbe5 100644
--- a/plugins/css-has-pseudo/package.json
+++ b/plugins/css-has-pseudo/package.json
@@ -30,11 +30,12 @@
     "build:cli": "cross-env NODE_ENV=cli rollup --config .rollup.js --silent",
     "build:postcss": "cross-env NODE_ENV=postcss rollup --config .rollup.js --silent",
     "build:node": "rollup --config .rollup.js --silent",
-    "prepublishOnly": "npm test && npm run build",
+    "prepublishOnly": "npm run build --if-present && npm run test",
     "pretest:postcss": "npm run build:postcss",
     "test": "npm run test:js && npm run test:postcss",
     "test:js": "eslint src/{*,**/*}.js --cache --ignore-path .gitignore --quiet",
-    "test:postcss": "postcss-tape --plugin postcss.js"
+    "test:postcss": "postcss-tape --plugin postcss.js",
+    "stryker": "stryker run --logLevel error"
   },
   "engines": {
     "node": ">=12"
diff --git a/plugins/css-prefers-color-scheme/.editorconfig b/plugins/css-prefers-color-scheme/.editorconfig
deleted file mode 100644
index 40e2967..0000000
--- a/plugins/css-prefers-color-scheme/.editorconfig
+++ /dev/null
@@ -1,15 +0,0 @@
-root = true
-
-[*]
-charset = utf-8
-end_of_line = lf
-indent_style = tab
-insert_final_newline = true
-trim_trailing_whitespace = true
-
-[*.md]
-trim_trailing_whitespace = false
-
-[{*.{json,md,yml},.*}]
-indent_size = 2
-indent_style = space
diff --git a/plugins/css-prefers-color-scheme/.github/workflows/test.yml b/plugins/css-prefers-color-scheme/.github/workflows/test.yml
deleted file mode 100644
index 4a287db..0000000
--- a/plugins/css-prefers-color-scheme/.github/workflows/test.yml
+++ /dev/null
@@ -1,18 +0,0 @@
-name: test
-on:
-  push:
-
-jobs:
-  test:
-    runs-on: ubuntu-latest
-    strategy:
-      matrix:
-        node: [12, 16]
-    steps:
-      - uses: actions/checkout@v2
-      - uses: actions/setup-node@v2
-        with:
-          node-version: ${{ matrix.node }}
-
-      - run: yarn install --ignore-scripts
-      - run: yarn run test
diff --git a/plugins/css-prefers-color-scheme/package.json b/plugins/css-prefers-color-scheme/package.json
index 978da49..571dd73 100644
--- a/plugins/css-prefers-color-scheme/package.json
+++ b/plugins/css-prefers-color-scheme/package.json
@@ -31,11 +31,12 @@
     "build:browser:min": "cross-env NODE_ENV=browser:min rollup --config .rollup.js --silent",
     "build:node": "rollup --config .rollup.js --silent",
     "build:postcss": "cross-env NODE_ENV=postcss rollup --config .rollup.js --silent",
-    "prepublishOnly": "npm test",
+    "prepublishOnly": "npm run build --if-present && npm run test",
     "pretest": "npm run build",
     "test": "npm run test:js && npm run test:tape",
     "test:js": "eslint src/{*,**/*}.js --cache --ignore-path .gitignore --quiet",
-    "test:tape": "postcss-tape --plugin postcss.js"
+    "test:tape": "postcss-tape --plugin postcss.js",
+    "stryker": "stryker run --logLevel error"
   },
   "engines": {
     "node": ">=12"
diff --git a/plugins/postcss-base-plugin/.gitignore b/plugins/postcss-base-plugin/.gitignore
new file mode 100644
index 0000000..b59d151
--- /dev/null
+++ b/plugins/postcss-base-plugin/.gitignore
@@ -0,0 +1,12 @@
+node_modules
+package-lock.json
+yarn.lock
+*.log*
+*.result.css
+.*
+dist/*
+!.editorconfig
+!.gitignore
+!.gitkeep
+!.rollup.js
+!.tape.js
diff --git a/plugins/postcss-base-plugin/.tape.js b/plugins/postcss-base-plugin/.tape.js
new file mode 100644
index 0000000..35f9a60
--- /dev/null
+++ b/plugins/postcss-base-plugin/.tape.js
@@ -0,0 +1,8 @@
+module.exports = {
+	basic: {
+		message: "supports basic usage",
+	},
+	example: {
+		message: "minimal example",
+	},
+};
diff --git a/plugins/postcss-base-plugin/CHANGELOG.md b/plugins/postcss-base-plugin/CHANGELOG.md
new file mode 100644
index 0000000..2475e12
--- /dev/null
+++ b/plugins/postcss-base-plugin/CHANGELOG.md
@@ -0,0 +1 @@
+# Changes to PostCSS Base Plugin
diff --git a/plugins/postcss-base-plugin/CONTRIBUTING.md b/plugins/postcss-base-plugin/CONTRIBUTING.md
new file mode 100644
index 0000000..c8bfa79
--- /dev/null
+++ b/plugins/postcss-base-plugin/CONTRIBUTING.md
@@ -0,0 +1,65 @@
+# Contributing to PostCSS Base Plugin
+
+You want to help? You rock! Now, take a moment to be sure your contributions
+make sense to everyone else.
+
+## Reporting Issues
+
+Found a problem? Want a new feature?
+
+- See if your issue or idea has [already been reported].
+- Provide a [reduced test case] or a [live example].
+
+Remember, a bug is a _demonstrable problem_ caused by _our_ code.
+
+## Submitting Pull Requests
+
+Pull requests are the greatest contributions, so be sure they are focused in
+scope and avoid unrelated commits.
+
+1. To begin; [fork this project], clone your fork, and add our upstream.
+   ```bash
+   # Clone your fork of the repo into the current directory
+   git clone git@github.com:YOUR_USER/postcss-dir-pseudo-class.git
+
+   # Navigate to the newly cloned directory
+   cd postcss-dir-pseudo-class
+
+   # Assign the original repo to a remote called "upstream"
+   git remote add upstream git@github.com:jonathantneal/postcss-dir-pseudo-class.git
+
+   # Install the tools necessary for testing
+   npm install
+   ```
+
+2. Create a branch for your feature or fix:
+   ```bash
+   # Move into a new branch for your feature
+   git checkout -b feature/thing
+   ```
+   ```bash
+   # Move into a new branch for your fix
+   git checkout -b fix/something
+   ```
+
+3. If your code follows our practices, then push your feature branch:
+   ```bash
+   # Test current code
+   npm test
+   ```
+   ```bash
+   # Push the branch for your new feature
+   git push origin feature/thing
+   ```
+   ```bash
+   # Or, push the branch for your update
+   git push origin update/something
+   ```
+
+That’s it! Now [open a pull request] with a clear title and description.
+
+[already been reported]: issues
+[fork this project]:     fork
+[live example]:          https://codepen.io/pen
+[open a pull request]:   https://help.github.com/articles/using-pull-requests/
+[reduced test case]:     https://css-tricks.com/reduced-test-cases/
diff --git a/plugins/postcss-base-plugin/INSTALL.md b/plugins/postcss-base-plugin/INSTALL.md
new file mode 100644
index 0000000..ceacefa
--- /dev/null
+++ b/plugins/postcss-base-plugin/INSTALL.md
@@ -0,0 +1,3 @@
+# Installing PostCSS Base Plugin
+
+<!-- TODO -->
diff --git a/plugins/postcss-base-plugin/LICENSE.md b/plugins/postcss-base-plugin/LICENSE.md
new file mode 100644
index 0000000..0bc1fa7
--- /dev/null
+++ b/plugins/postcss-base-plugin/LICENSE.md
@@ -0,0 +1,108 @@
+# CC0 1.0 Universal
+
+## Statement of Purpose
+
+The laws of most jurisdictions throughout the world automatically confer
+exclusive Copyright and Related Rights (defined below) upon the creator and
+subsequent owner(s) (each and all, an “owner”) of an original work of
+authorship and/or a database (each, a “Work”).
+
+Certain owners wish to permanently relinquish those rights to a Work for the
+purpose of contributing to a commons of creative, cultural and scientific works
+(“Commons”) that the public can reliably and without fear of later claims of
+infringement build upon, modify, incorporate in other works, reuse and
+redistribute as freely as possible in any form whatsoever and for any purposes,
+including without limitation commercial purposes. These owners may contribute
+to the Commons to promote the ideal of a free culture and the further
+production of creative, cultural and scientific works, or to gain reputation or
+greater distribution for their Work in part through the use and efforts of
+others.
+
+For these and/or other purposes and motivations, and without any expectation of
+additional consideration or compensation, the person associating CC0 with a
+Work (the “Affirmer”), to the extent that he or she is an owner of Copyright
+and Related Rights in the Work, voluntarily elects to apply CC0 to the Work and
+publicly distribute the Work under its terms, with knowledge of his or her
+Copyright and Related Rights in the Work and the meaning and intended legal
+effect of CC0 on those rights.
+
+1. Copyright and Related Rights. A Work made available under CC0 may be
+   protected by copyright and related or neighboring rights (“Copyright and
+   Related Rights”). Copyright and Related Rights include, but are not limited
+   to, the following:
+   1. the right to reproduce, adapt, distribute, perform, display, communicate,
+      and translate a Work;
+   2. moral rights retained by the original author(s) and/or performer(s);
+   3. publicity and privacy rights pertaining to a person’s image or likeness
+      depicted in a Work;
+   4. rights protecting against unfair competition in regards to a Work,
+      subject to the limitations in paragraph 4(i), below;
+   5. rights protecting the extraction, dissemination, use and reuse of data in
+      a Work;
+   6. database rights (such as those arising under Directive 96/9/EC of the
+      European Parliament and of the Council of 11 March 1996 on the legal
+      protection of databases, and under any national implementation thereof,
+      including any amended or successor version of such directive); and
+   7. other similar, equivalent or corresponding rights throughout the world
+      based on applicable law or treaty, and any national implementations
+      thereof.
+
+2. Waiver. To the greatest extent permitted by, but not in contravention of,
+   applicable law, Affirmer hereby overtly, fully, permanently, irrevocably and
+   unconditionally waives, abandons, and surrenders all of Affirmer’s Copyright
+   and Related Rights and associated claims and causes of action, whether now
+   known or unknown (including existing as well as future claims and causes of
+   action), in the Work (i) in all territories worldwide, (ii) for the maximum
+   duration provided by applicable law or treaty (including future time
+   extensions), (iii) in any current or future medium and for any number of
+   copies, and (iv) for any purpose whatsoever, including without limitation
+   commercial, advertising or promotional purposes (the “Waiver”). Affirmer
+   makes the Waiver for the benefit of each member of the public at large and
+   to the detriment of Affirmer’s heirs and successors, fully intending that
+   such Waiver shall not be subject to revocation, rescission, cancellation,
+   termination, or any other legal or equitable action to disrupt the quiet
+   enjoyment of the Work by the public as contemplated by Affirmer’s express
+   Statement of Purpose.
+
+3. Public License Fallback. Should any part of the Waiver for any reason be
+   judged legally invalid or ineffective under applicable law, then the Waiver
+   shall be preserved to the maximum extent permitted taking into account
+   Affirmer’s express Statement of Purpose. In addition, to the extent the
+   Waiver is so judged Affirmer hereby grants to each affected person a
+   royalty-free, non transferable, non sublicensable, non exclusive,
+   irrevocable and unconditional license to exercise Affirmer’s Copyright and
+   Related Rights in the Work (i) in all territories worldwide, (ii) for the
+   maximum duration provided by applicable law or treaty (including future time
+   extensions), (iii) in any current or future medium and for any number of
+   copies, and (iv) for any purpose whatsoever, including without limitation
+   commercial, advertising or promotional purposes (the “License”). The License
+   shall be deemed effective as of the date CC0 was applied by Affirmer to the
+   Work. Should any part of the License for any reason be judged legally
+   invalid or ineffective under applicable law, such partial invalidity or
+   ineffectiveness shall not invalidate the remainder of the License, and in
+   such case Affirmer hereby affirms that he or she will not (i) exercise any
+   of his or her remaining Copyright and Related Rights in the Work or (ii)
+   assert any associated claims and causes of action with respect to the Work,
+   in either case contrary to Affirmer’s express Statement of Purpose.
+
+4. Limitations and Disclaimers.
+   1. No trademark or patent rights held by Affirmer are waived, abandoned,
+      surrendered, licensed or otherwise affected by this document.
+   2. Affirmer offers the Work as-is and makes no representations or warranties
+      of any kind concerning the Work, express, implied, statutory or
+      otherwise, including without limitation warranties of title,
+      merchantability, fitness for a particular purpose, non infringement, or
+      the absence of latent or other defects, accuracy, or the present or
+      absence of errors, whether or not discoverable, all to the greatest
+      extent permissible under applicable law.
+   3. Affirmer disclaims responsibility for clearing rights of other persons
+      that may apply to the Work or any use thereof, including without
+      limitation any person’s Copyright and Related Rights in the Work.
+      Further, Affirmer disclaims responsibility for obtaining any necessary
+      consents, permissions or other rights required for any use of the Work.
+   4. Affirmer understands and acknowledges that Creative Commons is not a
+      party to this document and has no duty or obligation with respect to this
+      CC0 or use of the Work.
+
+For more information, please see
+http://creativecommons.org/publicdomain/zero/1.0/.
diff --git a/plugins/postcss-base-plugin/README.md b/plugins/postcss-base-plugin/README.md
new file mode 100644
index 0000000..da1c9e4
--- /dev/null
+++ b/plugins/postcss-base-plugin/README.md
@@ -0,0 +1,3 @@
+# PostCSS Base Plugin [<img src="https://postcss.github.io/postcss/logo.svg" alt="PostCSS Logo" width="90" height="90" align="right">][postcss]
+
+<!-- TODO -->
diff --git a/plugins/postcss-base-plugin/dist/.gitkeep b/plugins/postcss-base-plugin/dist/.gitkeep
new file mode 100644
index 0000000..e69de29
diff --git a/plugins/postcss-base-plugin/package.json b/plugins/postcss-base-plugin/package.json
new file mode 100644
index 0000000..0fd17bb
--- /dev/null
+++ b/plugins/postcss-base-plugin/package.json
@@ -0,0 +1,42 @@
+{
+  "name": "@csstools/postcss-base-plugin",
+  "private": "true",
+  "version": "0.0.0",
+  "description": "A base plugin",
+  "author": "Jonathan Neal <jonathantneal@hotmail.com>",
+  "license": "CC0-1.0",
+  "engines": {
+    "node": ">=12"
+  },
+  "main": "dist/index.js",
+  "module": "dist/index.mjs",
+  "files": [
+    "CHANGELOG.md",
+    "INSTALL.md",
+    "LICENSE.md",
+    "README.md",
+    "dist/index.js",
+    "dist/index.js.map",
+    "dist/index.mjs",
+    "dist/index.mjs.map"
+  ],
+  "types": "./dist/index.d.ts",
+  "scripts": {
+    "prepublishOnly": "npm run build --if-present && npm run test",
+    "test": "npm run test:js && npm run test:tape",
+    "test:js": "eslint src/**/*.ts --quiet",
+    "test:tape": "postcss-tape",
+    "build": "rollup -c ../../rollup/default.ts.js",
+    "stryker": "stryker run --logLevel error"
+  },
+  "postcssConfig": {
+    "plugin": "dist/index.js"
+  },
+  "devDependencies": {
+    "postcss": "^8.3.6",
+    "postcss-tape": "^6.0.1"
+  },
+  "peerDependencies": {
+    "postcss": "^8.3"
+  }
+}
diff --git a/plugins/postcss-base-plugin/src/index.ts b/plugins/postcss-base-plugin/src/index.ts
new file mode 100644
index 0000000..75fcd12
--- /dev/null
+++ b/plugins/postcss-base-plugin/src/index.ts
@@ -0,0 +1,18 @@
+import type { PluginCreator } from 'postcss';
+
+// eslint-disable-next-line @typescript-eslint/no-unused-vars
+const creator: PluginCreator<null> = (opts) => {
+	return {
+		postcssPlugin: 'postcss-base-plugin',
+		Declaration(decl) {
+			if (decl.value === 'red') {
+				decl.value = 'blue';
+			}
+		}
+	}
+}
+
+creator.postcss = true;
+
+export default creator;
+
diff --git a/plugins/postcss-base-plugin/stryker.conf.json b/plugins/postcss-base-plugin/stryker.conf.json
new file mode 100644
index 0000000..091dc74
--- /dev/null
+++ b/plugins/postcss-base-plugin/stryker.conf.json
@@ -0,0 +1,19 @@
+{
+  "$schema": "../../node_modules/@stryker-mutator/core/schema/stryker-schema.json",
+  "mutate": [
+    "src/**/*.ts"
+  ],
+  "buildCommand": "npm run build",
+  "testRunner": "command",
+  "coverageAnalysis": "perTest",
+  "tempDirName": "../../.stryker-tmp",
+  "commandRunner": {
+    "command": "npm run test:tape"
+  },
+  "thresholds": {
+    "high": 100,
+    "low": 100,
+    "break": 100
+  },
+  "inPlace": true
+}
diff --git a/plugins/postcss-base-plugin/test/basic.css b/plugins/postcss-base-plugin/test/basic.css
new file mode 100644
index 0000000..181f83a
--- /dev/null
+++ b/plugins/postcss-base-plugin/test/basic.css
@@ -0,0 +1,7 @@
+.foo {
+	color: red;
+}
+
+.baz {
+	color: green;
+}
diff --git a/plugins/postcss-base-plugin/test/basic.expect.css b/plugins/postcss-base-plugin/test/basic.expect.css
new file mode 100644
index 0000000..9d738d5
--- /dev/null
+++ b/plugins/postcss-base-plugin/test/basic.expect.css
@@ -0,0 +1,7 @@
+.foo {
+	color: blue;
+}
+
+.baz {
+	color: green;
+}
diff --git a/plugins/postcss-base-plugin/test/example.css b/plugins/postcss-base-plugin/test/example.css
new file mode 100644
index 0000000..181f83a
--- /dev/null
+++ b/plugins/postcss-base-plugin/test/example.css
@@ -0,0 +1,7 @@
+.foo {
+	color: red;
+}
+
+.baz {
+	color: green;
+}
diff --git a/plugins/postcss-base-plugin/test/example.expect.css b/plugins/postcss-base-plugin/test/example.expect.css
new file mode 100644
index 0000000..9d738d5
--- /dev/null
+++ b/plugins/postcss-base-plugin/test/example.expect.css
@@ -0,0 +1,7 @@
+.foo {
+	color: blue;
+}
+
+.baz {
+	color: green;
+}
diff --git a/plugins/postcss-base-plugin/tsconfig.json b/plugins/postcss-base-plugin/tsconfig.json
new file mode 100644
index 0000000..68a2606
--- /dev/null
+++ b/plugins/postcss-base-plugin/tsconfig.json
@@ -0,0 +1,9 @@
+{
+  "extends": "../../tsconfig.json",
+  "compilerOptions": {
+    "outDir": "dist",
+    "declarationDir": "."
+  },
+  "include": ["./src/**/*"],
+  "exclude": ["dist"],
+}
diff --git a/plugins/postcss-color-functional-notation/.editorconfig b/plugins/postcss-color-functional-notation/.editorconfig
deleted file mode 100644
index e06d798..0000000
--- a/plugins/postcss-color-functional-notation/.editorconfig
+++ /dev/null
@@ -1,15 +0,0 @@
-root = true
-
-[*]
-charset = utf-8
-end_of_line = lf
-indent_style = tab
-insert_final_newline = true
-trim_trailing_whitespace = true
-
-[*.md]
-trim_trailing_whitespace = false
-
-[*.{json,md,yml}]
-indent_size = 2
-indent_style = space
diff --git a/plugins/postcss-color-functional-notation/.github/workflows/test.yml b/plugins/postcss-color-functional-notation/.github/workflows/test.yml
deleted file mode 100644
index 4a287db..0000000
--- a/plugins/postcss-color-functional-notation/.github/workflows/test.yml
+++ /dev/null
@@ -1,18 +0,0 @@
-name: test
-on:
-  push:
-
-jobs:
-  test:
-    runs-on: ubuntu-latest
-    strategy:
-      matrix:
-        node: [12, 16]
-    steps:
-      - uses: actions/checkout@v2
-      - uses: actions/setup-node@v2
-        with:
-          node-version: ${{ matrix.node }}
-
-      - run: yarn install --ignore-scripts
-      - run: yarn run test
diff --git a/plugins/postcss-color-functional-notation/package.json b/plugins/postcss-color-functional-notation/package.json
index ca40517..41f75a0 100644
--- a/plugins/postcss-color-functional-notation/package.json
+++ b/plugins/postcss-color-functional-notation/package.json
@@ -20,7 +20,8 @@
     "pretest": "npm install && npm run build",
     "test": "npm run lint && npm run tape",
     "tape": "npx postcss-tape",
-    "prepublishOnly": "npm test"
+    "prepublishOnly": "npm run build --if-present && npm run test",
+    "stryker": "stryker run --logLevel error"
   },
   "engines": {
     "node": ">=12"
diff --git a/plugins/postcss-color-mod-function/.editorconfig b/plugins/postcss-color-mod-function/.editorconfig
deleted file mode 100644
index e06d798..0000000
--- a/plugins/postcss-color-mod-function/.editorconfig
+++ /dev/null
@@ -1,15 +0,0 @@
-root = true
-
-[*]
-charset = utf-8
-end_of_line = lf
-indent_style = tab
-insert_final_newline = true
-trim_trailing_whitespace = true
-
-[*.md]
-trim_trailing_whitespace = false
-
-[*.{json,md,yml}]
-indent_size = 2
-indent_style = space
diff --git a/plugins/postcss-color-mod-function/.travis.yml b/plugins/postcss-color-mod-function/.travis.yml
deleted file mode 100644
index 651e029..0000000
--- a/plugins/postcss-color-mod-function/.travis.yml
+++ /dev/null
@@ -1,9 +0,0 @@
-# https://docs.travis-ci.com/user/travis-lint
-
-language: node_js
-
-node_js:
-  - 12
-
-install:
-  - npm install --ignore-scripts
diff --git a/plugins/postcss-color-mod-function/package.json b/plugins/postcss-color-mod-function/package.json
index 300c25b..46bfb1b 100644
--- a/plugins/postcss-color-mod-function/package.json
+++ b/plugins/postcss-color-mod-function/package.json
@@ -16,14 +16,15 @@
     "index.es.mjs.map"
   ],
   "scripts": {
-    "prepublishOnly": "npm test",
+    "prepublishOnly": "npm run build --if-present && npm run test",
     "pretest": "rollup -c .rollup.js --silent",
     "test": "echo 'Running tests...'; npm run test:js && npm run test:tape",
     "test:js": "eslint *.js lib/*.js --cache --ignore-path .gitignore --quiet",
-    "test:tape": "postcss-tape"
+    "test:tape": "postcss-tape",
+    "stryker": "stryker run --logLevel error"
   },
   "engines": {
-    "node": ">=6.0.0"
+    "node": ">=12"
   },
   "dependencies": {
     "@csstools/convert-colors": "^1.4.0",
diff --git a/plugins/postcss-dir-pseudo-class/.editorconfig b/plugins/postcss-dir-pseudo-class/.editorconfig
deleted file mode 100644
index e06d798..0000000
--- a/plugins/postcss-dir-pseudo-class/.editorconfig
+++ /dev/null
@@ -1,15 +0,0 @@
-root = true
-
-[*]
-charset = utf-8
-end_of_line = lf
-indent_style = tab
-insert_final_newline = true
-trim_trailing_whitespace = true
-
-[*.md]
-trim_trailing_whitespace = false
-
-[*.{json,md,yml}]
-indent_size = 2
-indent_style = space
diff --git a/plugins/postcss-dir-pseudo-class/.github/workflows/test.yml b/plugins/postcss-dir-pseudo-class/.github/workflows/test.yml
deleted file mode 100644
index 4a287db..0000000
--- a/plugins/postcss-dir-pseudo-class/.github/workflows/test.yml
+++ /dev/null
@@ -1,18 +0,0 @@
-name: test
-on:
-  push:
-
-jobs:
-  test:
-    runs-on: ubuntu-latest
-    strategy:
-      matrix:
-        node: [12, 16]
-    steps:
-      - uses: actions/checkout@v2
-      - uses: actions/setup-node@v2
-        with:
-          node-version: ${{ matrix.node }}
-
-      - run: yarn install --ignore-scripts
-      - run: yarn run test
diff --git a/plugins/postcss-dir-pseudo-class/package.json b/plugins/postcss-dir-pseudo-class/package.json
index d52d4a1..8dd5922 100644
--- a/plugins/postcss-dir-pseudo-class/package.json
+++ b/plugins/postcss-dir-pseudo-class/package.json
@@ -11,11 +11,12 @@
     "index.js"
   ],
   "scripts": {
-    "prepublishOnly": "npm test",
+    "prepublishOnly": "npm run build --if-present && npm run test",
     "test": "echo 'Running tests...'; npm run test:js && npm run test:tape",
     "test:ec": "echint --ignore index.*.js test",
     "test:js": "eslint *.js --cache --ignore-path .gitignore --quiet",
-    "test:tape": "postcss-tape"
+    "test:tape": "postcss-tape",
+    "stryker": "stryker run --logLevel error"
   },
   "engines": {
     "node": ">=12"
diff --git a/plugins/postcss-double-position-gradients/.editorconfig b/plugins/postcss-double-position-gradients/.editorconfig
deleted file mode 100644
index e06d798..0000000
--- a/plugins/postcss-double-position-gradients/.editorconfig
+++ /dev/null
@@ -1,15 +0,0 @@
-root = true
-
-[*]
-charset = utf-8
-end_of_line = lf
-indent_style = tab
-insert_final_newline = true
-trim_trailing_whitespace = true
-
-[*.md]
-trim_trailing_whitespace = false
-
-[*.{json,md,yml}]
-indent_size = 2
-indent_style = space
diff --git a/plugins/postcss-double-position-gradients/.github/workflows/test.yml b/plugins/postcss-double-position-gradients/.github/workflows/test.yml
deleted file mode 100644
index 4a287db..0000000
--- a/plugins/postcss-double-position-gradients/.github/workflows/test.yml
+++ /dev/null
@@ -1,18 +0,0 @@
-name: test
-on:
-  push:
-
-jobs:
-  test:
-    runs-on: ubuntu-latest
-    strategy:
-      matrix:
-        node: [12, 16]
-    steps:
-      - uses: actions/checkout@v2
-      - uses: actions/setup-node@v2
-        with:
-          node-version: ${{ matrix.node }}
-
-      - run: yarn install --ignore-scripts
-      - run: yarn run test
diff --git a/plugins/postcss-double-position-gradients/package.json b/plugins/postcss-double-position-gradients/package.json
index 676717e..19c1c7c 100644
--- a/plugins/postcss-double-position-gradients/package.json
+++ b/plugins/postcss-double-position-gradients/package.json
@@ -9,11 +9,12 @@
   "bugs": "https://github.com/csstools/postcss-double-position-gradients/issues",
   "main": "index.js",
   "scripts": {
-    "prepublishOnly": "npm test",
+    "prepublishOnly": "npm run build --if-present && npm run test",
     "lint": "eslint *.js --cache",
     "lint:fix": "eslint *.js --cache --fix",
     "test": "npm run lint && npm run tape",
-    "tape": "postcss-tape"
+    "tape": "postcss-tape",
+    "stryker": "stryker run --logLevel error"
   },
   "engines": {
     "node": ">=12"
diff --git a/plugins/postcss-double-position-gradients/yarn.lock b/plugins/postcss-double-position-gradients/yarn.lock
deleted file mode 100644
index 811966f..0000000
--- a/plugins/postcss-double-position-gradients/yarn.lock
+++ /dev/null
@@ -1,808 +0,0 @@
-# THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
-# yarn lockfile v1
-
-
-"@babel/code-frame@7.12.11":
-  version "7.12.11"
-  resolved "https://registry.yarnpkg.com/@babel/code-frame/-/code-frame-7.12.11.tgz#f4ad435aa263db935b8f10f2c552d23fb716a63f"
-  integrity sha512-Zt1yodBx1UcyiePMSkWnU4hPqhwq7hGi2nFL1LeA3EUl+q2LQx16MISgJ0+z7dnmgvP9QtIleuETGOiOH1RcIw==
-  dependencies:
-    "@babel/highlight" "^7.10.4"
-
-"@babel/helper-validator-identifier@^7.14.5":
-  version "7.14.9"
-  resolved "https://registry.yarnpkg.com/@babel/helper-validator-identifier/-/helper-validator-identifier-7.14.9.tgz#6654d171b2024f6d8ee151bf2509699919131d48"
-  integrity sha512-pQYxPY0UP6IHISRitNe8bsijHex4TWZXi2HwKVsjPiltzlhse2znVcm9Ace510VT1kxIHjGJCZZQBX2gJDbo0g==
-
-"@babel/highlight@^7.10.4":
-  version "7.14.5"
-  resolved "https://registry.yarnpkg.com/@babel/highlight/-/highlight-7.14.5.tgz#6861a52f03966405001f6aa534a01a24d99e8cd9"
-  integrity sha512-qf9u2WFWVV0MppaL877j2dBtQIDgmidgjGk5VIMw3OadXvYaXn66U1BFlH2t4+t3i+8PhedppRv+i40ABzd+gg==
-  dependencies:
-    "@babel/helper-validator-identifier" "^7.14.5"
-    chalk "^2.0.0"
-    js-tokens "^4.0.0"
-
-"@eslint/eslintrc@^0.4.3":
-  version "0.4.3"
-  resolved "https://registry.yarnpkg.com/@eslint/eslintrc/-/eslintrc-0.4.3.tgz#9e42981ef035beb3dd49add17acb96e8ff6f394c"
-  integrity sha512-J6KFFz5QCYUJq3pf0mjEcCJVERbzv71PUIDczuh9JkwGEzced6CO5ADLHB1rbf/+oPBtoPfMYNOpGDzCANlbXw==
-  dependencies:
-    ajv "^6.12.4"
-    debug "^4.1.1"
-    espree "^7.3.0"
-    globals "^13.9.0"
-    ignore "^4.0.6"
-    import-fresh "^3.2.1"
-    js-yaml "^3.13.1"
-    minimatch "^3.0.4"
-    strip-json-comments "^3.1.1"
-
-"@humanwhocodes/config-array@^0.5.0":
-  version "0.5.0"
-  resolved "https://registry.yarnpkg.com/@humanwhocodes/config-array/-/config-array-0.5.0.tgz#1407967d4c6eecd7388f83acf1eaf4d0c6e58ef9"
-  integrity sha512-FagtKFz74XrTl7y6HCzQpwDfXP0yhxe9lHLD1UZxjvZIcbyRz8zTFF/yYNfSfzU414eDwZ1SrO0Qvtyf+wFMQg==
-  dependencies:
-    "@humanwhocodes/object-schema" "^1.2.0"
-    debug "^4.1.1"
-    minimatch "^3.0.4"
-
-"@humanwhocodes/object-schema@^1.2.0":
-  version "1.2.0"
-  resolved "https://registry.yarnpkg.com/@humanwhocodes/object-schema/-/object-schema-1.2.0.tgz#87de7af9c231826fdd68ac7258f77c429e0e5fcf"
-  integrity sha512-wdppn25U8z/2yiaT6YGquE6X8sSv7hNMWSXYSSU1jGv/yd6XqjXgTDJ8KP4NgjTXfJ3GbRjeeb8RTV7a/VpM+w==
-
-acorn-jsx@^5.3.1:
-  version "5.3.2"
-  resolved "https://registry.yarnpkg.com/acorn-jsx/-/acorn-jsx-5.3.2.tgz#7ed5bb55908b3b2f1bc55c6af1653bada7f07937"
-  integrity sha512-rq9s+JNhf0IChjtDXxllJ7g41oZk5SlXtp0LHwyA5cejwn7vKmKp4pPri6YEePv2PU65sAsegbXtIinmDFDXgQ==
-
-acorn@^7.4.0:
-  version "7.4.1"
-  resolved "https://registry.yarnpkg.com/acorn/-/acorn-7.4.1.tgz#feaed255973d2e77555b83dbc08851a6c63520fa"
-  integrity sha512-nQyp0o1/mNdbTO1PO6kHkwSrmgZ0MT/jCCpNiwbUjGoRN4dlBhqJtoQuCnEOKzgTVwg0ZWiCoQy6SxMebQVh8A==
-
-ajv@^6.10.0, ajv@^6.12.4:
-  version "6.12.6"
-  resolved "https://registry.yarnpkg.com/ajv/-/ajv-6.12.6.tgz#baf5a62e802b07d977034586f8c3baf5adf26df4"
-  integrity sha512-j3fVLgvTo527anyYyJOGTYJbG+vnnQYvE0m5mmkc1TK+nxAppkCLMIL0aZ4dblVCNoGShhm+kzE4ZUykBoMg4g==
-  dependencies:
-    fast-deep-equal "^3.1.1"
-    fast-json-stable-stringify "^2.0.0"
-    json-schema-traverse "^0.4.1"
-    uri-js "^4.2.2"
-
-ajv@^8.0.1:
-  version "8.6.3"
-  resolved "https://registry.yarnpkg.com/ajv/-/ajv-8.6.3.tgz#11a66527761dc3e9a3845ea775d2d3c0414e8764"
-  integrity sha512-SMJOdDP6LqTkD0Uq8qLi+gMwSt0imXLSV080qFVwJCpH9U6Mb+SUGHAXM0KNbcBPguytWyvFxcHgMLe2D2XSpw==
-  dependencies:
-    fast-deep-equal "^3.1.1"
-    json-schema-traverse "^1.0.0"
-    require-from-string "^2.0.2"
-    uri-js "^4.2.2"
-
-ansi-colors@^4.1.1:
-  version "4.1.1"
-  resolved "https://registry.yarnpkg.com/ansi-colors/-/ansi-colors-4.1.1.tgz#cbb9ae256bf750af1eab344f229aa27fe94ba348"
-  integrity sha512-JoX0apGbHaUJBNl6yF+p6JAFYZ666/hhCGKN5t9QFjbJQKUU/g8MNbFDbvfrgKXvI1QpZplPOnwIo99lX/AAmA==
-
-ansi-regex@^5.0.0:
-  version "5.0.1"
-  resolved "https://registry.yarnpkg.com/ansi-regex/-/ansi-regex-5.0.1.tgz#082cb2c89c9fe8659a311a53bd6a4dc5301db304"
-  integrity sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==
-
-ansi-styles@^3.2.1:
-  version "3.2.1"
-  resolved "https://registry.yarnpkg.com/ansi-styles/-/ansi-styles-3.2.1.tgz#41fbb20243e50b12be0f04b8dedbf07520ce841d"
-  integrity sha512-VT0ZI6kZRdTh8YyJw3SMbYm/u+NqfsAxEpWO0Pf9sq8/e94WxxOpPKx9FR1FlyCtOVDNOQ+8ntlqFxiRc+r5qA==
-  dependencies:
-    color-convert "^1.9.0"
-
-ansi-styles@^4.0.0, ansi-styles@^4.1.0:
-  version "4.3.0"
-  resolved "https://registry.yarnpkg.com/ansi-styles/-/ansi-styles-4.3.0.tgz#edd803628ae71c04c85ae7a0906edad34b648937"
-  integrity sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==
-  dependencies:
-    color-convert "^2.0.1"
-
-argparse@^1.0.7:
-  version "1.0.10"
-  resolved "https://registry.yarnpkg.com/argparse/-/argparse-1.0.10.tgz#bcd6791ea5ae09725e17e5ad988134cd40b3d911"
-  integrity sha512-o5Roy6tNG4SL/FOkCAN6RzjiakZS25RLYFrcMttJqbdd8BWrnA+fGz57iN5Pb06pvBGvl5gQ0B48dJlslXvoTg==
-  dependencies:
-    sprintf-js "~1.0.2"
-
-astral-regex@^2.0.0:
-  version "2.0.0"
-  resolved "https://registry.yarnpkg.com/astral-regex/-/astral-regex-2.0.0.tgz#483143c567aeed4785759c0865786dc77d7d2e31"
-  integrity sha512-Z7tMw1ytTXt5jqMcOP+OQteU1VuNK9Y02uuJtKQ1Sv69jXQKKg5cibLwGJow8yzZP+eAc18EmLGPal0bp36rvQ==
-
-balanced-match@^1.0.0:
-  version "1.0.2"
-  resolved "https://registry.yarnpkg.com/balanced-match/-/balanced-match-1.0.2.tgz#e83e3a7e3f300b34cb9d87f615fa0cbf357690ee"
-  integrity sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==
-
-brace-expansion@^1.1.7:
-  version "1.1.11"
-  resolved "https://registry.yarnpkg.com/brace-expansion/-/brace-expansion-1.1.11.tgz#3c7fcbf529d87226f3d2f52b966ff5271eb441dd"
-  integrity sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==
-  dependencies:
-    balanced-match "^1.0.0"
-    concat-map "0.0.1"
-
-callsites@^3.0.0:
-  version "3.1.0"
-  resolved "https://registry.yarnpkg.com/callsites/-/callsites-3.1.0.tgz#b3630abd8943432f54b3f0519238e33cd7df2f73"
-  integrity sha512-P8BjAsXvZS+VIDUI11hHCQEv74YT67YUi5JJFNWIqL235sBmjX4+qx9Muvls5ivyNENctx46xQLQ3aTuE7ssaQ==
-
-chalk@^2.0.0:
-  version "2.4.2"
-  resolved "https://registry.yarnpkg.com/chalk/-/chalk-2.4.2.tgz#cd42541677a54333cf541a49108c1432b44c9424"
-  integrity sha512-Mti+f9lpJNcwF4tWV8/OrTTtF1gZi+f8FqlyAdouralcFWFQWF2+NgCHShjkCb+IFBLq9buZwE1xckQU4peSuQ==
-  dependencies:
-    ansi-styles "^3.2.1"
-    escape-string-regexp "^1.0.5"
-    supports-color "^5.3.0"
-
-chalk@^4.0.0:
-  version "4.1.2"
-  resolved "https://registry.yarnpkg.com/chalk/-/chalk-4.1.2.tgz#aac4e2b7734a740867aeb16bf02aad556a1e7a01"
-  integrity sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==
-  dependencies:
-    ansi-styles "^4.1.0"
-    supports-color "^7.1.0"
-
-color-convert@^1.9.0:
-  version "1.9.3"
-  resolved "https://registry.yarnpkg.com/color-convert/-/color-convert-1.9.3.tgz#bb71850690e1f136567de629d2d5471deda4c1e8"
-  integrity sha512-QfAUtd+vFdAtFQcC8CCyYt1fYWxSqAiK2cSD6zDB8N3cpsEBAvRxp9zOGg6G/SHHJYAT88/az/IuDGALsNVbGg==
-  dependencies:
-    color-name "1.1.3"
-
-color-convert@^2.0.1:
-  version "2.0.1"
-  resolved "https://registry.yarnpkg.com/color-convert/-/color-convert-2.0.1.tgz#72d3a68d598c9bdb3af2ad1e84f21d896abd4de3"
-  integrity sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==
-  dependencies:
-    color-name "~1.1.4"
-
-color-name@1.1.3:
-  version "1.1.3"
-  resolved "https://registry.yarnpkg.com/color-name/-/color-name-1.1.3.tgz#a7d0558bd89c42f795dd42328f740831ca53bc25"
-  integrity sha1-p9BVi9icQveV3UIyj3QIMcpTvCU=
-
-color-name@^1.1.4, color-name@~1.1.4:
-  version "1.1.4"
-  resolved "https://registry.yarnpkg.com/color-name/-/color-name-1.1.4.tgz#c2a09a87acbde69543de6f63fa3995c826c536a2"
-  integrity sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==
-
-colorette@^1.2.2:
-  version "1.4.0"
-  resolved "https://registry.yarnpkg.com/colorette/-/colorette-1.4.0.tgz#5190fbb87276259a86ad700bff2c6d6faa3fca40"
-  integrity sha512-Y2oEozpomLn7Q3HFP7dpww7AtMJplbM9lGZP6RDfHqmbeRjiwRg4n6VM6j4KLmRke85uWEI7JqF17f3pqdRA0g==
-
-concat-map@0.0.1:
-  version "0.0.1"
-  resolved "https://registry.yarnpkg.com/concat-map/-/concat-map-0.0.1.tgz#d8a96bd77fd68df7793a73036a3ba0d5405d477b"
-  integrity sha1-2Klr13/Wjfd5OnMDajug1UBdR3s=
-
-cross-spawn@^7.0.2:
-  version "7.0.3"
-  resolved "https://registry.yarnpkg.com/cross-spawn/-/cross-spawn-7.0.3.tgz#f73a85b9d5d41d045551c177e2882d4ac85728a6"
-  integrity sha512-iRDPJKUPVEND7dHPO8rkbOnPpyDygcDFtWjpeWNCgy8WP2rXcxXL8TskReQl6OrB2G7+UJrags1q15Fudc7G6w==
-  dependencies:
-    path-key "^3.1.0"
-    shebang-command "^2.0.0"
-    which "^2.0.1"
-
-debug@^4.0.1, debug@^4.1.1:
-  version "4.3.2"
-  resolved "https://registry.yarnpkg.com/debug/-/debug-4.3.2.tgz#f0a49c18ac8779e31d4a0c6029dfb76873c7428b"
-  integrity sha512-mOp8wKcvj7XxC78zLgw/ZA+6TSgkoE2C/ienthhRD298T7UNwAg9diBpLRxC0mOezLl4B0xV7M0cCO6P/O0Xhw==
-  dependencies:
-    ms "2.1.2"
-
-deep-is@^0.1.3:
-  version "0.1.4"
-  resolved "https://registry.yarnpkg.com/deep-is/-/deep-is-0.1.4.tgz#a6f2dce612fadd2ef1f519b73551f17e85199831"
-  integrity sha512-oIPzksmTg4/MriiaYGO+okXDT7ztn/w3Eptv/+gSIdMdKsJo0u4CfYNFJPy+4SKMuCqGw2wxnA+URMg3t8a/bQ==
-
-doctrine@^3.0.0:
-  version "3.0.0"
-  resolved "https://registry.yarnpkg.com/doctrine/-/doctrine-3.0.0.tgz#addebead72a6574db783639dc87a121773973961"
-  integrity sha512-yS+Q5i3hBf7GBkd4KG8a7eBNNWNGLTaEwwYWUijIYM7zrlYDM0BFXHjjPWlWZ1Rg7UaddZeIDmi9jF3HmqiQ2w==
-  dependencies:
-    esutils "^2.0.2"
-
-emoji-regex@^8.0.0:
-  version "8.0.0"
-  resolved "https://registry.yarnpkg.com/emoji-regex/-/emoji-regex-8.0.0.tgz#e818fd69ce5ccfcb404594f842963bf53164cc37"
-  integrity sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==
-
-enquirer@^2.3.5:
-  version "2.3.6"
-  resolved "https://registry.yarnpkg.com/enquirer/-/enquirer-2.3.6.tgz#2a7fe5dd634a1e4125a975ec994ff5456dc3734d"
-  integrity sha512-yjNnPr315/FjS4zIsUxYguYUPP2e1NK4d7E7ZOLiyYCcbFBiTMyID+2wvm2w6+pZ/odMA7cRkjhsPbltwBOrLg==
-  dependencies:
-    ansi-colors "^4.1.1"
-
-escape-string-regexp@^1.0.5:
-  version "1.0.5"
-  resolved "https://registry.yarnpkg.com/escape-string-regexp/-/escape-string-regexp-1.0.5.tgz#1b61c0562190a8dff6ae3bb2cf0200ca130b86d4"
-  integrity sha1-G2HAViGQqN/2rjuyzwIAyhMLhtQ=
-
-escape-string-regexp@^4.0.0:
-  version "4.0.0"
-  resolved "https://registry.yarnpkg.com/escape-string-regexp/-/escape-string-regexp-4.0.0.tgz#14ba83a5d373e3d311e5afca29cf5bfad965bf34"
-  integrity sha512-TtpcNJ3XAzx3Gq8sWRzJaVajRs0uVxA2YAkdb1jm2YkPz4G6egUFAyA3n5vtEIZefPk5Wa4UXbKuS5fKkJWdgA==
-
-eslint-scope@^5.1.1:
-  version "5.1.1"
-  resolved "https://registry.yarnpkg.com/eslint-scope/-/eslint-scope-5.1.1.tgz#e786e59a66cb92b3f6c1fb0d508aab174848f48c"
-  integrity sha512-2NxwbF/hZ0KpepYN0cNbo+FN6XoK7GaHlQhgx/hIZl6Va0bF45RQOOwhLIy8lQDbuCiadSLCBnH2CFYquit5bw==
-  dependencies:
-    esrecurse "^4.3.0"
-    estraverse "^4.1.1"
-
-eslint-utils@^2.1.0:
-  version "2.1.0"
-  resolved "https://registry.yarnpkg.com/eslint-utils/-/eslint-utils-2.1.0.tgz#d2de5e03424e707dc10c74068ddedae708741b27"
-  integrity sha512-w94dQYoauyvlDc43XnGB8lU3Zt713vNChgt4EWwhXAP2XkBvndfxF0AgIqKOOasjPIPzj9JqgwkwbCYD0/V3Zg==
-  dependencies:
-    eslint-visitor-keys "^1.1.0"
-
-eslint-visitor-keys@^1.1.0, eslint-visitor-keys@^1.3.0:
-  version "1.3.0"
-  resolved "https://registry.yarnpkg.com/eslint-visitor-keys/-/eslint-visitor-keys-1.3.0.tgz#30ebd1ef7c2fdff01c3a4f151044af25fab0523e"
-  integrity sha512-6J72N8UNa462wa/KFODt/PJ3IU60SDpC3QXC1Hjc1BXXpfL2C9R5+AU7jhe0F6GREqVMh4Juu+NY7xn+6dipUQ==
-
-eslint-visitor-keys@^2.0.0:
-  version "2.1.0"
-  resolved "https://registry.yarnpkg.com/eslint-visitor-keys/-/eslint-visitor-keys-2.1.0.tgz#f65328259305927392c938ed44eb0a5c9b2bd303"
-  integrity sha512-0rSmRBzXgDzIsD6mGdJgevzgezI534Cer5L/vyMX0kHzT/jiB43jRhd9YUlMGYLQy2zprNmoT8qasCGtY+QaKw==
-
-eslint@7.32.0:
-  version "7.32.0"
-  resolved "https://registry.yarnpkg.com/eslint/-/eslint-7.32.0.tgz#c6d328a14be3fb08c8d1d21e12c02fdb7a2a812d"
-  integrity sha512-VHZ8gX+EDfz+97jGcgyGCyRia/dPOd6Xh9yPv8Bl1+SoaIwD+a/vlrOmGRUyOYu7MwUhc7CxqeaDZU13S4+EpA==
-  dependencies:
-    "@babel/code-frame" "7.12.11"
-    "@eslint/eslintrc" "^0.4.3"
-    "@humanwhocodes/config-array" "^0.5.0"
-    ajv "^6.10.0"
-    chalk "^4.0.0"
-    cross-spawn "^7.0.2"
-    debug "^4.0.1"
-    doctrine "^3.0.0"
-    enquirer "^2.3.5"
-    escape-string-regexp "^4.0.0"
-    eslint-scope "^5.1.1"
-    eslint-utils "^2.1.0"
-    eslint-visitor-keys "^2.0.0"
-    espree "^7.3.1"
-    esquery "^1.4.0"
-    esutils "^2.0.2"
-    fast-deep-equal "^3.1.3"
-    file-entry-cache "^6.0.1"
-    functional-red-black-tree "^1.0.1"
-    glob-parent "^5.1.2"
-    globals "^13.6.0"
-    ignore "^4.0.6"
-    import-fresh "^3.0.0"
-    imurmurhash "^0.1.4"
-    is-glob "^4.0.0"
-    js-yaml "^3.13.1"
-    json-stable-stringify-without-jsonify "^1.0.1"
-    levn "^0.4.1"
-    lodash.merge "^4.6.2"
-    minimatch "^3.0.4"
-    natural-compare "^1.4.0"
-    optionator "^0.9.1"
-    progress "^2.0.0"
-    regexpp "^3.1.0"
-    semver "^7.2.1"
-    strip-ansi "^6.0.0"
-    strip-json-comments "^3.1.0"
-    table "^6.0.9"
-    text-table "^0.2.0"
-    v8-compile-cache "^2.0.3"
-
-espree@^7.3.0, espree@^7.3.1:
-  version "7.3.1"
-  resolved "https://registry.yarnpkg.com/espree/-/espree-7.3.1.tgz#f2df330b752c6f55019f8bd89b7660039c1bbbb6"
-  integrity sha512-v3JCNCE64umkFpmkFGqzVKsOT0tN1Zr+ueqLZfpV1Ob8e+CEgPWa+OxCoGH3tnhimMKIaBm4m/vaRpJ/krRz2g==
-  dependencies:
-    acorn "^7.4.0"
-    acorn-jsx "^5.3.1"
-    eslint-visitor-keys "^1.3.0"
-
-esprima@^4.0.0:
-  version "4.0.1"
-  resolved "https://registry.yarnpkg.com/esprima/-/esprima-4.0.1.tgz#13b04cdb3e6c5d19df91ab6987a8695619b0aa71"
-  integrity sha512-eGuFFw7Upda+g4p+QHvnW0RyTX/SVeJBDM/gCtMARO0cLuT2HcEKnTPvhjV6aGeqrCB/sbNop0Kszm0jsaWU4A==
-
-esquery@^1.4.0:
-  version "1.4.0"
-  resolved "https://registry.yarnpkg.com/esquery/-/esquery-1.4.0.tgz#2148ffc38b82e8c7057dfed48425b3e61f0f24a5"
-  integrity sha512-cCDispWt5vHHtwMY2YrAQ4ibFkAL8RbH5YGBnZBc90MolvvfkkQcJro/aZiAQUlQ3qgrYS6D6v8Gc5G5CQsc9w==
-  dependencies:
-    estraverse "^5.1.0"
-
-esrecurse@^4.3.0:
-  version "4.3.0"
-  resolved "https://registry.yarnpkg.com/esrecurse/-/esrecurse-4.3.0.tgz#7ad7964d679abb28bee72cec63758b1c5d2c9921"
-  integrity sha512-KmfKL3b6G+RXvP8N1vr3Tq1kL/oCFgn2NYXEtqP8/L3pKapUA4G8cFVaoF3SU323CD4XypR/ffioHmkti6/Tag==
-  dependencies:
-    estraverse "^5.2.0"
-
-estraverse@^4.1.1:
-  version "4.3.0"
-  resolved "https://registry.yarnpkg.com/estraverse/-/estraverse-4.3.0.tgz#398ad3f3c5a24948be7725e83d11a7de28cdbd1d"
-  integrity sha512-39nnKffWz8xN1BU/2c79n9nB9HDzo0niYUqx6xyqUnyoAnQyyWpOTdZEeiCch8BBu515t4wp9ZmgVfVhn9EBpw==
-
-estraverse@^5.1.0, estraverse@^5.2.0:
-  version "5.2.0"
-  resolved "https://registry.yarnpkg.com/estraverse/-/estraverse-5.2.0.tgz#307df42547e6cc7324d3cf03c155d5cdb8c53880"
-  integrity sha512-BxbNGGNm0RyRYvUdHpIwv9IWzeM9XClbOxwoATuFdOE7ZE6wHL+HQ5T8hoPM+zHvmKzzsEqhgy0GrQ5X13afiQ==
-
-esutils@^2.0.2:
-  version "2.0.3"
-  resolved "https://registry.yarnpkg.com/esutils/-/esutils-2.0.3.tgz#74d2eb4de0b8da1293711910d50775b9b710ef64"
-  integrity sha512-kVscqXk4OCp68SZ0dkgEKVi6/8ij300KBWTJq32P/dYeWTSwK41WyTxalN1eRmA5Z9UU/LX9D7FWSmV9SAYx6g==
-
-fast-deep-equal@^3.1.1, fast-deep-equal@^3.1.3:
-  version "3.1.3"
-  resolved "https://registry.yarnpkg.com/fast-deep-equal/-/fast-deep-equal-3.1.3.tgz#3a7d56b559d6cbc3eb512325244e619a65c6c525"
-  integrity sha512-f3qQ9oQy9j2AhBe/H9VC91wLmKBCCU/gDOnKNAYG5hswO7BLKj09Hc5HYNz9cGI++xlpDCIgDaitVs03ATR84Q==
-
-fast-json-stable-stringify@^2.0.0:
-  version "2.1.0"
-  resolved "https://registry.yarnpkg.com/fast-json-stable-stringify/-/fast-json-stable-stringify-2.1.0.tgz#874bf69c6f404c2b5d99c481341399fd55892633"
-  integrity sha512-lhd/wF+Lk98HZoTCtlVraHtfh5XYijIjalXck7saUtuanSDyLMxnHhSXEDJqHxD7msR8D0uCmqlkwjCV8xvwHw==
-
-fast-levenshtein@^2.0.6:
-  version "2.0.6"
-  resolved "https://registry.yarnpkg.com/fast-levenshtein/-/fast-levenshtein-2.0.6.tgz#3d8a5c66883a16a30ca8643e851f19baa7797917"
-  integrity sha1-PYpcZog6FqMMqGQ+hR8Zuqd5eRc=
-
-file-entry-cache@^6.0.1:
-  version "6.0.1"
-  resolved "https://registry.yarnpkg.com/file-entry-cache/-/file-entry-cache-6.0.1.tgz#211b2dd9659cb0394b073e7323ac3c933d522027"
-  integrity sha512-7Gps/XWymbLk2QLYK4NzpMOrYjMhdIxXuIvy2QBsLE6ljuodKvdkWs/cpyJJ3CVIVpH0Oi1Hvg1ovbMzLdFBBg==
-  dependencies:
-    flat-cache "^3.0.4"
-
-flat-cache@^3.0.4:
-  version "3.0.4"
-  resolved "https://registry.yarnpkg.com/flat-cache/-/flat-cache-3.0.4.tgz#61b0338302b2fe9f957dcc32fc2a87f1c3048b11"
-  integrity sha512-dm9s5Pw7Jc0GvMYbshN6zchCA9RgQlzzEZX3vylR9IqFfS8XciblUXOKfW6SiuJ0e13eDYZoZV5wdrev7P3Nwg==
-  dependencies:
-    flatted "^3.1.0"
-    rimraf "^3.0.2"
-
-flatted@^3.1.0:
-  version "3.2.2"
-  resolved "https://registry.yarnpkg.com/flatted/-/flatted-3.2.2.tgz#64bfed5cb68fe3ca78b3eb214ad97b63bedce561"
-  integrity sha512-JaTY/wtrcSyvXJl4IMFHPKyFur1sE9AUqc0QnhOaJ0CxHtAoIV8pYDzeEfAaNEtGkOfq4gr3LBFmdXW5mOQFnA==
-
-fs.realpath@^1.0.0:
-  version "1.0.0"
-  resolved "https://registry.yarnpkg.com/fs.realpath/-/fs.realpath-1.0.0.tgz#1504ad2523158caa40db4a2787cb01411994ea4f"
-  integrity sha1-FQStJSMVjKpA20onh8sBQRmU6k8=
-
-functional-red-black-tree@^1.0.1:
-  version "1.0.1"
-  resolved "https://registry.yarnpkg.com/functional-red-black-tree/-/functional-red-black-tree-1.0.1.tgz#1b0ab3bd553b2a0d6399d29c0e3ea0b252078327"
-  integrity sha1-GwqzvVU7Kg1jmdKcDj6gslIHgyc=
-
-glob-parent@^5.1.2:
-  version "5.1.2"
-  resolved "https://registry.yarnpkg.com/glob-parent/-/glob-parent-5.1.2.tgz#869832c58034fe68a4093c17dc15e8340d8401c4"
-  integrity sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==
-  dependencies:
-    is-glob "^4.0.1"
-
-glob@^7.1.3:
-  version "7.1.7"
-  resolved "https://registry.yarnpkg.com/glob/-/glob-7.1.7.tgz#3b193e9233f01d42d0b3f78294bbeeb418f94a90"
-  integrity sha512-OvD9ENzPLbegENnYP5UUfJIirTg4+XwMWGaQfQTY0JenxNvvIKP3U3/tAQSPIu/lHxXYSZmpXlUHeqAIdKzBLQ==
-  dependencies:
-    fs.realpath "^1.0.0"
-    inflight "^1.0.4"
-    inherits "2"
-    minimatch "^3.0.4"
-    once "^1.3.0"
-    path-is-absolute "^1.0.0"
-
-globals@^13.6.0, globals@^13.9.0:
-  version "13.11.0"
-  resolved "https://registry.yarnpkg.com/globals/-/globals-13.11.0.tgz#40ef678da117fe7bd2e28f1fab24951bd0255be7"
-  integrity sha512-08/xrJ7wQjK9kkkRoI3OFUBbLx4f+6x3SGwcPvQ0QH6goFDrOU2oyAWrmh3dJezu65buo+HBMzAMQy6rovVC3g==
-  dependencies:
-    type-fest "^0.20.2"
-
-has-flag@^3.0.0:
-  version "3.0.0"
-  resolved "https://registry.yarnpkg.com/has-flag/-/has-flag-3.0.0.tgz#b5d454dc2199ae225699f3467e5a07f3b955bafd"
-  integrity sha1-tdRU3CGZriJWmfNGfloH87lVuv0=
-
-has-flag@^4.0.0:
-  version "4.0.0"
-  resolved "https://registry.yarnpkg.com/has-flag/-/has-flag-4.0.0.tgz#944771fd9c81c81265c4d6941860da06bb59479b"
-  integrity sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==
-
-ignore@^4.0.6:
-  version "4.0.6"
-  resolved "https://registry.yarnpkg.com/ignore/-/ignore-4.0.6.tgz#750e3db5862087b4737ebac8207ffd1ef27b25fc"
-  integrity sha512-cyFDKrqc/YdcWFniJhzI42+AzS+gNwmUzOSFcRCQYwySuBBBy/KjuxWLZ/FHEH6Moq1NizMOBWyTcv8O4OZIMg==
-
-import-fresh@^3.0.0, import-fresh@^3.2.1:
-  version "3.3.0"
-  resolved "https://registry.yarnpkg.com/import-fresh/-/import-fresh-3.3.0.tgz#37162c25fcb9ebaa2e6e53d5b4d88ce17d9e0c2b"
-  integrity sha512-veYYhQa+D1QBKznvhUHxb8faxlrwUnxseDAbAp457E0wLNio2bOSKnjYDhMj+YiAq61xrMGhQk9iXVk5FzgQMw==
-  dependencies:
-    parent-module "^1.0.0"
-    resolve-from "^4.0.0"
-
-imurmurhash@^0.1.4:
-  version "0.1.4"
-  resolved "https://registry.yarnpkg.com/imurmurhash/-/imurmurhash-0.1.4.tgz#9218b9b2b928a238b13dc4fb6b6d576f231453ea"
-  integrity sha1-khi5srkoojixPcT7a21XbyMUU+o=
-
-inflight@^1.0.4:
-  version "1.0.6"
-  resolved "https://registry.yarnpkg.com/inflight/-/inflight-1.0.6.tgz#49bd6331d7d02d0c09bc910a1075ba8165b56df9"
-  integrity sha1-Sb1jMdfQLQwJvJEKEHW6gWW1bfk=
-  dependencies:
-    once "^1.3.0"
-    wrappy "1"
-
-inherits@2:
-  version "2.0.4"
-  resolved "https://registry.yarnpkg.com/inherits/-/inherits-2.0.4.tgz#0fa2c64f932917c3433a0ded55363aae37416b7c"
-  integrity sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ==
-
-is-extglob@^2.1.1:
-  version "2.1.1"
-  resolved "https://registry.yarnpkg.com/is-extglob/-/is-extglob-2.1.1.tgz#a88c02535791f02ed37c76a1b9ea9773c833f8c2"
-  integrity sha1-qIwCU1eR8C7TfHahueqXc8gz+MI=
-
-is-fullwidth-code-point@^3.0.0:
-  version "3.0.0"
-  resolved "https://registry.yarnpkg.com/is-fullwidth-code-point/-/is-fullwidth-code-point-3.0.0.tgz#f116f8064fe90b3f7844a38997c0b75051269f1d"
-  integrity sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==
-
-is-glob@^4.0.0, is-glob@^4.0.1:
-  version "4.0.1"
-  resolved "https://registry.yarnpkg.com/is-glob/-/is-glob-4.0.1.tgz#7567dbe9f2f5e2467bc77ab83c4a29482407a5dc"
-  integrity sha512-5G0tKtBTFImOqDnLB2hG6Bp2qcKEFduo4tZu9MT/H6NQv/ghhy30o55ufafxJ/LdH79LLs2Kfrn85TLKyA7BUg==
-  dependencies:
-    is-extglob "^2.1.1"
-
-is-url-superb@^4.0.0:
-  version "4.0.0"
-  resolved "https://registry.yarnpkg.com/is-url-superb/-/is-url-superb-4.0.0.tgz#b54d1d2499bb16792748ac967aa3ecb41a33a8c2"
-  integrity sha512-GI+WjezhPPcbM+tqE9LnmsY5qqjwHzTvjJ36wxYX5ujNXefSUJ/T17r5bqDV8yLhcgB59KTPNOc9O9cmHTPWsA==
-
-isexe@^2.0.0:
-  version "2.0.0"
-  resolved "https://registry.yarnpkg.com/isexe/-/isexe-2.0.0.tgz#e8fbf374dc556ff8947a10dcb0572d633f2cfa10"
-  integrity sha1-6PvzdNxVb/iUehDcsFctYz8s+hA=
-
-js-tokens@^4.0.0:
-  version "4.0.0"
-  resolved "https://registry.yarnpkg.com/js-tokens/-/js-tokens-4.0.0.tgz#19203fb59991df98e3a287050d4647cdeaf32499"
-  integrity sha512-RdJUflcE3cUzKiMqQgsCu06FPu9UdIJO0beYbPhHN4k6apgJtifcoCtT9bcxOpYBtpD2kCM6Sbzg4CausW/PKQ==
-
-js-yaml@^3.13.1:
-  version "3.14.1"
-  resolved "https://registry.yarnpkg.com/js-yaml/-/js-yaml-3.14.1.tgz#dae812fdb3825fa306609a8717383c50c36a0537"
-  integrity sha512-okMH7OXXJ7YrN9Ok3/SXrnu4iX9yOk+25nqX4imS2npuvTYDmo/QEZoqwZkYaIDk3jVvBOTOIEgEhaLOynBS9g==
-  dependencies:
-    argparse "^1.0.7"
-    esprima "^4.0.0"
-
-json-schema-traverse@^0.4.1:
-  version "0.4.1"
-  resolved "https://registry.yarnpkg.com/json-schema-traverse/-/json-schema-traverse-0.4.1.tgz#69f6a87d9513ab8bb8fe63bdb0979c448e684660"
-  integrity sha512-xbbCH5dCYU5T8LcEhhuh7HJ88HXuW3qsI3Y0zOZFKfZEHcpWiHU/Jxzk629Brsab/mMiHQti9wMP+845RPe3Vg==
-
-json-schema-traverse@^1.0.0:
-  version "1.0.0"
-  resolved "https://registry.yarnpkg.com/json-schema-traverse/-/json-schema-traverse-1.0.0.tgz#ae7bcb3656ab77a73ba5c49bf654f38e6b6860e2"
-  integrity sha512-NM8/P9n3XjXhIZn1lLhkFaACTOURQXjWhV4BA/RnOv8xvgqtqpAX9IO4mRQxSx1Rlo4tqzeqb0sOlruaOy3dug==
-
-json-stable-stringify-without-jsonify@^1.0.1:
-  version "1.0.1"
-  resolved "https://registry.yarnpkg.com/json-stable-stringify-without-jsonify/-/json-stable-stringify-without-jsonify-1.0.1.tgz#9db7b59496ad3f3cfef30a75142d2d930ad72651"
-  integrity sha1-nbe1lJatPzz+8wp1FC0tkwrXJlE=
-
-levn@^0.4.1:
-  version "0.4.1"
-  resolved "https://registry.yarnpkg.com/levn/-/levn-0.4.1.tgz#ae4562c007473b932a6200d403268dd2fffc6ade"
-  integrity sha512-+bT2uH4E5LGE7h/n3evcS/sQlJXCpIp6ym8OWJ5eV6+67Dsql/LaaT7qJBAt2rzfoa/5QBGBhxDix1dMt2kQKQ==
-  dependencies:
-    prelude-ls "^1.2.1"
-    type-check "~0.4.0"
-
-lodash.clonedeep@^4.5.0:
-  version "4.5.0"
-  resolved "https://registry.yarnpkg.com/lodash.clonedeep/-/lodash.clonedeep-4.5.0.tgz#e23f3f9c4f8fbdde872529c1071857a086e5ccef"
-  integrity sha1-4j8/nE+Pvd6HJSnBBxhXoIblzO8=
-
-lodash.merge@^4.6.2:
-  version "4.6.2"
-  resolved "https://registry.yarnpkg.com/lodash.merge/-/lodash.merge-4.6.2.tgz#558aa53b43b661e1925a0afdfa36a9a1085fe57a"
-  integrity sha512-0KpjqXRVvrYyCsX1swR/XTK0va6VQkQM6MNo7PqW77ByjAhoARA8EfrP1N4+KlKj8YS0ZUCtRT/YUuhyYDujIQ==
-
-lodash.truncate@^4.4.2:
-  version "4.4.2"
-  resolved "https://registry.yarnpkg.com/lodash.truncate/-/lodash.truncate-4.4.2.tgz#5a350da0b1113b837ecfffd5812cbe58d6eae193"
-  integrity sha1-WjUNoLERO4N+z//VgSy+WNbq4ZM=
-
-lru-cache@^6.0.0:
-  version "6.0.0"
-  resolved "https://registry.yarnpkg.com/lru-cache/-/lru-cache-6.0.0.tgz#6d6fe6570ebd96aaf90fcad1dafa3b2566db3a94"
-  integrity sha512-Jo6dJ04CmSjuznwJSS3pUeWmd/H0ffTlkXXgwZi+eq1UCmqQwCh+eLsYOYCwY991i2Fah4h1BEMCx4qThGbsiA==
-  dependencies:
-    yallist "^4.0.0"
-
-minimatch@^3.0.4:
-  version "3.0.4"
-  resolved "https://registry.yarnpkg.com/minimatch/-/minimatch-3.0.4.tgz#5166e286457f03306064be5497e8dbb0c3d32083"
-  integrity sha512-yJHVQEhyqPLUTgt9B83PXu6W3rx4MvvHvSUvToogpwoGDOUQ+yDrR0HRot+yOCdCO7u4hX3pWft6kWBBcqh0UA==
-  dependencies:
-    brace-expansion "^1.1.7"
-
-ms@2.1.2:
-  version "2.1.2"
-  resolved "https://registry.yarnpkg.com/ms/-/ms-2.1.2.tgz#d09d1f357b443f493382a8eb3ccd183872ae6009"
-  integrity sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w==
-
-nanoid@^3.1.23:
-  version "3.1.25"
-  resolved "https://registry.yarnpkg.com/nanoid/-/nanoid-3.1.25.tgz#09ca32747c0e543f0e1814b7d3793477f9c8e152"
-  integrity sha512-rdwtIXaXCLFAQbnfqDRnI6jaRHp9fTcYBjtFKE8eezcZ7LuLjhUaQGNeMXf1HmRoCH32CLz6XwX0TtxEOS/A3Q==
-
-natural-compare@^1.4.0:
-  version "1.4.0"
-  resolved "https://registry.yarnpkg.com/natural-compare/-/natural-compare-1.4.0.tgz#4abebfeed7541f2c27acfb29bdbbd15c8d5ba4f7"
-  integrity sha1-Sr6/7tdUHywnrPspvbvRXI1bpPc=
-
-once@^1.3.0:
-  version "1.4.0"
-  resolved "https://registry.yarnpkg.com/once/-/once-1.4.0.tgz#583b1aa775961d4b113ac17d9c50baef9dd76bd1"
-  integrity sha1-WDsap3WWHUsROsF9nFC6753Xa9E=
-  dependencies:
-    wrappy "1"
-
-optionator@^0.9.1:
-  version "0.9.1"
-  resolved "https://registry.yarnpkg.com/optionator/-/optionator-0.9.1.tgz#4f236a6373dae0566a6d43e1326674f50c291499"
-  integrity sha512-74RlY5FCnhq4jRxVUPKDaRwrVNXMqsGsiW6AJw4XK8hmtm10wC0ypZBLw5IIp85NZMr91+qd1RvvENwg7jjRFw==
-  dependencies:
-    deep-is "^0.1.3"
-    fast-levenshtein "^2.0.6"
-    levn "^0.4.1"
-    prelude-ls "^1.2.1"
-    type-check "^0.4.0"
-    word-wrap "^1.2.3"
-
-parent-module@^1.0.0:
-  version "1.0.1"
-  resolved "https://registry.yarnpkg.com/parent-module/-/parent-module-1.0.1.tgz#691d2709e78c79fae3a156622452d00762caaaa2"
-  integrity sha512-GQ2EWRpQV8/o+Aw8YqtfZZPfNRWZYkbidE9k5rpl/hC3vtHHBfGm2Ifi6qWV+coDGkrUKZAxE3Lot5kcsRlh+g==
-  dependencies:
-    callsites "^3.0.0"
-
-path-is-absolute@^1.0.0:
-  version "1.0.1"
-  resolved "https://registry.yarnpkg.com/path-is-absolute/-/path-is-absolute-1.0.1.tgz#174b9268735534ffbc7ace6bf53a5a9e1b5c5f5f"
-  integrity sha1-F0uSaHNVNP+8es5r9TpanhtcX18=
-
-path-key@^3.1.0:
-  version "3.1.1"
-  resolved "https://registry.yarnpkg.com/path-key/-/path-key-3.1.1.tgz#581f6ade658cbba65a0d3380de7753295054f375"
-  integrity sha512-ojmeN0qd+y0jszEtoY48r0Peq5dwMEkIlCOu6Q5f41lfkswXuKtYrhgoTpLnyIcHm24Uhqx+5Tqm2InSwLhE6Q==
-
-postcss-tape@6.0.1:
-  version "6.0.1"
-  resolved "https://registry.yarnpkg.com/postcss-tape/-/postcss-tape-6.0.1.tgz#c81bd77c79c7a9a9a559b6af04a02e4487eb467a"
-  integrity sha512-qw/1YCSoGgmz8DC/8lbUo3OZGN0UWWZdThAvCSOIJrK346Weu8bM+aC5c9q1/Np2YjCJfRqhJO+P94A3sLdWhQ==
-
-postcss-values-parser@6.0.0:
-  version "6.0.0"
-  resolved "https://registry.yarnpkg.com/postcss-values-parser/-/postcss-values-parser-6.0.0.tgz#090e2bf3ef60fdbce90261681a34cf8cb0471adc"
-  integrity sha512-EpjCoM7Ccso7Pn4NY8pcdMyjMULgepDPCgM80xx5M3Kdlb+cd6Pym+Q2ywvqc5ix+CF6/ltdt7XspkVFUkXm3w==
-  dependencies:
-    color-name "^1.1.4"
-    is-url-superb "^4.0.0"
-    quote-unquote "^1.0.0"
-
-postcss@8.3.6:
-  version "8.3.6"
-  resolved "https://registry.yarnpkg.com/postcss/-/postcss-8.3.6.tgz#2730dd76a97969f37f53b9a6096197be311cc4ea"
-  integrity sha512-wG1cc/JhRgdqB6WHEuyLTedf3KIRuD0hG6ldkFEZNCjRxiC+3i6kkWUUbiJQayP28iwG35cEmAbe98585BYV0A==
-  dependencies:
-    colorette "^1.2.2"
-    nanoid "^3.1.23"
-    source-map-js "^0.6.2"
-
-prelude-ls@^1.2.1:
-  version "1.2.1"
-  resolved "https://registry.yarnpkg.com/prelude-ls/-/prelude-ls-1.2.1.tgz#debc6489d7a6e6b0e7611888cec880337d316396"
-  integrity sha512-vkcDPrRZo1QZLbn5RLGPpg/WmIQ65qoWWhcGKf/b5eplkkarX0m9z8ppCat4mlOqUsWpyNuYgO3VRyrYHSzX5g==
-
-progress@^2.0.0:
-  version "2.0.3"
-  resolved "https://registry.yarnpkg.com/progress/-/progress-2.0.3.tgz#7e8cf8d8f5b8f239c1bc68beb4eb78567d572ef8"
-  integrity sha512-7PiHtLll5LdnKIMw100I+8xJXR5gW2QwWYkT6iJva0bXitZKa/XMrSbdmg3r2Xnaidz9Qumd0VPaMrZlF9V9sA==
-
-punycode@^2.1.0:
-  version "2.1.1"
-  resolved "https://registry.yarnpkg.com/punycode/-/punycode-2.1.1.tgz#b58b010ac40c22c5657616c8d2c2c02c7bf479ec"
-  integrity sha512-XRsRjdf+j5ml+y/6GKHPZbrF/8p2Yga0JPtdqTIY2Xe5ohJPD9saDJJLPvp9+NSBprVvevdXZybnj2cv8OEd0A==
-
-quote-unquote@^1.0.0:
-  version "1.0.0"
-  resolved "https://registry.yarnpkg.com/quote-unquote/-/quote-unquote-1.0.0.tgz#67a9a77148effeaf81a4d428404a710baaac8a0b"
-  integrity sha1-Z6mncUjv/q+BpNQoQEpxC6qsigs=
-
-regexpp@^3.1.0:
-  version "3.2.0"
-  resolved "https://registry.yarnpkg.com/regexpp/-/regexpp-3.2.0.tgz#0425a2768d8f23bad70ca4b90461fa2f1213e1b2"
-  integrity sha512-pq2bWo9mVD43nbts2wGv17XLiNLya+GklZ8kaDLV2Z08gDCsGpnKn9BFMepvWuHCbyVvY7J5o5+BVvoQbmlJLg==
-
-require-from-string@^2.0.2:
-  version "2.0.2"
-  resolved "https://registry.yarnpkg.com/require-from-string/-/require-from-string-2.0.2.tgz#89a7fdd938261267318eafe14f9c32e598c36909"
-  integrity sha512-Xf0nWe6RseziFMu+Ap9biiUbmplq6S9/p+7w7YXP/JBHhrUDDUhwa+vANyubuqfZWTveU//DYVGsDG7RKL/vEw==
-
-resolve-from@^4.0.0:
-  version "4.0.0"
-  resolved "https://registry.yarnpkg.com/resolve-from/-/resolve-from-4.0.0.tgz#4abcd852ad32dd7baabfe9b40e00a36db5f392e6"
-  integrity sha512-pb/MYmXstAkysRFx8piNI1tGFNQIFA3vkE3Gq4EuA1dF6gHp/+vgZqsCGJapvy8N3Q+4o7FwvquPJcnZ7RYy4g==
-
-rimraf@^3.0.2:
-  version "3.0.2"
-  resolved "https://registry.yarnpkg.com/rimraf/-/rimraf-3.0.2.tgz#f1a5402ba6220ad52cc1282bac1ae3aa49fd061a"
-  integrity sha512-JZkJMZkAGFFPP2YqXZXPbMlMBgsxzE8ILs4lMIX/2o0L9UBw9O/Y3o6wFw/i9YLapcUJWwqbi3kdxIPdC62TIA==
-  dependencies:
-    glob "^7.1.3"
-
-semver@^7.2.1:
-  version "7.3.5"
-  resolved "https://registry.yarnpkg.com/semver/-/semver-7.3.5.tgz#0b621c879348d8998e4b0e4be94b3f12e6018ef7"
-  integrity sha512-PoeGJYh8HK4BTO/a9Tf6ZG3veo/A7ZVsYrSA6J8ny9nb3B1VrpkuN+z9OE5wfE5p6H4LchYZsegiQgbJD94ZFQ==
-  dependencies:
-    lru-cache "^6.0.0"
-
-shebang-command@^2.0.0:
-  version "2.0.0"
-  resolved "https://registry.yarnpkg.com/shebang-command/-/shebang-command-2.0.0.tgz#ccd0af4f8835fbdc265b82461aaf0c36663f34ea"
-  integrity sha512-kHxr2zZpYtdmrN1qDjrrX/Z1rR1kG8Dx+gkpK1G4eXmvXswmcE1hTWBWYUzlraYw1/yZp6YuDY77YtvbN0dmDA==
-  dependencies:
-    shebang-regex "^3.0.0"
-
-shebang-regex@^3.0.0:
-  version "3.0.0"
-  resolved "https://registry.yarnpkg.com/shebang-regex/-/shebang-regex-3.0.0.tgz#ae16f1644d873ecad843b0307b143362d4c42172"
-  integrity sha512-7++dFhtcx3353uBaq8DDR4NuxBetBzC7ZQOhmTQInHEd6bSrXdiEyzCvG07Z44UYdLShWUyXt5M/yhz8ekcb1A==
-
-slice-ansi@^4.0.0:
-  version "4.0.0"
-  resolved "https://registry.yarnpkg.com/slice-ansi/-/slice-ansi-4.0.0.tgz#500e8dd0fd55b05815086255b3195adf2a45fe6b"
-  integrity sha512-qMCMfhY040cVHT43K9BFygqYbUPFZKHOg7K73mtTWJRb8pyP3fzf4Ixd5SzdEJQ6MRUg/WBnOLxghZtKKurENQ==
-  dependencies:
-    ansi-styles "^4.0.0"
-    astral-regex "^2.0.0"
-    is-fullwidth-code-point "^3.0.0"
-
-source-map-js@^0.6.2:
-  version "0.6.2"
-  resolved "https://registry.yarnpkg.com/source-map-js/-/source-map-js-0.6.2.tgz#0bb5de631b41cfbda6cfba8bd05a80efdfd2385e"
-  integrity sha512-/3GptzWzu0+0MBQFrDKzw/DvvMTUORvgY6k6jd/VS6iCR4RDTKWH6v6WPwQoUO8667uQEf9Oe38DxAYWY5F/Ug==
-
-sprintf-js@~1.0.2:
-  version "1.0.3"
-  resolved "https://registry.yarnpkg.com/sprintf-js/-/sprintf-js-1.0.3.tgz#04e6926f662895354f3dd015203633b857297e2c"
-  integrity sha1-BOaSb2YolTVPPdAVIDYzuFcpfiw=
-
-string-width@^4.2.0:
-  version "4.2.2"
-  resolved "https://registry.yarnpkg.com/string-width/-/string-width-4.2.2.tgz#dafd4f9559a7585cfba529c6a0a4f73488ebd4c5"
-  integrity sha512-XBJbT3N4JhVumXE0eoLU9DCjcaF92KLNqTmFCnG1pf8duUxFGwtP6AD6nkjw9a3IdiRtL3E2w3JDiE/xi3vOeA==
-  dependencies:
-    emoji-regex "^8.0.0"
-    is-fullwidth-code-point "^3.0.0"
-    strip-ansi "^6.0.0"
-
-strip-ansi@^6.0.0:
-  version "6.0.0"
-  resolved "https://registry.yarnpkg.com/strip-ansi/-/strip-ansi-6.0.0.tgz#0b1571dd7669ccd4f3e06e14ef1eed26225ae532"
-  integrity sha512-AuvKTrTfQNYNIctbR1K/YGTR1756GycPsg7b9bdV9Duqur4gv6aKqHXah67Z8ImS7WEz5QVcOtlfW2rZEugt6w==
-  dependencies:
-    ansi-regex "^5.0.0"
-
-strip-json-comments@^3.1.0, strip-json-comments@^3.1.1:
-  version "3.1.1"
-  resolved "https://registry.yarnpkg.com/strip-json-comments/-/strip-json-comments-3.1.1.tgz#31f1281b3832630434831c310c01cccda8cbe006"
-  integrity sha512-6fPc+R4ihwqP6N/aIv2f1gMH8lOVtWQHoqC4yK6oSDVVocumAsfCqjkXnqiYMhmMwS/mEHLp7Vehlt3ql6lEig==
-
-supports-color@^5.3.0:
-  version "5.5.0"
-  resolved "https://registry.yarnpkg.com/supports-color/-/supports-color-5.5.0.tgz#e2e69a44ac8772f78a1ec0b35b689df6530efc8f"
-  integrity sha512-QjVjwdXIt408MIiAqCX4oUKsgU2EqAGzs2Ppkm4aQYbjm+ZEWEcW4SfFNTr4uMNZma0ey4f5lgLrkB0aX0QMow==
-  dependencies:
-    has-flag "^3.0.0"
-
-supports-color@^7.1.0:
-  version "7.2.0"
-  resolved "https://registry.yarnpkg.com/supports-color/-/supports-color-7.2.0.tgz#1b7dcdcb32b8138801b3e478ba6a51caa89648da"
-  integrity sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==
-  dependencies:
-    has-flag "^4.0.0"
-
-table@^6.0.9:
-  version "6.7.1"
-  resolved "https://registry.yarnpkg.com/table/-/table-6.7.1.tgz#ee05592b7143831a8c94f3cee6aae4c1ccef33e2"
-  integrity sha512-ZGum47Yi6KOOFDE8m223td53ath2enHcYLgOCjGr5ngu8bdIARQk6mN/wRMv4yMRcHnCSnHbCEha4sobQx5yWg==
-  dependencies:
-    ajv "^8.0.1"
-    lodash.clonedeep "^4.5.0"
-    lodash.truncate "^4.4.2"
-    slice-ansi "^4.0.0"
-    string-width "^4.2.0"
-    strip-ansi "^6.0.0"
-
-text-table@^0.2.0:
-  version "0.2.0"
-  resolved "https://registry.yarnpkg.com/text-table/-/text-table-0.2.0.tgz#7f5ee823ae805207c00af2df4a84ec3fcfa570b4"
-  integrity sha1-f17oI66AUgfACvLfSoTsP8+lcLQ=
-
-type-check@^0.4.0, type-check@~0.4.0:
-  version "0.4.0"
-  resolved "https://registry.yarnpkg.com/type-check/-/type-check-0.4.0.tgz#07b8203bfa7056c0657050e3ccd2c37730bab8f1"
-  integrity sha512-XleUoc9uwGXqjWwXaUTZAmzMcFZ5858QA2vvx1Ur5xIcixXIP+8LnFDgRplU30us6teqdlskFfu+ae4K79Ooew==
-  dependencies:
-    prelude-ls "^1.2.1"
-
-type-fest@^0.20.2:
-  version "0.20.2"
-  resolved "https://registry.yarnpkg.com/type-fest/-/type-fest-0.20.2.tgz#1bf207f4b28f91583666cb5fbd327887301cd5f4"
-  integrity sha512-Ne+eE4r0/iWnpAxD852z3A+N0Bt5RN//NjJwRd2VFHEmrywxf5vsZlh4R6lixl6B+wz/8d+maTSAkN1FIkI3LQ==
-
-uri-js@^4.2.2:
-  version "4.4.1"
-  resolved "https://registry.yarnpkg.com/uri-js/-/uri-js-4.4.1.tgz#9b1a52595225859e55f669d928f88c6c57f2a77e"
-  integrity sha512-7rKUyy33Q1yc98pQ1DAmLtwX109F7TIfWlW1Ydo8Wl1ii1SeHieeh0HHfPeL2fMXK6z0s8ecKs9frCuLJvndBg==
-  dependencies:
-    punycode "^2.1.0"
-
-v8-compile-cache@^2.0.3:
-  version "2.3.0"
-  resolved "https://registry.yarnpkg.com/v8-compile-cache/-/v8-compile-cache-2.3.0.tgz#2de19618c66dc247dcfb6f99338035d8245a2cee"
-  integrity sha512-l8lCEmLcLYZh4nbunNZvQCJc5pv7+RCwa8q/LdUx8u7lsWvPDKmpodJAJNwkAhJC//dFY48KuIEmjtd4RViDrA==
-
-which@^2.0.1:
-  version "2.0.2"
-  resolved "https://registry.yarnpkg.com/which/-/which-2.0.2.tgz#7c6a8dd0a636a0327e10b59c9286eee93f3f51b1"
-  integrity sha512-BLI3Tl1TW3Pvl70l3yq3Y64i+awpwXqsGBYWkkqMtnbXgrMD+yj7rhW0kuEDxzJaYXGjEW5ogapKNMEKNMjibA==
-  dependencies:
-    isexe "^2.0.0"
-
-word-wrap@^1.2.3:
-  version "1.2.3"
-  resolved "https://registry.yarnpkg.com/word-wrap/-/word-wrap-1.2.3.tgz#610636f6b1f703891bd34771ccb17fb93b47079c"
-  integrity sha512-Hz/mrNwitNRh/HUAtM/VT/5VH+ygD6DV7mYKZAtHOrbs8U7lvPS6xf7EJKMF0uW1KJCl0H701g3ZGus+muE5vQ==
-
-wrappy@1:
-  version "1.0.2"
-  resolved "https://registry.yarnpkg.com/wrappy/-/wrappy-1.0.2.tgz#b5243d8f3ec1aa35f1364605bc0d1036e30ab69f"
-  integrity sha1-tSQ9jz7BqjXxNkYFvA0QNuMKtp8=
-
-yallist@^4.0.0:
-  version "4.0.0"
-  resolved "https://registry.yarnpkg.com/yallist/-/yallist-4.0.0.tgz#9bb92790d9c0effec63be73519e11a35019a3a72"
-  integrity sha512-3wdGidZyq5PB084XLES5TpOSRA3wjXAlIWMhum2kRcv/41Sn2emQ0dycQW4uZXLejwKvg6EsvbdlVL+FYEct7A==
diff --git a/plugins/postcss-env-function/.editorconfig b/plugins/postcss-env-function/.editorconfig
deleted file mode 100644
index e06d798..0000000
--- a/plugins/postcss-env-function/.editorconfig
+++ /dev/null
@@ -1,15 +0,0 @@
-root = true
-
-[*]
-charset = utf-8
-end_of_line = lf
-indent_style = tab
-insert_final_newline = true
-trim_trailing_whitespace = true
-
-[*.md]
-trim_trailing_whitespace = false
-
-[*.{json,md,yml}]
-indent_size = 2
-indent_style = space
diff --git a/plugins/postcss-env-function/.github/workflows/test.yml b/plugins/postcss-env-function/.github/workflows/test.yml
deleted file mode 100644
index 4a287db..0000000
--- a/plugins/postcss-env-function/.github/workflows/test.yml
+++ /dev/null
@@ -1,18 +0,0 @@
-name: test
-on:
-  push:
-
-jobs:
-  test:
-    runs-on: ubuntu-latest
-    strategy:
-      matrix:
-        node: [12, 16]
-    steps:
-      - uses: actions/checkout@v2
-      - uses: actions/setup-node@v2
-        with:
-          node-version: ${{ matrix.node }}
-
-      - run: yarn install --ignore-scripts
-      - run: yarn run test
diff --git a/plugins/postcss-env-function/package.json b/plugins/postcss-env-function/package.json
index b2d76dc..cb67e8a 100644
--- a/plugins/postcss-env-function/package.json
+++ b/plugins/postcss-env-function/package.json
@@ -20,7 +20,8 @@
     "pretest": "npm run build",
     "test": "npm run lint && npm run tape",
     "tape": "postcss-tape",
-    "prepublishOnly": "npm test"
+    "prepublishOnly": "npm run build --if-present && npm run test",
+    "stryker": "stryker run --logLevel error"
   },
   "engines": {
     "node": ">=12"
diff --git a/plugins/postcss-focus-visible/.editorconfig b/plugins/postcss-focus-visible/.editorconfig
deleted file mode 100644
index e06d798..0000000
--- a/plugins/postcss-focus-visible/.editorconfig
+++ /dev/null
@@ -1,15 +0,0 @@
-root = true
-
-[*]
-charset = utf-8
-end_of_line = lf
-indent_style = tab
-insert_final_newline = true
-trim_trailing_whitespace = true
-
-[*.md]
-trim_trailing_whitespace = false
-
-[*.{json,md,yml}]
-indent_size = 2
-indent_style = space
diff --git a/plugins/postcss-focus-visible/.github/workflows/test.yml b/plugins/postcss-focus-visible/.github/workflows/test.yml
deleted file mode 100644
index 4a287db..0000000
--- a/plugins/postcss-focus-visible/.github/workflows/test.yml
+++ /dev/null
@@ -1,18 +0,0 @@
-name: test
-on:
-  push:
-
-jobs:
-  test:
-    runs-on: ubuntu-latest
-    strategy:
-      matrix:
-        node: [12, 16]
-    steps:
-      - uses: actions/checkout@v2
-      - uses: actions/setup-node@v2
-        with:
-          node-version: ${{ matrix.node }}
-
-      - run: yarn install --ignore-scripts
-      - run: yarn run test
diff --git a/plugins/postcss-focus-visible/package.json b/plugins/postcss-focus-visible/package.json
index 03a7600..8298ddd 100644
--- a/plugins/postcss-focus-visible/package.json
+++ b/plugins/postcss-focus-visible/package.json
@@ -26,9 +26,10 @@
     "lint": "npx eslint --cache src",
     "lint:fix": "npx eslint --cache --fix",
     "pretest": "npm install && npm run build",
-    "prepublishOnly": "npm test",
+    "prepublishOnly": "npm run build --if-present && npm run test",
     "test": "npm run lint && npm run tape",
-    "tape": "npx postcss-tape"
+    "tape": "npx postcss-tape",
+    "stryker": "stryker run --logLevel error"
   },
   "engines": {
     "node": ">=12"
diff --git a/plugins/postcss-focus-within/.editorconfig b/plugins/postcss-focus-within/.editorconfig
deleted file mode 100644
index e06d798..0000000
--- a/plugins/postcss-focus-within/.editorconfig
+++ /dev/null
@@ -1,15 +0,0 @@
-root = true
-
-[*]
-charset = utf-8
-end_of_line = lf
-indent_style = tab
-insert_final_newline = true
-trim_trailing_whitespace = true
-
-[*.md]
-trim_trailing_whitespace = false
-
-[*.{json,md,yml}]
-indent_size = 2
-indent_style = space
diff --git a/plugins/postcss-focus-within/.github/workflows/test.yml b/plugins/postcss-focus-within/.github/workflows/test.yml
deleted file mode 100644
index 4a287db..0000000
--- a/plugins/postcss-focus-within/.github/workflows/test.yml
+++ /dev/null
@@ -1,18 +0,0 @@
-name: test
-on:
-  push:
-
-jobs:
-  test:
-    runs-on: ubuntu-latest
-    strategy:
-      matrix:
-        node: [12, 16]
-    steps:
-      - uses: actions/checkout@v2
-      - uses: actions/setup-node@v2
-        with:
-          node-version: ${{ matrix.node }}
-
-      - run: yarn install --ignore-scripts
-      - run: yarn run test
diff --git a/plugins/postcss-focus-within/package.json b/plugins/postcss-focus-within/package.json
index 1c9d71d..c761915 100644
--- a/plugins/postcss-focus-within/package.json
+++ b/plugins/postcss-focus-within/package.json
@@ -25,10 +25,11 @@
     "build:watch": "npx rollup -c .rollup.js --watch",
     "lint": "npx eslint --cache src",
     "lint:fix": "npx eslint --cache --fix",
-    "prepublishOnly": "npm test",
+    "prepublishOnly": "npm run build --if-present && npm run test",
     "pretest": "npm install && npm run build",
     "test": "npm run lint && npm run tape",
-    "tape": "npx postcss-tape"
+    "tape": "npx postcss-tape",
+    "stryker": "stryker run --logLevel error"
   },
   "engines": {
     "node": ">=12"
diff --git a/plugins/postcss-gap-properties/.editorconfig b/plugins/postcss-gap-properties/.editorconfig
deleted file mode 100644
index e06d798..0000000
--- a/plugins/postcss-gap-properties/.editorconfig
+++ /dev/null
@@ -1,15 +0,0 @@
-root = true
-
-[*]
-charset = utf-8
-end_of_line = lf
-indent_style = tab
-insert_final_newline = true
-trim_trailing_whitespace = true
-
-[*.md]
-trim_trailing_whitespace = false
-
-[*.{json,md,yml}]
-indent_size = 2
-indent_style = space
diff --git a/plugins/postcss-gap-properties/.github/workflows/test.yml b/plugins/postcss-gap-properties/.github/workflows/test.yml
deleted file mode 100644
index 4a287db..0000000
--- a/plugins/postcss-gap-properties/.github/workflows/test.yml
+++ /dev/null
@@ -1,18 +0,0 @@
-name: test
-on:
-  push:
-
-jobs:
-  test:
-    runs-on: ubuntu-latest
-    strategy:
-      matrix:
-        node: [12, 16]
-    steps:
-      - uses: actions/checkout@v2
-      - uses: actions/setup-node@v2
-        with:
-          node-version: ${{ matrix.node }}
-
-      - run: yarn install --ignore-scripts
-      - run: yarn run test
diff --git a/plugins/postcss-gap-properties/package.json b/plugins/postcss-gap-properties/package.json
index eb518d3..bcd3147 100644
--- a/plugins/postcss-gap-properties/package.json
+++ b/plugins/postcss-gap-properties/package.json
@@ -9,10 +9,11 @@
   "bugs": "https://github.com/jonathantneal/postcss-gap-properties/issues",
   "main": "index.js",
   "scripts": {
-    "prepublishOnly": "npm test",
+    "prepublishOnly": "npm run build --if-present && npm run test",
     "test": "echo 'Running tests...'; npm run test:js && npm run test:tape",
     "test:js": "eslint *.js --cache --ignore-path .gitignore --quiet",
-    "test:tape": "postcss-tape"
+    "test:tape": "postcss-tape",
+    "stryker": "stryker run --logLevel error"
   },
   "engines": {
     "node": ">=12"
diff --git a/plugins/postcss-image-set-function/.editorconfig b/plugins/postcss-image-set-function/.editorconfig
deleted file mode 100644
index 7227e5a..0000000
--- a/plugins/postcss-image-set-function/.editorconfig
+++ /dev/null
@@ -1,19 +0,0 @@
-root = true
-
-[*]
-charset = utf-8
-end_of_line = lf
-indent_style = tab
-insert_final_newline = true
-trim_trailing_whitespace = true
-
-[*.md]
-trim_trailing_whitespace = false
-
-[*.{json,md,yml}]
-indent_size = 2
-indent_style = space
-
-[test/*.expect.css]
-insert_final_newline = false
-trim_trailing_whitespace = false
diff --git a/plugins/postcss-image-set-function/.github/workflows/test.yml b/plugins/postcss-image-set-function/.github/workflows/test.yml
deleted file mode 100644
index 4a287db..0000000
--- a/plugins/postcss-image-set-function/.github/workflows/test.yml
+++ /dev/null
@@ -1,18 +0,0 @@
-name: test
-on:
-  push:
-
-jobs:
-  test:
-    runs-on: ubuntu-latest
-    strategy:
-      matrix:
-        node: [12, 16]
-    steps:
-      - uses: actions/checkout@v2
-      - uses: actions/setup-node@v2
-        with:
-          node-version: ${{ matrix.node }}
-
-      - run: yarn install --ignore-scripts
-      - run: yarn run test
diff --git a/plugins/postcss-image-set-function/package.json b/plugins/postcss-image-set-function/package.json
index 41604ed..fe7c69e 100644
--- a/plugins/postcss-image-set-function/package.json
+++ b/plugins/postcss-image-set-function/package.json
@@ -12,10 +12,11 @@
     "lib/"
   ],
   "scripts": {
-    "prepublishOnly": "npm test",
+    "prepublishOnly": "npm run build --if-present && npm run test",
     "test": "echo 'Running tests...'; npm run test:js && npm run test:tape",
     "test:js": "eslint *.js --cache --ignore-path .gitignore --quiet",
-    "test:tape": "postcss-tape"
+    "test:tape": "postcss-tape",
+    "stryker": "stryker run --logLevel error"
   },
   "engines": {
     "node": ">=12"
diff --git a/plugins/postcss-lab-function/.editorconfig b/plugins/postcss-lab-function/.editorconfig
deleted file mode 100644
index e06d798..0000000
--- a/plugins/postcss-lab-function/.editorconfig
+++ /dev/null
@@ -1,15 +0,0 @@
-root = true
-
-[*]
-charset = utf-8
-end_of_line = lf
-indent_style = tab
-insert_final_newline = true
-trim_trailing_whitespace = true
-
-[*.md]
-trim_trailing_whitespace = false
-
-[*.{json,md,yml}]
-indent_size = 2
-indent_style = space
diff --git a/plugins/postcss-lab-function/.github/workflows/test.yml b/plugins/postcss-lab-function/.github/workflows/test.yml
deleted file mode 100644
index 4a287db..0000000
--- a/plugins/postcss-lab-function/.github/workflows/test.yml
+++ /dev/null
@@ -1,18 +0,0 @@
-name: test
-on:
-  push:
-
-jobs:
-  test:
-    runs-on: ubuntu-latest
-    strategy:
-      matrix:
-        node: [12, 16]
-    steps:
-      - uses: actions/checkout@v2
-      - uses: actions/setup-node@v2
-        with:
-          node-version: ${{ matrix.node }}
-
-      - run: yarn install --ignore-scripts
-      - run: yarn run test
diff --git a/plugins/postcss-lab-function/package.json b/plugins/postcss-lab-function/package.json
index 04c0754..e8972d1 100644
--- a/plugins/postcss-lab-function/package.json
+++ b/plugins/postcss-lab-function/package.json
@@ -20,7 +20,8 @@
     "pretest": "npm install && npm run build",
     "test": "npm run lint && npm run tape",
     "tape": "npx postcss-tape",
-    "prepublishOnly": "npm test"
+    "prepublishOnly": "npm run build --if-present && npm run test",
+    "stryker": "stryker run --logLevel error"
   },
   "engines": {
     "node": ">=12"
diff --git a/plugins/postcss-logical/.editorconfig b/plugins/postcss-logical/.editorconfig
deleted file mode 100644
index e06d798..0000000
--- a/plugins/postcss-logical/.editorconfig
+++ /dev/null
@@ -1,15 +0,0 @@
-root = true
-
-[*]
-charset = utf-8
-end_of_line = lf
-indent_style = tab
-insert_final_newline = true
-trim_trailing_whitespace = true
-
-[*.md]
-trim_trailing_whitespace = false
-
-[*.{json,md,yml}]
-indent_size = 2
-indent_style = space
diff --git a/plugins/postcss-logical/.github/workflows/test.yml b/plugins/postcss-logical/.github/workflows/test.yml
deleted file mode 100644
index 4a287db..0000000
--- a/plugins/postcss-logical/.github/workflows/test.yml
+++ /dev/null
@@ -1,18 +0,0 @@
-name: test
-on:
-  push:
-
-jobs:
-  test:
-    runs-on: ubuntu-latest
-    strategy:
-      matrix:
-        node: [12, 16]
-    steps:
-      - uses: actions/checkout@v2
-      - uses: actions/setup-node@v2
-        with:
-          node-version: ${{ matrix.node }}
-
-      - run: yarn install --ignore-scripts
-      - run: yarn run test
diff --git a/plugins/postcss-logical/package.json b/plugins/postcss-logical/package.json
index b50b34b..d471e4c 100644
--- a/plugins/postcss-logical/package.json
+++ b/plugins/postcss-logical/package.json
@@ -17,11 +17,11 @@
   ],
   "scripts": {
     "build": "rollup --config .rollup.js --silent",
-    "prepublishOnly": "npm test",
-    "pretest:tape": "npm run build",
+    "prepublishOnly": "npm run build --if-present && npm run test",
     "test": "npm run test:js && npm run test:tape",
     "test:js": "eslint src/{*,**/*}.js --cache --ignore-path .gitignore --quiet",
-    "test:tape": "postcss-tape"
+    "test:tape": "postcss-tape",
+    "stryker": "stryker run --logLevel error"
   },
   "engines": {
     "node": ">=12"
diff --git a/plugins/postcss-nesting/.editorconfig b/plugins/postcss-nesting/.editorconfig
deleted file mode 100644
index e06d798..0000000
--- a/plugins/postcss-nesting/.editorconfig
+++ /dev/null
@@ -1,15 +0,0 @@
-root = true
-
-[*]
-charset = utf-8
-end_of_line = lf
-indent_style = tab
-insert_final_newline = true
-trim_trailing_whitespace = true
-
-[*.md]
-trim_trailing_whitespace = false
-
-[*.{json,md,yml}]
-indent_size = 2
-indent_style = space
diff --git a/plugins/postcss-nesting/package.json b/plugins/postcss-nesting/package.json
index 4cbe011..d91ea28 100644
--- a/plugins/postcss-nesting/package.json
+++ b/plugins/postcss-nesting/package.json
@@ -37,11 +37,12 @@
     "postcss-8-nesting"
   ],
   "scripts": {
-    "prepublishOnly": "npm test",
+    "prepublishOnly": "npm run build --if-present && npm run test",
     "build": "node .bin/build.js",
     "test": "node .bin/test.js",
     "test:lint": "node .bin/test-lint.js",
-    "test:tape": "node .bin/test-tape.js"
+    "test:tape": "node .bin/test-tape.js",
+    "stryker": "stryker run --logLevel error"
   },
   "devDependencies": {
     "esbuild": "0.13.12",
@@ -55,7 +56,7 @@
     "node >= 12"
   ],
   "engines": {
-    "node": ">= 12"
+    "node": ">=12"
   },
   "eslintConfig": {
     "extends": "eslint:recommended",
diff --git a/plugins/postcss-nesting/stryker.conf.json b/plugins/postcss-nesting/stryker.conf.json
new file mode 100644
index 0000000..b3a8438
--- /dev/null
+++ b/plugins/postcss-nesting/stryker.conf.json
@@ -0,0 +1,19 @@
+{
+  "$schema": "../../node_modules/@stryker-mutator/core/schema/stryker-schema.json",
+  "mutate": [
+    "src/lib/**/*.js"
+  ],
+  "testRunner": "command",
+  "coverageAnalysis": "perTest",
+  "tempDirName": "../../.stryker-tmp",
+  "commandRunner": {
+    "command": "npm run test:tape"
+  },
+  "buildCommand": "npm run build",
+  "thresholds": {
+    "high": 100,
+    "low": 100,
+    "break": 100
+  },
+  "inPlace": true
+}
diff --git a/plugins/postcss-nesting/test/document.css b/plugins/postcss-nesting/test/document.css
new file mode 100644
index 0000000..612c248
--- /dev/null
+++ b/plugins/postcss-nesting/test/document.css
@@ -0,0 +1,7 @@
+a {
+	order: 1;
+
+	@document url("https://www.example.com/") {
+		order: 2;
+	}
+}
diff --git a/plugins/postcss-nesting/test/document.expect.css b/plugins/postcss-nesting/test/document.expect.css
new file mode 100644
index 0000000..eca98ac
--- /dev/null
+++ b/plugins/postcss-nesting/test/document.expect.css
@@ -0,0 +1,8 @@
+a {
+	order: 1
+}
+@document url("https://www.example.com/") {
+	a {
+		order: 2
+}
+	}
diff --git a/plugins/postcss-nesting/test/supports.css b/plugins/postcss-nesting/test/supports.css
new file mode 100644
index 0000000..2600818
--- /dev/null
+++ b/plugins/postcss-nesting/test/supports.css
@@ -0,0 +1,11 @@
+a {
+	order: 1;
+
+	@supports (order: 2) {
+		order: 2;
+	}
+
+	@supports (background-image: url('fo and o.png')) {
+		order: 3;
+	}
+}
diff --git a/plugins/postcss-nesting/test/supports.expect.css b/plugins/postcss-nesting/test/supports.expect.css
new file mode 100644
index 0000000..d905de0
--- /dev/null
+++ b/plugins/postcss-nesting/test/supports.expect.css
@@ -0,0 +1,13 @@
+a {
+	order: 1
+}
+@supports (order: 2) {
+	a {
+		order: 2
+}
+	}
+@supports (background-image: url('fo and o.png')) {
+	a {
+		order: 3
+}
+	}
diff --git a/plugins/postcss-overflow-shorthand/.editorconfig b/plugins/postcss-overflow-shorthand/.editorconfig
deleted file mode 100644
index e06d798..0000000
--- a/plugins/postcss-overflow-shorthand/.editorconfig
+++ /dev/null
@@ -1,15 +0,0 @@
-root = true
-
-[*]
-charset = utf-8
-end_of_line = lf
-indent_style = tab
-insert_final_newline = true
-trim_trailing_whitespace = true
-
-[*.md]
-trim_trailing_whitespace = false
-
-[*.{json,md,yml}]
-indent_size = 2
-indent_style = space
diff --git a/plugins/postcss-overflow-shorthand/.github/workflows/test.yml b/plugins/postcss-overflow-shorthand/.github/workflows/test.yml
deleted file mode 100644
index 4a287db..0000000
--- a/plugins/postcss-overflow-shorthand/.github/workflows/test.yml
+++ /dev/null
@@ -1,18 +0,0 @@
-name: test
-on:
-  push:
-
-jobs:
-  test:
-    runs-on: ubuntu-latest
-    strategy:
-      matrix:
-        node: [12, 16]
-    steps:
-      - uses: actions/checkout@v2
-      - uses: actions/setup-node@v2
-        with:
-          node-version: ${{ matrix.node }}
-
-      - run: yarn install --ignore-scripts
-      - run: yarn run test
diff --git a/plugins/postcss-overflow-shorthand/package.json b/plugins/postcss-overflow-shorthand/package.json
index eab1972..c3fc8ce 100644
--- a/plugins/postcss-overflow-shorthand/package.json
+++ b/plugins/postcss-overflow-shorthand/package.json
@@ -16,12 +16,13 @@
     "index.esm.mjs.map"
   ],
   "scripts": {
-    "prepublishOnly": "npm test",
+    "prepublishOnly": "npm run build --if-present && npm run test",
     "pretest": "rollup -c .rollup.js --silent",
     "test": "echo 'Running tests...'; npm run test:js && npm run test:tape",
     "test:ec": "echint --ignore index.*.js test",
     "test:js": "eslint *.js --cache --ignore-path .gitignore --quiet",
-    "test:tape": "postcss-tape"
+    "test:tape": "postcss-tape",
+    "stryker": "stryker run --logLevel error"
   },
   "engines": {
     "node": ">=12"
diff --git a/plugins/postcss-place/.editorconfig b/plugins/postcss-place/.editorconfig
deleted file mode 100644
index e06d798..0000000
--- a/plugins/postcss-place/.editorconfig
+++ /dev/null
@@ -1,15 +0,0 @@
-root = true
-
-[*]
-charset = utf-8
-end_of_line = lf
-indent_style = tab
-insert_final_newline = true
-trim_trailing_whitespace = true
-
-[*.md]
-trim_trailing_whitespace = false
-
-[*.{json,md,yml}]
-indent_size = 2
-indent_style = space
diff --git a/plugins/postcss-place/.github/workflows/test.yml b/plugins/postcss-place/.github/workflows/test.yml
deleted file mode 100644
index 4a287db..0000000
--- a/plugins/postcss-place/.github/workflows/test.yml
+++ /dev/null
@@ -1,18 +0,0 @@
-name: test
-on:
-  push:
-
-jobs:
-  test:
-    runs-on: ubuntu-latest
-    strategy:
-      matrix:
-        node: [12, 16]
-    steps:
-      - uses: actions/checkout@v2
-      - uses: actions/setup-node@v2
-        with:
-          node-version: ${{ matrix.node }}
-
-      - run: yarn install --ignore-scripts
-      - run: yarn run test
diff --git a/plugins/postcss-place/.rollup.js b/plugins/postcss-place/.rollup.js
index 4e8adac..8025c82 100644
--- a/plugins/postcss-place/.rollup.js
+++ b/plugins/postcss-place/.rollup.js
@@ -14,7 +14,7 @@ export default {
 					corejs: 3,
 					loose: true,
 					modules: false,
-					targets: { node: 10 },
+					targets: { node: 12 },
 					useBuiltIns: 'entry'
 				}]
 			]
diff --git a/plugins/postcss-place/package.json b/plugins/postcss-place/package.json
index f232156..338209f 100755
--- a/plugins/postcss-place/package.json
+++ b/plugins/postcss-place/package.json
@@ -20,7 +20,8 @@
     "pretest": "npm install && npm run build",
     "test": "npm run lint && npm run tape",
     "tape": "npx postcss-tape",
-    "prepublishOnly": "npm test"
+    "prepublishOnly": "npm run build --if-present && npm run test",
+    "stryker": "stryker run --logLevel error"
   },
   "engines": {
     "node": ">=12"
diff --git a/plugins/postcss-pseudo-class-any-link/.editorconfig b/plugins/postcss-pseudo-class-any-link/.editorconfig
deleted file mode 100644
index e06d798..0000000
--- a/plugins/postcss-pseudo-class-any-link/.editorconfig
+++ /dev/null
@@ -1,15 +0,0 @@
-root = true
-
-[*]
-charset = utf-8
-end_of_line = lf
-indent_style = tab
-insert_final_newline = true
-trim_trailing_whitespace = true
-
-[*.md]
-trim_trailing_whitespace = false
-
-[*.{json,md,yml}]
-indent_size = 2
-indent_style = space
diff --git a/plugins/postcss-pseudo-class-any-link/.github/workflows/test.yml b/plugins/postcss-pseudo-class-any-link/.github/workflows/test.yml
deleted file mode 100644
index 4a287db..0000000
--- a/plugins/postcss-pseudo-class-any-link/.github/workflows/test.yml
+++ /dev/null
@@ -1,18 +0,0 @@
-name: test
-on:
-  push:
-
-jobs:
-  test:
-    runs-on: ubuntu-latest
-    strategy:
-      matrix:
-        node: [12, 16]
-    steps:
-      - uses: actions/checkout@v2
-      - uses: actions/setup-node@v2
-        with:
-          node-version: ${{ matrix.node }}
-
-      - run: yarn install --ignore-scripts
-      - run: yarn run test
diff --git a/plugins/postcss-pseudo-class-any-link/package.json b/plugins/postcss-pseudo-class-any-link/package.json
index 817a43c..1b5c271 100644
--- a/plugins/postcss-pseudo-class-any-link/package.json
+++ b/plugins/postcss-pseudo-class-any-link/package.json
@@ -9,10 +9,11 @@
   "bugs": "https://github.com/jonathantneal/postcss-pseudo-class-any-link/issues",
   "main": "index.js",
   "scripts": {
-    "prepublishOnly": "npm test",
+    "prepublishOnly": "npm run build --if-present && npm run test",
     "test": "npm run test:js && npm run test:tape",
     "test:js": "eslint *.js --cache --ignore-path .gitignore --quiet",
-    "test:tape": "postcss-tape"
+    "test:tape": "postcss-tape",
+    "stryker": "stryker run --logLevel error"
   },
   "engines": {
     "node": ">=12"
diff --git a/rollup/cli.js b/rollup/cli.js
new file mode 100644
index 0000000..fd8895b
--- /dev/null
+++ b/rollup/cli.js
@@ -0,0 +1,42 @@
+import babel from '@rollup/plugin-babel';
+import { nodeResolve } from '@rollup/plugin-node-resolve';
+import commonjs from '@rollup/plugin-commonjs';
+import path from 'path';
+
+export default {
+	input: 'src/cli.js',
+	output: [
+		{ file: 'dist/cli.js', format: 'cjs', sourcemap: false, strict: false }
+	],
+	plugins: [
+		commonjs(),
+		nodeResolve({
+			rootDir: path.join(process.cwd(), '..', '..')
+		}),
+		babel({
+			babelHelpers: 'bundled',
+			exclude: 'node_modules/**',
+			presets: [
+				['@babel/preset-env', {
+					corejs: 3,
+					loose: true,
+					modules: false,
+					targets: { node: 12 },
+					useBuiltIns: 'usage'
+				}]
+			]
+		}),
+		addHashBang()
+	]
+}
+
+function addHashBang () {
+	return {
+		name: 'add-hash-bang',
+		renderChunk (code) {
+			const updatedCode = `#!/usr/bin/env node\n\n${code}`;
+
+			return updatedCode;
+		}
+	};
+}
diff --git a/rollup/cli.ts.js b/rollup/cli.ts.js
new file mode 100644
index 0000000..272c38e
--- /dev/null
+++ b/rollup/cli.ts.js
@@ -0,0 +1,44 @@
+import babel from '@rollup/plugin-babel';
+import commonjs from '@rollup/plugin-commonjs';
+import path from 'path';
+import typescript from '@rollup/plugin-typescript';
+import { nodeResolve } from '@rollup/plugin-node-resolve';
+
+export default {
+	input: 'src/cli.ts',
+	output: [
+		{ file: 'dist/cli.js', format: 'cjs', sourcemap: false, strict: false }
+	],
+	plugins: [
+		typescript({ tsconfig: './tsconfig.json' }),
+		commonjs(),
+		nodeResolve({
+			rootDir: path.join(process.cwd(), '..', '..')
+		}),
+		babel({
+			babelHelpers: 'bundled',
+			exclude: 'node_modules/**',
+			presets: [
+				['@babel/preset-env', {
+					corejs: 3,
+					loose: true,
+					modules: false,
+					targets: { node: 12 },
+					useBuiltIns: 'usage'
+				}]
+			]
+		}),
+		addHashBang()
+	]
+}
+
+function addHashBang () {
+	return {
+		name: 'add-hash-bang',
+		renderChunk (code) {
+			const updatedCode = `#!/usr/bin/env node\n\n${code}`;
+
+			return updatedCode;
+		}
+	};
+}
diff --git a/rollup/default.js b/rollup/default.js
new file mode 100644
index 0000000..824334c
--- /dev/null
+++ b/rollup/default.js
@@ -0,0 +1,24 @@
+import babel from '@rollup/plugin-babel';
+
+export default {
+	input: 'src/index.js',
+	output: [
+		{ file: 'dist/index.js', format: 'cjs', sourcemap: true, exports: 'default' },
+		{ file: 'dist/index.mjs', format: 'esm', sourcemap: true, exports: 'default' }
+	],
+	plugins: [
+		babel({
+			babelHelpers: 'bundled',
+			exclude: 'node_modules/**',
+			presets: [
+				['@babel/preset-env', {
+					corejs: 3,
+					loose: true,
+					modules: false,
+					targets: { node: 12 },
+					useBuiltIns: 'usage'
+				}]
+			]
+		}),
+	]
+}
diff --git a/rollup/default.ts.js b/rollup/default.ts.js
new file mode 100644
index 0000000..0d20b62
--- /dev/null
+++ b/rollup/default.ts.js
@@ -0,0 +1,26 @@
+import babel from '@rollup/plugin-babel';
+import typescript from '@rollup/plugin-typescript';
+
+export default {
+	input: 'src/index.ts',
+	output: [
+		{ file: 'dist/index.js', format: 'cjs', sourcemap: true, exports: 'default' },
+		{ file: 'dist/index.mjs', format: 'esm', sourcemap: true, exports: 'default' }
+	],
+	plugins: [
+		typescript({ tsconfig: './tsconfig.json' }),
+		babel({
+			babelHelpers: 'bundled',
+			exclude: 'node_modules/**',
+			presets: [
+				['@babel/preset-env', {
+					corejs: 3,
+					loose: true,
+					modules: false,
+					targets: { node: 12 },
+					useBuiltIns: 'usage'
+				}]
+			]
+		}),
+	]
+}
diff --git a/tsconfig.json b/tsconfig.json
new file mode 100644
index 0000000..a56e57b
--- /dev/null
+++ b/tsconfig.json
@@ -0,0 +1,11 @@
+{
+  "compilerOptions": {
+    "moduleResolution": "node",
+    "allowJs": false,
+    "target": "es6",
+    "lib": ["es6"],
+    "allowSyntheticDefaultImports": true,
+    "module": "es6",
+    "declaration": true
+  }
+}
-- 
2.33.1

