From 0e96b108d98f83598d37e3dbfa480ffed1fa27e8 Mon Sep 17 00:00:00 2001
From: romainmenke <romainmenke@gmail.com>
Date: Tue, 2 Nov 2021 19:18:29 +0100
Subject: [PATCH 2/4] add tests to base-cli

---
 cli/base-cli/package.json                |   8 +-
 cli/base-cli/src/args.mjs                | 153 +++++++++++++
 cli/base-cli/src/index.js                | 130 -----------
 cli/base-cli/src/index.mjs               | 153 +++++++++++++
 cli/base-cli/stryker.conf.json           |  17 ++
 cli/base-cli/test/test.mjs               | 277 +++++++++++++++++++++++
 cli/postcss-base-plugin-cli/src/cli.js   |  15 +-
 cli/postcss-base-plugin-cli/test/test.sh |   4 +-
 8 files changed, 617 insertions(+), 140 deletions(-)
 create mode 100644 cli/base-cli/src/args.mjs
 delete mode 100644 cli/base-cli/src/index.js
 create mode 100644 cli/base-cli/src/index.mjs
 create mode 100644 cli/base-cli/stryker.conf.json
 create mode 100644 cli/base-cli/test/test.mjs

diff --git a/cli/base-cli/package.json b/cli/base-cli/package.json
index 6dc6d18..691b0cd 100644
--- a/cli/base-cli/package.json
+++ b/cli/base-cli/package.json
@@ -8,7 +8,7 @@
   "engines": {
     "node": ">=12"
   },
-  "main": "src/index.js",
+  "main": "src/index.mjs",
   "files": [
     "CHANGELOG.md",
     "INSTALL.md",
@@ -17,7 +17,9 @@
     "src/index.js"
   ],
   "scripts": {
-    "test": "npm run test:js",
-    "test:js": "eslint src/**/*.js --quiet"
+    "test": "npm run test:lint && npm run test:js",
+    "test:lint": "eslint src/**/*.mjs --quiet",
+    "test:js": "node ./test/test.mjs",
+    "stryker": "stryker run --logLevel error"
   }
 }
diff --git a/cli/base-cli/src/args.mjs b/cli/base-cli/src/args.mjs
new file mode 100644
index 0000000..f738264
--- /dev/null
+++ b/cli/base-cli/src/args.mjs
@@ -0,0 +1,153 @@
+export function parseArguments(args, allowedPluginOpts, helpLogger) {
+	// Stryker disable next-line all
+	const fileRegExp = /^[\w/.]+$/;
+	// Stryker disable next-line all
+	const argRegExpA = /^(--?\w(?:[\w-]*?))=(?:("|')(.+)\2)$/;
+	// Stryker disable next-line all
+	const argRegExpB = /^(--?\w(?:[\w-]*?))=(([^'"].*?[^'"]))$/;
+
+	const flatArgs = args.flatMap((x) => {
+		const argMatchA = x.match(argRegExpA);
+		if (argMatchA) {
+			// Stryker disable next-line ArrayDeclaration
+			return [argMatchA[1], argMatchA[3]];
+		}
+
+		const argMatchB = x.match(argRegExpB);
+		if (argMatchB) {
+			return [argMatchB[1], argMatchB[2]];
+		}
+
+		return [x];
+	}).filter((x) => {
+		return !!x;
+	});
+
+	const parsedArgs = {
+		inputs: [],
+		pluginOptions: {},
+		map: false,
+	};
+
+	let pluginOpts = null;
+
+	let encounteredFlagsOrArgs = false;
+
+	// Stryker disable next-line UpdateOperator,EqualityOperator
+	for (let i = 0; i < flatArgs.length; i++) {
+		const arg = flatArgs[i];
+
+		switch (arg) {
+			case '-o':
+			case '--output':
+				parsedArgs.output = flatArgs[i + 1];
+				// Stryker disable next-line UpdateOperator
+				i++;
+				break;
+
+			case '-m':
+			case '--map':
+				parsedArgs.map = true;
+				// Stryker disable next-line all
+				if (!(/^--?\w/.test(flatArgs[i + 1]))) {
+					// Stryker disable next-line UpdateOperator
+					i++;
+				}
+				encounteredFlagsOrArgs = true;
+				break;
+
+			case '-r':
+			case '--replace':
+				parsedArgs.replace = true;
+				// Stryker disable next-line all
+				if (!(/^--?\w/.test(flatArgs[i + 1]))) {
+					// Stryker disable next-line UpdateOperator
+					i++;
+				}
+				encounteredFlagsOrArgs = true;
+				break;
+
+			case '-d':
+			case '--dir':
+				parsedArgs.outputDir = flatArgs[i + 1];
+				// Stryker disable next-line UpdateOperator
+				i++;
+				encounteredFlagsOrArgs = true;
+				break;
+
+			case '-p':
+			case '--plugin-options':
+				pluginOpts = flatArgs[i + 1];
+				// Stryker disable next-line UpdateOperator
+				i++;
+				// Stryker disable next-line BooleanLiteral
+				encounteredFlagsOrArgs = true;
+				break;
+
+			default:
+				if (!encounteredFlagsOrArgs && fileRegExp.test(arg)) {
+					parsedArgs.inputs.push(arg);
+					break;
+				}
+
+				// Stryker disable next-line all
+				console.warn(`unknown argument : ${arg}`);
+				// Stryker disable next-line all
+				helpLogger();
+				return false;
+		}
+	}
+
+	if (parsedArgs.replace) {
+		delete parsedArgs.output;
+		delete parsedArgs.outputDir;
+	}
+
+	if (parsedArgs.outputDir) {
+		delete parsedArgs.output;
+	}
+
+	if (!parsedArgs.replace && parsedArgs.inputs.length > 1 && !parsedArgs.outputDir) {
+		// Stryker disable next-line all
+		console.warn(`specify "--dir" and omit "--output" when processing multiple inputs`);
+		// Stryker disable next-line all
+		helpLogger();
+		return false;
+	}
+
+	if (parsedArgs.inputs.length === 0) {
+		parsedArgs.stdin = true;
+	}
+
+	if (!parsedArgs.output && !parsedArgs.outputDir && !parsedArgs.replace) {
+		parsedArgs.stdout = true;
+	}
+
+	let parsedPluginOpts = {};
+	if (pluginOpts) {
+		try {
+			parsedPluginOpts = JSON.parse(pluginOpts);
+		} catch (_) {
+			// Stryker disable next-line all
+			console.warn(`plugin options must be valid JSON`);
+			// Stryker disable next-line all
+			helpLogger();
+			return false;
+		}
+	}
+
+	for (const key in parsedPluginOpts) {
+		const value = parsedPluginOpts[key];
+		if (allowedPluginOpts.includes(key)) {
+			parsedArgs.pluginOptions[key] = value;
+		} else {
+			// Stryker disable next-line all
+			console.warn(`unknown plugin option : ${key}`);
+			// Stryker disable next-line all
+			helpLogger();
+			return false;
+		}
+	}
+
+	return parsedArgs;
+}
diff --git a/cli/base-cli/src/index.js b/cli/base-cli/src/index.js
deleted file mode 100644
index 9f09316..0000000
--- a/cli/base-cli/src/index.js
+++ /dev/null
@@ -1,130 +0,0 @@
-import fs from 'fs';
-
-export default function cli(postcss, plugin, helpLogger) {
-	// get process and plugin options from the command line
-	const fileRegExp = /^[\w/.]+$/;
-	const argRegExp = /^--(\w+)=("|')?(.+)\2$/;
-	const relaxedJsonPropRegExp = /(['"])?([a-z0-9A-Z_]+)(['"])?:/g;
-	const relaxedJsonValueRegExp = /("[a-z0-9A-Z_]+":\s*)'?([A-z0-9]+)'?([,}])/g;
-	const argo = process.argv.slice(2).reduce(
-		(object, arg) => {
-			const argMatch = arg.match(argRegExp);
-			const fileMatch = arg.match(fileRegExp);
-
-			if (argMatch) {
-				object[argMatch[1]] = argMatch[3];
-			} else if (fileMatch) {
-				if (object.from === '<stdin>') {
-					object.from = arg;
-				} else if (object.to === '<stdout>') {
-					object.to = arg;
-				}
-			}
-
-			return object;
-		},
-		{ from: '<stdin>', to: '<stdout>', opts: 'null' }
-	);
-
-	// get css from command line arguments or stdin
-	(argo.from === '<stdin>' ? getStdin() : readFile(argo.from))
-		.then(css => {
-			if (!css && (argo.form === '<stdin>' || !argo.from)) {
-				helpLogger();
-				process.exit(0);
-			}
-
-		const pluginOpts = JSON.parse(
-			argo.opts
-			.replace(relaxedJsonPropRegExp, '"$2": ')
-			.replace(relaxedJsonValueRegExp, '$1"$2"$3')
-		);
-		const processOptions = Object.assign({ from: argo.from, to: argo.to || argo.from }, argo.map ? { map: JSON.parse(argo.map) } : {});
-
-		const result = postcss([plugin(pluginOpts)]).process(css, processOptions);
-
-		if (argo.to === '<stdout>') {
-			return result.css;
-		} else {
-			return writeFile(argo.to, result.css).then(
-				() => {
-					console.log(`CSS was written to "${argo.to}"`)
-				}
-			)
-		}
-	}).then(
-		result => {
-			if (result) {
-				process.stdout.write(result);
-			}
-
-			process.exit(0);
-		},
-		error => {
-			console.error(error);
-
-			process.exit(1);
-		}
-	);
-}
-
-function readFile (pathname) {
-	return new Promise((resolve, reject) => {
-		fs.readFile(pathname, 'utf8', (error, data) => {
-			if (error) {
-				reject(error);
-			} else {
-				resolve(data);
-			}
-		});
-	});
-}
-
-function writeFile (pathname, data) {
-	return new Promise((resolve, reject) => {
-		fs.writeFile(pathname, data, (error, content) => {
-			if (error) {
-				reject(error);
-			} else {
-				resolve(content);
-			}
-		});
-	});
-}
-
-function getStdin () {
-	return new Promise(resolve => {
-		let data = '';
-		let timedOut = false;
-		setTimeout(() => {
-			timedOut = true;
-			resolve('');
-		}, 10000);
-
-		if (process.stdin.isTTY) {
-			if (timedOut) {
-				return;
-			}
-
-			resolve(data);
-		} else {
-			process.stdin.setEncoding('utf8');
-
-			process.stdin.on('readable', () => {
-				let chunk;
-
-				while ((chunk = process.stdin.read())) {
-					data += chunk;
-				}
-			});
-
-			process.stdin.on('end', () => {
-				if (timedOut) {
-					return;
-				}
-
-				resolve(data);
-			});
-		}
-	});
-}
diff --git a/cli/base-cli/src/index.mjs b/cli/base-cli/src/index.mjs
new file mode 100644
index 0000000..78b5604
--- /dev/null
+++ b/cli/base-cli/src/index.mjs
@@ -0,0 +1,153 @@
+import fs from 'fs';
+import path from 'path';
+import { parseArguments } from './args.mjs';
+
+export default function cli(postcss, plugin, allowedPluginOpts, helpLogger) {
+	// get process and plugin options from the command line
+	const argo = parseArguments(process.argv.slice(2), allowedPluginOpts, helpLogger)
+	if (!argo) {
+		process.exit(1);
+	}
+
+	if (argo.stdin && argo.stdout) {
+		return getStdin().then((css) => {
+			if (!css) {
+				helpLogger();
+				process.exit(1);
+			}
+
+			const result = postcss([plugin(argo.pluginOptions)]).process(css, {
+				from: 'stdin',
+				to: 'stdout',
+				map: argo.map,
+			});
+
+			return result.css;
+		}).then((result) => {
+			process.stdout.write(result);
+
+			process.exit(0);
+		}).catch((error) => {
+			console.error(error);
+
+			process.exit(1);
+		});
+	}
+
+	if (argo.stdin) {
+		let output = argo.ouput;
+		if (!output && argo.outputDir) {
+			output = path.join(argo.outputDir, 'output.css');
+		}
+
+		return getStdin().then((css) => {
+			if (!css) {
+				helpLogger();
+				process.exit(1);
+			}
+
+			const result = postcss([plugin(argo.pluginOptions)]).process(css, {
+				from: 'stdin',
+				to: output,
+				map: argo.map,
+			});
+
+			return writeFile(output, result.css);
+		}).then(() => {
+			console.log(`CSS was written to "${output}"`)
+
+			process.exit(0);
+		}).catch((error) => {
+			console.error(error);
+
+			process.exit(1);
+		});
+	}
+
+	return Promise.all(argo.inputs.map((input) => {
+		let output = argo.output;
+		if (argo.outputDir) {
+			output = path.join(argo.outputDir, path.basename(input));
+		}
+		if (argo.replace) {
+			argo.output = input;
+		}
+
+		return readFile(input).then((css) => {
+			const result = postcss([plugin(argo.pluginOptions)]).process(css, {
+				from: input,
+				to: output,
+				map: argo.map,
+			});
+
+			return writeFile(output, result.css).then(() => {
+				console.log(`CSS was written to "${output}"`)
+			})
+		}).catch((error) => {
+			console.error(error);
+
+			process.exit(1);
+		});
+	}));
+}
+
+function readFile (pathname) {
+	return new Promise((resolve, reject) => {
+		fs.readFile(pathname, 'utf8', (error, data) => {
+			if (error) {
+				reject(error);
+			} else {
+				resolve(data);
+			}
+		});
+	});
+}
+
+function writeFile (pathname, data) {
+	return new Promise((resolve, reject) => {
+		fs.writeFile(pathname, data, (error, content) => {
+			if (error) {
+				reject(error);
+			} else {
+				resolve(content);
+			}
+		});
+	});
+}
+
+function getStdin () {
+	return new Promise(resolve => {
+		let data = '';
+		let timedOut = false;
+		setTimeout(() => {
+			timedOut = true;
+			resolve('');
+		}, 10000);
+
+		if (process.stdin.isTTY) {
+			if (timedOut) {
+				return;
+			}
+
+			resolve(data);
+		} else {
+			process.stdin.setEncoding('utf8');
+
+			process.stdin.on('readable', () => {
+				let chunk;
+
+				while ((chunk = process.stdin.read())) {
+					data += chunk;
+				}
+			});
+
+			process.stdin.on('end', () => {
+				if (timedOut) {
+					return;
+				}
+
+				resolve(data);
+			});
+		}
+	});
+}
diff --git a/cli/base-cli/stryker.conf.json b/cli/base-cli/stryker.conf.json
new file mode 100644
index 0000000..2743eab
--- /dev/null
+++ b/cli/base-cli/stryker.conf.json
@@ -0,0 +1,17 @@
+{
+  "$schema": "./node_modules/@stryker-mutator/core/schema/stryker-schema.json",
+  "mutate": [
+    "src/args.mjs"
+  ],
+  "testRunner": "command",
+  "coverageAnalysis": "perTest",
+  "tempDirName": "../../.stryker-tmp",
+  "commandRunner": {
+    "command": "npm run test:js"
+  },
+  "thresholds": {
+    "high": 100,
+    "low": 100,
+    "break": 100
+  }
+}
diff --git a/cli/base-cli/test/test.mjs b/cli/base-cli/test/test.mjs
new file mode 100644
index 0000000..8d7618f
--- /dev/null
+++ b/cli/base-cli/test/test.mjs
@@ -0,0 +1,277 @@
+'use strict';
+import assert from 'assert';
+import { parseArguments } from '../src/args.mjs';
+
+const argumentParsingCases = [
+	{
+		message: "zero values",
+		args: [],
+		allowedPluginOpts: [],
+		expected: {
+			inputs: [],
+			pluginOptions: {},
+			map: false,
+			stdin: true,
+			stdout: true
+		}
+	},
+	{
+		message: "with input files at the end (o)",
+		args: [
+			'-o="o"',
+			'./foo.css',
+			'../baz/bar.css'
+		],
+		allowedPluginOpts: [],
+		expected: false
+	},
+	{
+		message: "with input files at the end (m)",
+		args: [
+			'-m',
+			'./foo.css',
+			'../baz/bar.css'
+		],
+		allowedPluginOpts: [],
+		expected: false
+	},
+	{
+		message: "with input files at the end (r)",
+		args: [
+			'-r',
+			'./foo.css',
+			'../baz/bar.css'
+		],
+		allowedPluginOpts: [],
+		expected: false
+	},
+	{
+		message: "with input files at the end (d)",
+		args: [
+			'-d="d"',
+			'./foo.css',
+			'../baz/bar.css'
+		],
+		allowedPluginOpts: [],
+		expected: false
+	},
+	{
+		message: "with input files at the end (p)",
+		args: [
+			"-p",
+			'{ "an_option": true }',
+			'./foo.css',
+			'../baz/bar.css'
+		],
+		allowedPluginOpts: ['an_option'],
+		expected: false
+	},
+	{
+		message: "with input files in the middle",
+		args: [
+			'-d="o"',
+			'./foo.css',
+			'../baz/bar.css',
+			"-m"
+		],
+		allowedPluginOpts: [],
+		expected: false
+	},
+	{
+		message: "all values",
+		args: [
+			'./foo.css',
+			'../baz/bar.css',
+			'-d="o"',
+			"--dir='dir'",
+			"-m",
+			"--replace",
+			"",
+			"-p",
+			'{ "an_option": true }',
+			"--plugin-options={ \"an_option\": false }"
+		],
+		allowedPluginOpts: [
+			"an_option"
+		],
+		expected: {
+			inputs: [ './foo.css', '../baz/bar.css' ],
+			pluginOptions: { an_option: false },
+			map: true,
+			replace: true
+		}
+	},
+	{
+		message: "stdout",
+		args: ['./foo.css'],
+		allowedPluginOpts: [],
+		expected: {
+			inputs: ['./foo.css'],
+			pluginOptions: {},
+			map: false,
+			stdout: true
+		}
+	},
+	{
+		message: "an option",
+		args: ['./foo.css', '-p', '{ "an_option": true }'],
+		allowedPluginOpts: ['an_option'],
+		expected: {
+			inputs: ['./foo.css'],
+			pluginOptions: { an_option: true },
+			map: false,
+			stdout: true
+		}
+	},
+	{
+		message: "an unknown option",
+		args: ['./foo.css', '-p', '{ "an_option": true }'],
+		allowedPluginOpts: [],
+		expected: false
+	},
+	{
+		message: "an unknown argument",
+		args: ['./foo.css', '-x', 'y'],
+		allowedPluginOpts: [],
+		expected: false
+	},
+	{
+		message: "invalid json",
+		args: ['./foo.css', '-p', '{ an_option: true }'],
+		allowedPluginOpts: [],
+		expected: false
+	},
+	{
+		message: "multiple inputs with --output option",
+		args: ['./foo.css', './fooz.css', '-o', './baz.css'],
+		allowedPluginOpts: [],
+		expected: false
+	},
+	{
+		message: "multiple inputs with --dir option, but also with --output",
+		args: ['./foo.css', './fooz.css', '-o', './baz.css', '-d', './baz/'],
+		allowedPluginOpts: [],
+		expected: {
+			inputs: [ './foo.css', './fooz.css' ],
+			pluginOptions: {},
+			map: false,
+			outputDir: './baz/'
+		}
+	},
+	{
+		message: "output and output dir",
+		args: ['-o', './baz.css', '-d', './baz/'],
+		allowedPluginOpts: [],
+		expected: {
+			inputs: [],
+			pluginOptions: {},
+			map: false,
+			outputDir: './baz/',
+			stdin: true
+		}
+	},
+	{
+		message: "replace with multiple inputs",
+		args: ['./foo.css', './fooz.css', '-r', "foo"],
+		allowedPluginOpts: [],
+		expected: {
+			inputs: [ './foo.css', './fooz.css' ],
+			pluginOptions: {},
+			map: false,
+			replace: true
+		}
+	},
+	{
+		message: "short flag o",
+		args: ['./foo.css', '-o', 'foo'],
+		allowedPluginOpts: [],
+		expected: {
+			inputs: [ './foo.css' ],
+			pluginOptions: {},
+			map: false,
+			output: 'foo'
+		}
+	},
+	{
+		message: "short flag o with equal sign",
+		args: ['./foo.css', '-o=foo'],
+		allowedPluginOpts: [],
+		expected: {
+			inputs: [ './foo.css' ],
+			pluginOptions: {},
+			map: false,
+			output: 'foo'
+		}
+	},
+	{
+		message: "long flag output with equal sign",
+		args: ['./foo.css', '--output=foo'],
+		allowedPluginOpts: [],
+		expected: {
+			inputs: [ './foo.css' ],
+			pluginOptions: {},
+			map: false,
+			output: 'foo'
+		}
+	},
+	{
+		message: "short flag m",
+		args: ['./foo.css', '-m'],
+		allowedPluginOpts: [],
+		expected: {
+			inputs: [ './foo.css' ],
+			pluginOptions: {},
+			map: true,
+			stdout: true
+		}
+	},
+	{
+		message: "long flag map",
+		args: ['./foo.css', '--map'],
+		allowedPluginOpts: [],
+		expected: {
+			inputs: [ './foo.css' ],
+			pluginOptions: {},
+			map: true,
+			stdout: true
+		}
+	},
+	{
+		message: "short flag m with invalid trailer",
+		args: ['./foo.css', '-m', 'foo'],
+		allowedPluginOpts: [],
+		expected: {
+			inputs: [ './foo.css' ],
+			pluginOptions: {},
+			map: true,
+			stdout: true
+		}
+	},
+	{
+		message: "long flag map with invalid trailer",
+		args: ['./foo.css', '--map', 'foo'],
+		allowedPluginOpts: [],
+		expected: {
+			inputs: [ './foo.css' ],
+			pluginOptions: {},
+			map: true,
+			stdout: true
+		}
+	},
+	{
+		message: "long flag map with valid trailer",
+		args: ['./foo.css', '--map', '--replace', '--dir', './baz/'],
+		allowedPluginOpts: [],
+			expected: {
+			inputs: [ './foo.css' ],
+			pluginOptions: {},
+			map: true,
+			replace: true
+		}
+	}
+];
+
+argumentParsingCases.forEach((testCase) => {
+	const result = parseArguments(testCase.args, testCase.allowedPluginOpts, () => { });
+	assert.deepEqual(result, testCase.expected, testCase.message);
+});
diff --git a/cli/postcss-base-plugin-cli/src/cli.js b/cli/postcss-base-plugin-cli/src/cli.js
index c1fa072..36a3dd5 100644
--- a/cli/postcss-base-plugin-cli/src/cli.js
+++ b/cli/postcss-base-plugin-cli/src/cli.js
@@ -2,15 +2,20 @@ import plugin from '@csstools/postcss-base-plugin';
 import cli from '@csstools/base-cli';
 import postcss from 'postcss';
 
-cli(postcss, plugin, logHelpText);
+cli(postcss, plugin, ['option'], logHelpText);
 
 function logHelpText() {
 	console.log([
 		'CSS BasePlugin\n',
 		'  Example plugin\n',
-		'Usage:\n',
-		'  postcss-base-plugin-cli source.css transformed.css',
-		'  postcss-base-plugin-cli --from=source.css --to=transformed.css --opts={}',
-		'  echo "@media (prefers-color-scheme: dark) {}" | postcss-base-plugin-cli\n'
+		'Usage:',
+		'  postcss-base-plugin-cli [input.css] [OPTIONS] [-o|--output output.css]',
+		'  postcss-base-plugin-cli <input.css>... [OPTIONS] --dir <output-directory>',
+		'  postcss-base-plugin-cli <input.css>... [OPTIONS] --replace',
+		'\nOptions:',
+		'  -o, --output          Output file',
+		'  -d, --dir             Output directory',
+		'  -r, --replace         Replace (overwrite) the input file',
+		'  -p, --plugin-options  Stringified JSON object with plugin options',
 	].join('\n'));
 }
diff --git a/cli/postcss-base-plugin-cli/test/test.sh b/cli/postcss-base-plugin-cli/test/test.sh
index dba40f9..df944b9 100644
--- a/cli/postcss-base-plugin-cli/test/test.sh
+++ b/cli/postcss-base-plugin-cli/test/test.sh
@@ -4,7 +4,7 @@ set -e
 echo '' > ./test/basic.result.css;
 
 # Test with named arguments
-postcss-base-plugin-cli --from=./test/basic.css --to=./test/basic.result.css --opts="{ option: true }"
+postcss-base-plugin-cli ./test/basic.css --output=./test/basic.result.css -p='{ "option": true }'
 
 # Check result
 git --no-pager diff --no-index --word-diff ./test/basic.expect.css ./test/basic.result.css
@@ -13,7 +13,7 @@ git --no-pager diff --no-index --word-diff ./test/basic.expect.css ./test/basic.
 echo '' > ./test/basic.result.css;
 
 # Test with unnamed arguments
-postcss-base-plugin-cli ./test/basic.css ./test/basic.result.css
+postcss-base-plugin-cli ./test/basic.css --output=./test/basic.result.css
 
 # Check result
 git --no-pager diff --no-index --word-diff ./test/basic.expect.css ./test/basic.result.css
-- 
2.33.1

